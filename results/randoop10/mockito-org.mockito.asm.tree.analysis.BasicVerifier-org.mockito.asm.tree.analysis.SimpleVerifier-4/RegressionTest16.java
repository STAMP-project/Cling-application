import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        java.lang.String str86 = type83.getClassName();
        boolean boolean88 = type83.equals((java.lang.Object) 177);
        int int89 = type83.getSize();
        java.lang.String str90 = type83.toString();
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier22.newValue(type83);
        java.lang.String str92 = type83.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "F" + "'", str90, "F");
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "float" + "'", str92, "float");
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.mockito.asm.Type type0 = null;
        java.lang.Object obj2 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter3.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter9.merge(value20, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier8.merge(value27, value39);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter3.copyOperation(abstractInsnNode7, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj2, value48);
        java.lang.Class<?> wildcardClass50 = value48.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.String str54 = type53.getClassName();
        int int56 = type53.getOpcode(115);
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type53, list57, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str62 = type61.toString();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type64, true);
        int int68 = type64.getOpcode(141);
        java.lang.String str69 = type64.toString();
        java.lang.String str70 = type64.getInternalName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier59.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        java.util.List list73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier59.naryOperation(abstractInsnNode72, list73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str51, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str54, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 119 + "'", int56 == 119);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str62, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 145 + "'", int68 == 145);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lbyte;" + "'", str69, "Lbyte;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "byte" + "'", str70, "byte");
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int31 = type30.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        java.lang.String str35 = type32.toString();
        int int36 = type32.getSort();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list37, false);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier22.newValue(type30);
        java.lang.String str41 = type30.getDescriptor();
        java.lang.String str42 = type30.getClassName();
        java.lang.Class<?> wildcardClass43 = type30.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "D" + "'", str41, "D");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "double" + "'", str42, "double");
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("short");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        int int41 = type28.getSort();
        org.mockito.asm.Type[] typeArray43 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type28, false);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        int int70 = type65.getSort();
        java.lang.String str71 = type65.getDescriptor();
        int int72 = type65.getSize();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("(CBFCF)I");
        int int75 = type74.getSort();
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray77);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type74, list79, false);
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type74, list82, true);
        java.lang.String str85 = type74.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)F" + "'", str44, "(CBFCF)F");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "C" + "'", str71, "C");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "()L(CBFCF)I;" + "'", str78, "()L(CBFCF)I;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(CBFCF)I" + "'", str85, "(CBFCF)I");
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type11 = type10.getElementType();
        org.mockito.asm.Type type12 = type11.getElementType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        java.lang.String str18 = type15.getClassName();
        int int20 = type15.getOpcode(138);
        int int21 = type15.getSize();
        boolean boolean23 = type15.equals((java.lang.Object) 154);
        java.lang.String str24 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type15, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str35 = type34.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException46);
        java.lang.Class<?> wildcardClass48 = analyzerException46.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        boolean boolean50 = type38.equals((java.lang.Object) wildcardClass48);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str54 = type53.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int58 = type56.getOpcode(8);
        int int60 = type56.getOpcode(163);
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type56, list61, false);
        java.lang.String str64 = type56.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type38, true);
        java.lang.String str69 = type38.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type70 = type38.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str6, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str8, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "char" + "'", str18, "char");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 138 + "'", int20 == 138);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 167 + "'", int60 == 167);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str64, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "C" + "'", str69, "C");
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.Type");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        boolean boolean9 = type3.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type11, list12, true);
        java.lang.Class<?> wildcardClass15 = simpleVerifier14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = type16.getInternalName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str36 = type18.toString();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type18, list37, true);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type40, true);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type43, false);
        int int49 = type43.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type43, true);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        java.lang.String str69 = type64.getClassName();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type64, list70, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type64, true);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean76 = type64.equals((java.lang.Object) type75);
        int int77 = type75.getSort();
        int int79 = type75.getOpcode(24);
        java.lang.String str80 = type75.getDescriptor();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier51.newValue(type75);
        boolean boolean82 = type1.equals((java.lang.Object) simpleVerifier51);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type83 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str17, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "B" + "'", str36, "B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "char" + "'", str46, "char");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 24 + "'", int79 == 24);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "I" + "'", str80, "I");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter3.newValue(type22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier25.newValue(type27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier52.newValue(type55);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier29.newValue(type55);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter3.merge(value28, value60);
        int int62 = value28.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Object) type2, value28);
        java.lang.String str64 = type2.toString();
        java.lang.String str65 = type2.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "C" + "'", str23, "C");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Z" + "'", str64, "Z");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Z" + "'", str65, "Z");
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        java.lang.String str16 = type0.getDescriptor();
        java.lang.String str17 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Z" + "'", str16, "Z");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Z" + "'", str17, "Z");
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str4 = type3.getDescriptor();
        org.mockito.asm.tree.analysis.Value value5 = simpleVerifier1.newValue(type3);
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Object) simpleVerifier1, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type75, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier9.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier9.newValue(type84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        int int88 = type86.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier9.newValue(type86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier1.unaryOperation(abstractInsnNode8, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg.mockito.asm.tree.analysis.BasicValue;" + "'", str4, "Lorg.mockito.asm.tree.analysis.BasicValue;");
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 101 + "'", int88 == 101);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        int int13 = type1.getSort();
        java.lang.String str14 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int6 = type0.getSize();
        java.lang.String str7 = type0.toString();
        java.lang.String str8 = type0.getDescriptor();
        java.lang.String str9 = type0.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type36, false);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier40.newValue(type41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier40.newValue(type43);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter10.copyOperation(abstractInsnNode17, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.ternaryOperation(abstractInsnNode51, value52, value53, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter50.merge(value61, value67);
        int int69 = value61.getSize();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter10.copyOperation(abstractInsnNode49, value61);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int73 = type71.getOpcode(48);
        java.lang.String str74 = type71.getClassName();
        java.lang.String str75 = type71.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str79 = type78.getDescriptor();
        int int80 = type78.getSort();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type78, list81, false);
        java.lang.String str84 = type78.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type78, false);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter10.newValue(type78);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type78, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier89.newOperation(abstractInsnNode90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "F" + "'", str7, "F");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 48 + "'", int73 == 48);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "boolean" + "'", str74, "boolean");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "boolean" + "'", str75, "boolean");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lfloat;" + "'", str79, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "float" + "'", str84, "float");
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getSort();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list15, false);
        int int18 = type12.getSize();
        int int19 = type12.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type20, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int25 = type23.getOpcode(48);
        java.lang.String str26 = type23.getClassName();
        java.lang.String str27 = type23.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type23, list28, true);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier9.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        java.util.List list33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value34 = simpleVerifier9.naryOperation(abstractInsnNode32, list33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lfloat;" + "'", str13, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(value31);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int4 = type2.getOpcode(48);
        java.lang.String str5 = type2.getClassName();
        int int6 = type2.getSize();
        java.lang.String str7 = type2.getDescriptor();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("hi!");
        int int13 = type12.getSize();
        java.lang.String str14 = type12.toString();
        int int15 = type12.getDimensions();
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter18.newValue(type22);
        org.mockito.asm.Type[] typeArray26 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str38, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type29, value63);
        int int66 = type29.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type29, true);
        java.lang.String str69 = type29.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type29, true);
        org.mockito.asm.Type type72 = type29.getElementType();
        int int73 = type72.getSort();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier10.newValue(type72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, true);
        java.lang.String str82 = type77.getClassName();
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type77, list83, true);
        int int86 = type77.getSize();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier10.newValue(type77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier10.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lhi!;" + "'", str14, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "I" + "'", str23, "I");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)I" + "'", str27, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str69, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "void" + "'", str82, "void");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNull(value87);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        int int39 = type37.getOpcode(101);
        java.lang.String str40 = type37.toString();
        int int41 = type37.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray58);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray58);
        int int63 = type26.getSort();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int66 = type64.getOpcode(48);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type69, true);
        java.lang.String str72 = type64.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        int int74 = type73.getSize();
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type73, list75, true);
        java.lang.String str78 = type73.getClassName();
        java.lang.String str79 = type73.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type73, false);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type83, list84, true);
        java.lang.Class<?> wildcardClass87 = type82.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type89, list90, true);
        java.lang.String str93 = type89.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 101 + "'", int39 == 101);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "C" + "'", str40, "C");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)C" + "'", str60, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)I" + "'", str61, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)F" + "'", str62, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 48 + "'", int66 == 48);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str88, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str93, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        int int85 = type80.getOpcode(96);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier4.newValue(type80);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier4.newValue(type87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lhi!;");
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier4.newValue(type90);
        org.mockito.asm.Type type92 = type90.getElementType();
        java.lang.String str93 = type92.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 96 + "'", int85 == 96);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException: Lhi!" + "'", str93, "g.mockito.asm.tree.analysis.AnalyzerException: Lhi!");
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 24);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type30, list31, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type22, list34, false);
        boolean boolean37 = type0.equals((java.lang.Object) type3);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getDimensions();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str45 = type44.getDescriptor();
        int int46 = type44.getSort();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type44, list47, true);
        java.lang.String str50 = type39.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type39, false);
        java.lang.String str53 = type3.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = type3.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lfloat;" + "'", str45, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "B" + "'", str53, "B");
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        java.lang.String str12 = type6.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException15);
        java.lang.Class<?> wildcardClass17 = analyzerException15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        int int20 = type18.getOpcode(114);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type22, type25, type26, type30, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray37);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray37);
        boolean boolean40 = type6.equals((java.lang.Object) typeArray37);
        int int41 = type6.getSort();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type6, list42, false);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier50.newValue(type51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier50.newValue(type56);
        int int58 = value57.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Object) list42, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/Type;: expected V, but found I", (java.lang.Throwable) analyzerException59);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "F" + "'", str12, "F");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 118 + "'", int20 == 118);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)B" + "'", str38, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.ternaryOperation(abstractInsnNode22, value23, value24, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter21.merge(value32, value38);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier1.merge(value20, value32);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type67, list72, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier1.newValue(type67);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int78 = type76.getOpcode(48);
        java.lang.String str79 = type76.getClassName();
        java.lang.String str80 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier1.newValue(type76);
        java.lang.Class<?> wildcardClass82 = value81.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type84, true);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 48 + "'", int78 == 48);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str83, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type84);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) 179);
        java.lang.String str27 = type18.getDescriptor();
        int int28 = type18.getSort();
        java.lang.String str29 = type18.getDescriptor();
        int int31 = type18.getOpcode(100);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type33, list34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        java.lang.Class<?> wildcardClass39 = type38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier36.newValue(type40);
        java.lang.String str42 = type40.toString();
        int int43 = type40.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "C" + "'", str27, "C");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "C" + "'", str29, "C");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str42, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        int int4 = type0.getOpcode(191);
        int int5 = type0.getSort();
        java.lang.Class<?> wildcardClass6 = type0.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int10 = type9.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        java.lang.String str47 = type32.getInternalName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type49, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        java.lang.String str55 = type52.getClassName();
        int int56 = type52.getSize();
        java.lang.String str57 = type52.toString();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type52, list58, false);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier12.newValue(type52);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type62 = type52.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 191 + "'", int4 == 191);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str47, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "char" + "'", str55, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "C" + "'", str57, "C");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        boolean boolean22 = type13.equals((java.lang.Object) '4');
        int int23 = type13.getSort();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int26 = type24.getOpcode(48);
        java.lang.String str27 = type24.getClassName();
        java.lang.String str28 = type24.getClassName();
        java.lang.String str29 = type24.getClassName();
        int int30 = type24.getSize();
        java.lang.String str31 = type24.getClassName();
        int int32 = type24.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type24, list33, true);
        java.lang.String str36 = type24.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type37 = type24.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 48 + "'", int26 == 48);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "boolean" + "'", str28, "boolean");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        java.lang.String str26 = type3.toString();
        java.lang.String str27 = type3.toString();
        int int28 = type3.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type29, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type29, list34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        java.lang.String str42 = type39.getClassName();
        int int43 = type39.getSize();
        java.lang.String str44 = type39.getDescriptor();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list45, true);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int50 = type48.getOpcode(48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        int int81 = type76.getSize();
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type76, list82, true);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int86 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier84.newValue(type85);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier47.newValue(type85);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier36.newValue(type85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier36.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "B" + "'", str27, "B");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier14.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type65, list70, true);
        int int74 = type65.getOpcode(100);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray76);
        java.lang.Class<?> wildcardClass78 = type65.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        java.lang.String str80 = type79.getDescriptor();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier14.newValue(type79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type83, list84, false);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str88 = type87.getClassName();
        int int90 = type87.getOpcode(46);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier86.newValue(type87);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 102 + "'", int74 == 102);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str80, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "long" + "'", str88, "long");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 47 + "'", int90 == 47);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        int int18 = type16.getOpcode(101);
        java.lang.String str19 = type16.toString();
        int int20 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type16);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type22 = type16.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 101 + "'", int18 == 101);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(value21);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newValue(type41);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type41, list46, true);
        int int50 = type41.getOpcode(100);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier14.newValue(type41);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, list52, true);
        java.lang.Class<?> wildcardClass55 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier31.merge(value50, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier30.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.copyOperation(abstractInsnNode7, value82);
        java.lang.Class<?> wildcardClass92 = value82.getClass();
        java.lang.String str93 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass92);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass92);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.Class<?> wildcardClass97 = type96.getClass();
        org.mockito.asm.Type type98 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass97);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str93, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str95, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertNotNull(type98);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int6 = type4.getOpcode(8);
        int int8 = type4.getOpcode(163);
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type25, false);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier27.newValue(type29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str38 = type37.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter33.newValue(type37);
        org.mockito.asm.Type[] typeArray41 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray41);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier27.newValue(type32);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier11.copyOperation(abstractInsnNode12, value44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 167 + "'", int8 == 167);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str23, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str24, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "I" + "'", str38, "I");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)I" + "'", str42, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;" + "'", str43, "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.junit.Assert.assertNotNull(value44);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lboolean;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str22 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter2.newValue(type21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray54);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter2.newValue(type30);
        boolean boolean59 = type1.equals((java.lang.Object) type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException62);
        java.lang.Class<?> wildcardClass64 = analyzerException62.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        boolean boolean69 = type67.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str70 = type67.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type67, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = simpleVerifier72.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "C" + "'", str22, "C");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "char" + "'", str37, "char");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)C" + "'", str56, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)C" + "'", str57, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str66, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type22, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.ternaryOperation(abstractInsnNode48, value49, value50, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.merge(value58, value64);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier27.merge(value46, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.ternaryOperation(abstractInsnNode68, value69, value70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter67.merge(value78, value84);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier26.merge(value66, value78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier26.newValue(type87);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type87, list89, true);
        java.lang.String str92 = type87.toString();
        java.lang.String str93 = type87.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lboolean;" + "'", str2, "Lboolean;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lboolean;" + "'", str3, "Lboolean;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "F" + "'", str92, "F");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "F" + "'", str93, "F");
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str38 = type37.getInternalName();
        java.lang.String str39 = type37.toString();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier32.newValue(type37);
        int int42 = type37.getOpcode(125);
        int int43 = type37.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LB;" + "'", str38, "LB;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LLB;;" + "'", str39, "LLB;;");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 129 + "'", int42 == 129);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        boolean boolean84 = type81.equals((java.lang.Object) "I");
        int int86 = type81.getOpcode(8);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list87, false);
        java.lang.String str90 = type81.getDescriptor();
        org.mockito.asm.Type[] typeArray92 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type94 = type81.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "C" + "'", str90, "C");
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)C" + "'", str93, "(CBFCF)C");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        java.lang.String str9 = type6.getClassName();
        int int11 = type6.getOpcode(138);
        int int12 = type6.getSize();
        boolean boolean14 = type6.equals((java.lang.Object) 154);
        java.lang.String str15 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str18 = type6.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type21, true);
        java.lang.String str26 = type21.getClassName();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type21, list27, true);
        java.lang.Object obj31 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.ternaryOperation(abstractInsnNode58, value59, value60, value61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter57.merge(value68, value74);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier37.merge(value56, value68);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter32.copyOperation(abstractInsnNode36, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj31, value77);
        java.lang.Class<?> wildcardClass79 = value77.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier29.newValue(type81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.SHORT_TYPE;
        int int84 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier29.newValue(type83);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier29.newValue(type87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("short", (java.lang.Object) str18, value88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.tree.analysis.AnalyzerException: LLB", (java.lang.Throwable) analyzerException89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        analyzerException90.addSuppressed((java.lang.Throwable) analyzerException92);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException90);
        java.lang.String str95 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 138 + "'", int11 == 138);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "char" + "'", str18, "char");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "void" + "'", str26, "void");
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str80, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str95, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException79);
        java.lang.Class<?> wildcardClass81 = analyzerException79.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type84, true);
        boolean boolean87 = type53.equals((java.lang.Object) type84);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier22.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "char" + "'", str57, "char");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)C" + "'", str76, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int4 = type2.getOpcode(48);
        java.lang.String str5 = type2.getClassName();
        int int6 = type2.getSize();
        java.lang.String str7 = type2.getDescriptor();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str19 = type18.getClassName();
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type18, list20, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type24 = null;
        java.util.List list25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type24, list25, false);
        int int28 = type23.getSize();
        int int29 = type23.getSort();
        int int30 = type23.getSort();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type23, list31, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type35, false);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type16, list40, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        int int45 = type44.getSort();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier42.newValue(type44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type48 = null;
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type48, list49, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException77);
        java.lang.Class<?> wildcardClass79 = analyzerException77.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type82, true);
        boolean boolean86 = type82.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier51.newValue(type82);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) 151);
        java.lang.String str91 = type88.getClassName();
        int int93 = type88.getOpcode(138);
        java.lang.String str94 = type88.toString();
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier51.newValue(type88);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier97 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type88, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier97.newOperation(abstractInsnNode98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "byte" + "'", str19, "byte");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "CBFCF)LB" + "'", str36, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "char" + "'", str55, "char");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)C" + "'", str74, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "char" + "'", str91, "char");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 138 + "'", int93 == 138);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "C" + "'", str94, "C");
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        int int58 = type57.getSize();
        int int59 = type57.getSize();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier46.newValue(type48);
        int int51 = type48.getOpcode(136);
        int int52 = type48.getSize();
        java.lang.String str53 = type48.getInternalName();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type48, list54, false);
        java.lang.String str57 = type9.getDescriptor();
        java.lang.String str58 = type9.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 140 + "'", int51 == 140);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str53, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "B" + "'", str57, "B");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "byte" + "'", str58, "byte");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, list36, true);
        java.lang.String str39 = type32.toString();
        java.lang.String str40 = type32.toString();
        java.lang.String str41 = type32.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Z" + "'", str40, "Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Z" + "'", str41, "Z");
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter13.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        java.lang.String str28 = type23.getClassName();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list29, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException42);
        boolean boolean44 = type32.equals((java.lang.Object) analyzerException43);
        java.lang.String str45 = type32.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier31.newValue(type32);
        int int47 = value46.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter13.copyOperation(abstractInsnNode20, value46);
        int int49 = value46.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.copyOperation(abstractInsnNode12, value46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "void" + "'", str28, "void");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "F" + "'", str45, "F");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        int int2 = type1.getDimensions();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value13 = simpleVerifier9.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, true);
        java.lang.String str21 = type16.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list22, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type16, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException52);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException52);
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException43);
        boolean boolean56 = type16.equals((java.lang.Object) analyzerException39);
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type16, list57, false);
        java.lang.String str60 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "void" + "'", str21, "void");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter7.newValue(type11);
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type29, type32, type33, type37, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type46, false);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str27, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type18, value52);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter0.newValue(type18);
        int int57 = type18.getOpcode(167);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "I" + "'", str12, "I");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(CBFCF)I" + "'", str16, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)B" + "'", str45, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 171 + "'", int57 == 171);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)I: expected F, but found .", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        java.lang.Throwable[] throwableArray57 = analyzerException56.getSuppressed();
        boolean boolean58 = type7.equals((java.lang.Object) analyzerException56);
        boolean boolean59 = type6.equals((java.lang.Object) analyzerException56);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException56);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lshort;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        org.mockito.asm.Type type15 = type11.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str22 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier16.newValue(type21);
        boolean boolean25 = type15.equals((java.lang.Object) type21);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type27 = null;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, false);
        int int31 = type26.getSize();
        boolean boolean32 = type21.equals((java.lang.Object) int31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        int int40 = type38.getOpcode(114);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray57);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type38, list60, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier64.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier64.newOperation(abstractInsnNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "I" + "'", str22, "I");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 118 + "'", int40 == 118);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str59, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str53 = type52.getClassName();
        int int54 = type52.getDimensions();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str51, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        int int42 = type28.getOpcode(97);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        int int78 = type69.getOpcode(100);
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray80);
        java.lang.Class<?> wildcardClass82 = type69.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        boolean boolean84 = type28.equals((java.lang.Object) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type28, true);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        int int89 = type87.getOpcode(101);
        java.lang.String str90 = type87.toString();
        int int91 = type87.getSize();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.FLOAT_TYPE;
        int int93 = type92.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type87, type92, false);
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier86.newValue(type87);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier86.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 102 + "'", int78 == 102);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)F" + "'", str81, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 101 + "'", int89 == 101);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "C" + "'", str90, "C");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        java.lang.String str25 = type2.getClassName();
        int int26 = type2.getSort();
        int int28 = type2.getOpcode(148);
        java.lang.String str29 = type2.getClassName();
        java.lang.String str30 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, false);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.String str38 = type34.getClassName();
        java.lang.String str39 = type34.getDescriptor();
        java.lang.String str40 = type34.toString();
        java.lang.Object obj41 = null;
        boolean boolean42 = type34.equals(obj41);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier32.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier32.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "byte" + "'", str25, "byte");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 148 + "'", int28 == 148);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "byte" + "'", str29, "byte");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B" + "'", str30, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Z" + "'", str39, "Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Z" + "'", str40, "Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.ternaryOperation(abstractInsnNode19, value20, value21, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter18.merge(value29, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode15, value36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter8.copyOperation(abstractInsnNode12, value36);
        int int39 = value38.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = simpleVerifier6.copyOperation(abstractInsnNode7, value38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, list36, true);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        int int42 = type41.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter43.newValue(type47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray51);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier38.newValue(type40);
        java.lang.String str56 = type40.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I" + "'", str48, "I");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)I" + "'", str52, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)S" + "'", str53, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str54, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str56, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("L)Lfloat;");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("hi!");
        int int5 = type4.getSize();
        int int6 = type4.getSize();
        java.lang.String str7 = type4.toString();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 24);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type38, list39, true);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type30, list42, false);
        boolean boolean45 = type8.equals((java.lang.Object) type11);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type11, list46, true);
        java.lang.Class<?> wildcardClass49 = type11.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = type50.getElementType();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type51, list52, true);
        org.mockito.asm.Type type55 = type51.getElementType();
        int int56 = type51.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L)Lfloat;" + "'", str2, "L)Lfloat;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lhi!;" + "'", str7, "Lhi!;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier14.newValue(type36);
        java.lang.Class<?> wildcardClass38 = value37.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass38);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str39, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        int int83 = type82.getSize();
        int int84 = type82.getSort();
        java.lang.String str85 = type82.getDescriptor();
        org.mockito.asm.Type type86 = type82.getElementType();
        int int88 = type82.getOpcode(50);
        java.lang.Class<?> wildcardClass89 = type82.getClass();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str85, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54 + "'", int88 == 54);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter7.copyOperation(abstractInsnNode11, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.ternaryOperation(abstractInsnNode73, value74, value75, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter72.merge(value83, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.ternaryOperation(abstractInsnNode6, value51, value71, value90);
        java.lang.Class<?> wildcardClass92 = value51.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass92);
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass92);
        java.lang.String str96 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass92);
        org.mockito.asm.Type type97 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        int int98 = type97.getSort();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str94, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str95, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str96, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass11 = analyzerException6.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = type12.getInternalName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("Lhi!;");
        java.lang.String str16 = type15.toString();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type15, list17, false);
        int int20 = type12.getSize();
        int int22 = type12.getOpcode(104);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LLhi!;;" + "'", str16, "LLhi!;;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 108 + "'", int22 == 108);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier59.newValue(type60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier59.newValue(type62);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int68 = type67.getSize();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        int int71 = type69.getOpcode(101);
        java.lang.String str72 = type69.toString();
        int int73 = type69.getSort();
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type69, list74, false);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier59.newValue(type67);
        int int78 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier36.newValue(type67);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 101 + "'", int71 == 101);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "C" + "'", str72, "C");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        java.lang.Class<?> wildcardClass25 = simpleVerifier24.getClass();
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass25);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str26, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str27, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str80 = type79.getDescriptor();
        int int81 = type79.getSort();
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type79, list82, false);
        int int85 = type79.getSize();
        int int86 = type79.getSort();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type87, false);
        int int90 = type79.getSort();
        int int91 = type79.getSize();
        java.util.List list92 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type79, list92, true);
        java.lang.String str95 = type76.getInternalName();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lfloat;" + "'", str80, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org/mockito/asm/Type" + "'", str95, "org/mockito/asm/Type");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;");
        java.lang.Object obj28 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier34.merge(value53, value65);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter29.copyOperation(abstractInsnNode33, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj28, value74);
        java.lang.Class<?> wildcardClass76 = value74.getClass();
        java.lang.String str77 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type79, list80, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        org.mockito.asm.tree.analysis.Value value84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier82.copyOperation(abstractInsnNode83, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str77, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str78, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type79);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        boolean boolean15 = type10.equals((java.lang.Object) 177);
        int int16 = type10.getSize();
        java.lang.String str17 = type10.toString();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException21);
        java.lang.Class<?> wildcardClass23 = analyzerException21.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = type24.toString();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter4.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier3.newValue(type24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, true);
        java.lang.String str45 = type40.getClassName();
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list46, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type40, true);
        java.lang.Class<?> wildcardClass51 = type34.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        int int53 = type52.getSort();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type54, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        int int61 = type59.getOpcode(101);
        java.lang.String str62 = type59.toString();
        int int63 = type59.getSize();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type65, type68, type69, type73, type76 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray80);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray80);
        java.lang.String str84 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type58, true);
        int int88 = type24.getSort();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "F" + "'", str17, "F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str25, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "void" + "'", str45, "void");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 101 + "'", int61 == 101);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "C" + "'", str62, "C");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)B" + "'", str81, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)C" + "'", str82, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)I" + "'", str83, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "int" + "'", str84, "int");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        java.lang.String str8 = type0.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        int int10 = type9.getSize();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list11, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int16 = type14.getOpcode(48);
        java.lang.String str17 = type14.getClassName();
        int int19 = type14.getOpcode(116);
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type14, list20, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type25 = type24.getElementType();
        java.lang.String str26 = type24.getInternalName();
        java.lang.String str27 = type24.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str39 = type38.getInternalName();
        int int40 = type38.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type38, false);
        org.mockito.asm.Type type43 = type24.getElementType();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier22.newValue(type24);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getReturnType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier22.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newOperation(abstractInsnNode48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 116 + "'", int19 == 116);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str26, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str27, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str36, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int7 = type5.getOpcode(8);
        java.lang.String str8 = type5.getDescriptor();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list9, true);
        java.lang.String str12 = type1.getClassName();
        java.lang.String str13 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str8, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str12, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str13, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, false);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        boolean boolean30 = type25.equals((java.lang.Object) 177);
        java.lang.String str31 = type25.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass36 = analyzerException34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        int int39 = type37.getOpcode(114);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray56);
        boolean boolean59 = type25.equals((java.lang.Object) typeArray56);
        int int60 = type25.getSort();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type25, list61, false);
        boolean boolean65 = type25.equals((java.lang.Object) 175);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier20.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier20.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "char" + "'", str24, "char");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "F" + "'", str31, "F");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 118 + "'", int39 == 118);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str58, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        int int4 = type0.getOpcode(191);
        int int5 = type0.getSort();
        java.lang.Class<?> wildcardClass6 = type0.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("L(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;;");
        java.lang.String str12 = type11.toString();
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type11, list13, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value17 = simpleVerifier15.newOperation(abstractInsnNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 191 + "'", int4 == 191);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/Type" + "'", str8, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str12, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int3 = type1.getOpcode(113);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type14, list15, true);
        java.lang.String str18 = type14.getClassName();
        java.lang.String str19 = type14.getDescriptor();
        int int20 = type14.getSort();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type22, list23, false);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str30 = type29.getDescriptor();
        int int31 = type29.getSort();
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list32, false);
        int int35 = type29.getSize();
        int int36 = type29.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int42 = type40.getOpcode(48);
        java.lang.String str43 = type40.getClassName();
        java.lang.String str44 = type40.getClassName();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type40, list45, true);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("V");
        int int52 = type51.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str54 = type53.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        java.lang.Class<?> wildcardClass61 = analyzerException59.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type64, list65, true);
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type56, list68, false);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        boolean boolean73 = type51.equals((java.lang.Object) value72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier12.copyOperation(abstractInsnNode49, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 113 + "'", int3 == 113);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Z" + "'", str19, "Z");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lfloat;" + "'", str30, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 48 + "'", int42 == 48);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "J" + "'", str54, "J");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str63, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        int int52 = type50.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type53 = type50.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        int int4 = type3.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type8, true);
        java.lang.String str13 = type8.getClassName();
        int int14 = type8.getSize();
        boolean boolean15 = type3.equals((java.lang.Object) int14);
        java.lang.Object obj19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.ternaryOperation(abstractInsnNode46, value47, value48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter45.merge(value56, value62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier25.merge(value44, value56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter20.copyOperation(abstractInsnNode24, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj19, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) type3, value65);
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException72.addSuppressed((java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException83);
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException74);
        analyzerException68.addSuppressed((java.lang.Throwable) analyzerException86);
        java.lang.Throwable[] throwableArray88 = analyzerException68.getSuppressed();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "void" + "'", str13, "void");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier37.newValue(type40);
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type40, list45, true);
        int int49 = type40.getOpcode(100);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray51);
        int int53 = type40.getSort();
        org.mockito.asm.Type[] typeArray55 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray55);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int60 = type59.getSort();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType("I");
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type62, list63, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type62, true);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str70 = type69.getDescriptor();
        java.lang.String str71 = type69.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type69, true);
        java.lang.String str74 = type69.toString();
        java.lang.String str75 = type69.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str82 = type81.getDescriptor();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier76.newValue(type81);
        java.lang.String str85 = type81.getDescriptor();
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type81, list86, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier88.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 102 + "'", int49 == 102);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)F" + "'", str52, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)F" + "'", str56, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str57, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "LB;" + "'", str70, "LB;");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "B" + "'", str71, "B");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "LB;" + "'", str74, "LB;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "B" + "'", str75, "B");
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "I" + "'", str82, "I");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "I" + "'", str85, "I");
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("(CBFCF)LB;");
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list14, true);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier7.newValue(type13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException33.addSuppressed((java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException37);
        boolean boolean39 = type27.equals((java.lang.Object) analyzerException38);
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException38);
        java.lang.Throwable[] throwableArray41 = analyzerException26.getSuppressed();
        java.lang.Class<?> wildcardClass42 = analyzerException26.getClass();
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type45 = type44.getElementType();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        java.lang.String str49 = type46.getClassName();
        int int50 = type46.getSize();
        int int52 = type46.getOpcode(148);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray69);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier7.newValue(type45);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str75 = type74.getClassName();
        int int76 = type74.getSort();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier7.newValue(type74);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "char" + "'", str49, "char");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 148 + "'", int52 == 148);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str72, "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "void" + "'", str75, "void");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(value77);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        boolean boolean35 = type30.equals((java.lang.Object) 177);
        java.lang.String str36 = type30.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        int int44 = type42.getOpcode(114);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray61);
        boolean boolean64 = type30.equals((java.lang.Object) typeArray61);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray61);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray61);
        org.mockito.asm.Type[] typeArray68 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray68);
        java.lang.String str70 = type23.getClassName();
        java.lang.String str71 = type23.getDescriptor();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int75 = type73.getOpcode(167);
        org.mockito.asm.Type type76 = type73.getElementType();
        int int77 = type73.getSort();
        java.lang.String str78 = type73.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException81);
        java.lang.Class<?> wildcardClass83 = analyzerException81.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type85 = type84.getElementType();
        java.lang.String str86 = type85.getClassName();
        java.lang.String str87 = type85.toString();
        java.lang.String str88 = type85.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type85, false);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean93 = type91.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass94 = type91.getClass();
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass94);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass94);
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier90.newValue(type96);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier99 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type96, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 118 + "'", int44 == 118);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str63, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)C" + "'", str65, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)I" + "'", str66, "(CBFCF)I");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)I" + "'", str69, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "int" + "'", str70, "int");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "I" + "'", str71, "I");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 171 + "'", int75 == 171);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str78, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str86, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str87, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str95, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) (byte) 100);
        java.lang.String str6 = type3.getClassName();
        boolean boolean8 = type3.equals((java.lang.Object) 177);
        java.lang.String str9 = type3.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass14 = analyzerException12.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        int int17 = type15.getOpcode(114);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray34);
        boolean boolean37 = type3.equals((java.lang.Object) typeArray34);
        java.lang.Class<?> wildcardClass38 = type3.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str42 = type41.getClassName();
        int int43 = type41.getSize();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, list44, false);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        int int50 = type48.getOpcode(101);
        java.lang.String str51 = type48.toString();
        int int52 = type48.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray69);
        java.lang.String str73 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier46.newValue(type47);
        boolean boolean75 = type1.equals((java.lang.Object) value74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type78, true);
        java.lang.String str83 = type78.getClassName();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type78, list84, true);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type78, list87, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier89.newOperation(abstractInsnNode90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 118 + "'", int17 == 118);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str42, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 101 + "'", int50 == 101);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "C" + "'", str51, "C");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)I" + "'", str72, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "I" + "'", str73, "I");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "void" + "'", str83, "void");
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        java.lang.String str34 = type31.toString();
        int int35 = type31.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray52);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray52);
        java.lang.Class<?> wildcardClass56 = type30.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        boolean boolean60 = type24.equals((java.lang.Object) type59);
        java.lang.Class<?> wildcardClass61 = type24.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)C" + "'", str54, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)I" + "'", str55, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str58, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("short");
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier30.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str55 = type54.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        java.lang.String str69 = type66.getClassName();
        int int71 = type66.getOpcode(138);
        int int72 = type66.getSize();
        boolean boolean74 = type66.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier61.newValue(type66);
        int int77 = type66.getOpcode(0);
        int int79 = type66.getOpcode(0);
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray81);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray81);
        int int84 = type54.getSort();
        java.lang.String str85 = type54.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type54, true);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier87.newValue(type88);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier87.newOperation(abstractInsnNode90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str55, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "char" + "'", str69, "char");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 138 + "'", int71 == 138);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)C" + "'", str82, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str83, "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str85, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int8 = type7.getSort();
        int int10 = type7.getOpcode(105);
        java.lang.Class<?> wildcardClass11 = type7.getClass();
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 109 + "'", int10 == 109);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        int int5 = type4.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        boolean boolean16 = type4.equals((java.lang.Object) type15);
        java.lang.Class<?> wildcardClass17 = type15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type18, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier20.naryOperation(abstractInsnNode21, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str12, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        java.lang.String str36 = type32.getDescriptor();
        org.mockito.asm.Type type37 = type32.getElementType();
        java.lang.String str38 = type32.getInternalName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        java.lang.String str45 = type39.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        java.lang.Class<?> wildcardClass50 = analyzerException48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        int int53 = type51.getOpcode(114);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type55, type58, type59, type63, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray70);
        boolean boolean73 = type39.equals((java.lang.Object) typeArray70);
        int int74 = type39.getSort();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type76, true);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type80, true);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type39, list83, true);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        java.lang.String str88 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier85.newValue(type87);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;;");
        java.lang.String str92 = type91.toString();
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier85.newValue(type91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier85.newOperation(abstractInsnNode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str38, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "F" + "'", str45, "F");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 118 + "'", int53 == 118);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)B" + "'", str71, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str72, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "byte" + "'", str77, "byte");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;" + "'", str88, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "LL(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;;;" + "'", str92, "LL(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;;;");
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getSort();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list15, false);
        int int18 = type12.getSize();
        int int19 = type12.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type20, false);
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier9.newValue(type20);
        java.lang.String str24 = type20.getClassName();
        java.lang.String str25 = type20.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lfloat;" + "'", str13, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "void" + "'", str24, "void");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "V" + "'", str25, "V");
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier24.newValue(type27);
        java.lang.Object obj30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.ternaryOperation(abstractInsnNode57, value58, value59, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter56.merge(value67, value73);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier36.merge(value55, value67);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter31.copyOperation(abstractInsnNode35, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj30, value76);
        java.lang.Class<?> wildcardClass78 = value76.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier24.newValue(type79);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type79, false);
        org.mockito.asm.Type type83 = type79.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type83);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        java.lang.String str8 = type2.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type9 = type2.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int30 = type29.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        java.lang.String str34 = type31.toString();
        int int35 = type31.getSort();
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type31, list36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str42 = type41.getDescriptor();
        int int43 = type41.getSort();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, list44, false);
        int int47 = type41.getSize();
        int int48 = type41.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type49, false);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier38.newValue(type49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException78);
        java.lang.Class<?> wildcardClass80 = analyzerException78.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.String str82 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass80);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type83, list84, true);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type75, list87, false);
        boolean boolean90 = type53.equals((java.lang.Object) type56);
        java.lang.String str91 = type56.toString();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier38.newValue(type56);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean95 = type93.equals((java.lang.Object) (byte) 100);
        int int97 = type93.getOpcode(18);
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier38.newValue(type93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.unaryOperation(abstractInsnNode28, value98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "B" + "'", str91, "B");
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 20 + "'", int97 == 20);
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException56);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException57);
        java.lang.Throwable[] throwableArray59 = analyzerException5.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.Type", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException73);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException85.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException89);
        boolean boolean91 = type79.equals((java.lang.Object) analyzerException90);
        analyzerException78.addSuppressed((java.lang.Throwable) analyzerException90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException78);
        analyzerException68.addSuppressed((java.lang.Throwable) analyzerException93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Throwable) analyzerException93);
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float", (java.lang.Throwable) analyzerException60);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException10);
        java.lang.Throwable[] throwableArray24 = analyzerException23.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException31.addSuppressed((java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException47.addSuppressed((java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException51);
        analyzerException42.addSuppressed((java.lang.Throwable) analyzerException51);
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException42);
        java.lang.Throwable[] throwableArray55 = analyzerException38.getSuppressed();
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.ternaryOperation(abstractInsnNode78, value79, value80, value81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter89 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        org.mockito.asm.tree.analysis.Value value91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter89.copyOperation(abstractInsnNode90, value91);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter89.newValue(type93);
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter77.merge(value88, value94);
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier57.merge(value76, value88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) analyzerException25, value76);
        int int98 = value76.getSize();
        java.lang.Class<?> wildcardClass99 = value76.getClass();
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNull(value92);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier7.newValue(type82);
        java.lang.Class<?> wildcardClass84 = simpleVerifier7.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] {};
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray87);
        org.mockito.asm.Type type89 = type86.getElementType();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type89);
        int int91 = type89.getDimensions();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str85, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str88, "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean7 = type0.equals((java.lang.Object) type6);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("CBFCF)LB");
        boolean boolean10 = type6.equals((java.lang.Object) typeArray9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, list13, true);
        java.lang.Class<?> wildcardClass16 = simpleVerifier15.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str18 = type17.getInternalName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = type19.toString();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type19, list38, true);
        org.mockito.asm.Type type41 = type17.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type17, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier43.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str18, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "B" + "'", str37, "B");
        org.junit.Assert.assertNotNull(type41);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        boolean boolean58 = type0.equals((java.lang.Object) value57);
        int int59 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, false);
        int int6 = type3.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        int int37 = type1.getOpcode(88);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list43, false);
        int int46 = type40.getSize();
        int int47 = type40.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.lang.String str56 = type51.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type75, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type57, true);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str83 = type82.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.newValue(type82);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier50.newValue(type82);
        org.mockito.asm.Type[] typeArray87 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type82, typeArray87);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type82, list89, false);
        java.lang.String str92 = type1.getInternalName();
        java.lang.String str93 = type1.getDescriptor();
        org.mockito.asm.Type[] typeArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 92 + "'", int37 == 92);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "long" + "'", str83, "long");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)J" + "'", str88, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "float" + "'", str92, "float");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lfloat;" + "'", str93, "Lfloat;");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        java.lang.String str5 = type0.getDescriptor();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        boolean boolean26 = type18.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier13.newValue(type18);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type18, list28, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType("()L(CBFCF)I;");
        boolean boolean35 = type0.equals((java.lang.Object) type34);
        java.lang.String str36 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Z" + "'", str36, "Z");
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Class<?> wildcardClass12 = analyzerException10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = type13.getElementType();
        java.lang.String str15 = type14.getClassName();
        java.lang.String str16 = type14.getDescriptor();
        org.mockito.asm.Type type17 = type14.getElementType();
        int int18 = type17.getDimensions();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        int int42 = type37.getSort();
        java.lang.String str43 = type37.getDescriptor();
        boolean boolean45 = type37.equals((java.lang.Object) 179);
        int int46 = type37.getSize();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        int int50 = type48.getOpcode(101);
        java.lang.String str51 = type48.toString();
        int int52 = type48.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray69);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier7.newValue(type17);
        java.lang.String str76 = type17.getDescriptor();
        java.lang.String str77 = type17.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "C" + "'", str43, "C");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 101 + "'", int50 == 101);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "C" + "'", str51, "C");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)I" + "'", str72, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)C" + "'", str73, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "mockito/asm/tree/analysis/AnalyzerException" + "'", str77, "mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        int int82 = type80.getOpcode(101);
        java.lang.String str83 = type80.toString();
        java.lang.String str84 = type80.toString();
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type80, list85, true);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 101 + "'", int82 == 101);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "C" + "'", str83, "C");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "C" + "'", str84, "C");
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicVerifier");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        int int6 = type3.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type8, list11, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier13.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier13.newValue(type36);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, list38, true);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier40.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        java.lang.Object obj45 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter46.copyOperation(abstractInsnNode50, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj45, value91);
        int int93 = value91.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier40.unaryOperation(abstractInsnNode43, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        java.lang.String str9 = type6.getClassName();
        int int11 = type6.getOpcode(138);
        int int12 = type6.getSize();
        boolean boolean14 = type6.equals((java.lang.Object) 154);
        java.lang.String str15 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier0.newValue(type6);
        java.lang.Class<?> wildcardClass19 = type6.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 138 + "'", int11 == 138);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        int int30 = type26.getOpcode(191);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, false);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.Class<?> wildcardClass38 = simpleVerifier37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        java.lang.String str40 = type39.getInternalName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = type41.toString();
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, list60, true);
        int int63 = type39.getSize();
        java.lang.String str64 = type39.toString();
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier32.newValue(type39);
        java.lang.String str66 = type39.toString();
        java.lang.String str67 = type39.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 191 + "'", int30 == 191);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str40, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "B" + "'", str59, "B");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str64, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str66, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str67, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass5 = type2.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type15, list18, false);
        int int21 = type15.getSize();
        int int22 = type15.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type23, false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        boolean boolean31 = type26.equals((java.lang.Object) 177);
        java.lang.String str32 = type26.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        int int40 = type38.getOpcode(114);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray57);
        boolean boolean60 = type26.equals((java.lang.Object) typeArray57);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier25.newValue(type26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier11.copyOperation(abstractInsnNode12, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/Type" + "'", str6, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 118 + "'", int40 == 118);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str59, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("C");
        java.lang.String str2 = type1.getDescriptor();
        int int4 = type1.getOpcode(191);
        int int5 = type1.getSize();
        java.lang.String str6 = type1.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        java.lang.Class<?> wildcardClass82 = type73.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str85 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        boolean boolean86 = type1.equals((java.lang.Object) str85);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "C" + "'", str2, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 191 + "'", int4 == 191);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C" + "'", str6, "C");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str85, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str12 = type11.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.tree.analysis.SimpleVerifier" + "'", str12, "org.mockito.asm.tree.analysis.SimpleVerifier");
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier24.newValue(type27);
        java.lang.Object obj30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.ternaryOperation(abstractInsnNode57, value58, value59, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter56.merge(value67, value73);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier36.merge(value55, value67);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter31.copyOperation(abstractInsnNode35, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj30, value76);
        java.lang.Class<?> wildcardClass78 = value76.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier24.newValue(type79);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type79, list81, true);
        java.lang.String str84 = type79.getClassName();
        org.mockito.asm.Type type85 = type79.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str84, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type85);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Class<?> wildcardClass51 = value49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        int int58 = type55.getSize();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type55, list59, true);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list62, false);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType("L(CBFCF)C;");
        java.lang.String str67 = type66.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type66, false);
        java.lang.String str70 = type52.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L(CBFCF)C;" + "'", str67, "L(CBFCF)C;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str70, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        java.lang.String str12 = type7.getClassName();
        int int13 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type7);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("C");
        java.lang.String str17 = type16.getDescriptor();
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier5.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        java.util.List list20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value21 = simpleVerifier5.naryOperation(abstractInsnNode19, list20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LC;" + "'", str17, "LC;");
        org.junit.Assert.assertNotNull(value18);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        java.lang.String str8 = type2.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int16 = type14.getOpcode(114);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray33);
        boolean boolean36 = type2.equals((java.lang.Object) typeArray33);
        int int37 = type2.getSort();
        int int39 = type2.getOpcode(114);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type41, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        java.lang.String str57 = type52.getClassName();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list58, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type52, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type52, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type65, list66, false);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type65, list69, false);
        java.lang.Class<?> wildcardClass72 = simpleVerifier71.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 118 + "'", int16 == 118);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 116 + "'", int39 == 116);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "void" + "'", str57, "void");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str3 = type2.toString();
        java.lang.String str4 = type2.getDescriptor();
        org.mockito.asm.Type type5 = type2.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value9 = simpleVerifier7.newOperation(abstractInsnNode8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str3, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str4, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int34 = type26.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("g.mockito.asm.tree.analysis.AnalyzerException");
        int int37 = type36.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type36, false);
        java.lang.Class<?> wildcardClass40 = type36.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str41, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type80, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier78.newValue(type79);
        int int85 = type79.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSort();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        boolean boolean10 = type5.equals((java.lang.Object) 177);
        java.lang.String str11 = type5.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        java.lang.Class<?> wildcardClass16 = analyzerException14.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        int int19 = type17.getOpcode(114);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray36);
        boolean boolean39 = type5.equals((java.lang.Object) typeArray36);
        int int40 = type5.getSort();
        int int42 = type5.getOpcode(114);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier48.newValue(type49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list61, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type55, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type55, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type68, list69, false);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type68, list72, false);
        int int75 = type1.getSize();
        java.lang.String str76 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str4, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "F" + "'", str11, "F");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 118 + "'", int19 == 118);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 116 + "'", int42 == 116);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str76, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str31 = type30.getDescriptor();
        int int32 = type30.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type30, list33, false);
        int int36 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type30);
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type38, list39, false);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        int int45 = type43.getOpcode(15);
        org.mockito.asm.Type type46 = type43.getElementType();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier41.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter49.newValue(type53);
        org.mockito.asm.Type[] typeArray57 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray57.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type88, false);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier92.newValue(type93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str69, value94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type60, value94);
        java.lang.String str97 = type60.getDescriptor();
        java.lang.String str98 = type60.getDescriptor();
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier41.newValue(type60);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lfloat;" + "'", str31, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "I" + "'", str54, "I");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)I" + "'", str58, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str97, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str98, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        int int40 = type26.getOpcode(97);
        int int42 = type26.getOpcode(79);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        java.lang.String str46 = type43.getClassName();
        java.lang.String str47 = type43.getClassName();
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type49, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str79 = type78.getDescriptor();
        int int80 = type78.getSort();
        int int81 = type78.getDimensions();
        int int83 = type78.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier73.newValue(type78);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type78, list85, true);
        java.lang.Class<?> wildcardClass88 = simpleVerifier87.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 81 + "'", int42 == 81);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "long" + "'", str75, "long");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lfloat;" + "'", str79, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str89, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str90, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type58 = type57.getElementType();
        int int60 = type58.getOpcode(0);
        int int61 = type58.getSort();
        java.lang.String str62 = type58.getClassName();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "g.mockito.asm.tree.analysis.BasicValue" + "'", str62, "g.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        int int35 = type19.getDimensions();
        java.lang.String str36 = type19.getInternalName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type37 = type19.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str36, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        java.lang.String str9 = type4.getClassName();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list10, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str15 = type14.getDescriptor();
        java.lang.String str16 = type14.getInternalName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier12.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        java.lang.Class<?> wildcardClass45 = value43.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        java.lang.String str56 = type53.getClassName();
        java.lang.String str57 = type53.getClassName();
        java.lang.String str58 = type53.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type59, true);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter49.newValue(type53);
        java.lang.String str85 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type53);
        java.lang.String str87 = type53.toString();
        java.lang.String str88 = type53.toString();
        int int90 = type53.getOpcode(61);
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type53, list91, true);
        int int95 = type1.getOpcode(50);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LB;" + "'", str15, "LB;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str46, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Z" + "'", str87, "Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Z" + "'", str88, "Z");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 61 + "'", int90 == 61);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 54 + "'", int95 == 54);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier6.newValue(type8);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type76, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type76);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier10.newValue(type85);
        java.lang.String str87 = type85.toString();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier6.newValue(type85);
        java.lang.String str89 = type85.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier5.newValue(type85);
        int int92 = type85.getOpcode(93);
        java.lang.String str93 = type85.getDescriptor();
        int int95 = type85.getOpcode(87);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "C" + "'", str87, "C");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 93 + "'", int92 == 93);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "C" + "'", str93, "C");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 87 + "'", int95 == 87);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        java.lang.String str34 = type26.getDescriptor();
        int int35 = type26.getSort();
        java.lang.Object obj37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.ternaryOperation(abstractInsnNode45, value46, value47, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter44.merge(value55, value61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier43.merge(value62, value74);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter38.copyOperation(abstractInsnNode42, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj37, value83);
        java.lang.Class<?> wildcardClass85 = value83.getClass();
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        java.lang.String str87 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.lang.String str89 = type88.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type88, false);
        java.lang.String str92 = type88.getInternalName();
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type88, type93, true);
        org.mockito.asm.Type type96 = type88.getElementType();
        java.lang.String str97 = type88.toString();
        java.lang.Class<?> wildcardClass98 = type88.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "F" + "'", str34, "F");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str86, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str87, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str89, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str92, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str97, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int4 = type2.getOpcode(113);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        boolean boolean10 = type5.equals((java.lang.Object) 177);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type5, list11, false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str28 = type27.getDescriptor();
        int int29 = type27.getSort();
        int int30 = type27.getDimensions();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str33 = type32.getDescriptor();
        int int34 = type32.getSort();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type32, list35, true);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier25.newValue(type32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier25.newValue(type48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier25.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode59, value80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter52.copyOperation(abstractInsnNode56, value80);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str88 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier25.merge(value80, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Object) type5, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("Lboolean;", (java.lang.Throwable) analyzerException95);
        analyzerException91.addSuppressed((java.lang.Throwable) analyzerException97);
        java.lang.String str99 = analyzerException91.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 113 + "'", int4 == 113);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lfloat;" + "'", str28, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lfloat;" + "'", str33, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str46, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str47, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "I" + "'", str88, "I");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;: expected F, but found ." + "'", str99, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;: expected F, but found .");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        java.lang.String str25 = type0.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lg/mockito/asm/Type;");
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list28, false);
        int int31 = type0.getSort();
        java.lang.String str32 = type0.toString();
        int int33 = type0.getSize();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray56);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray56);
        int int60 = type35.getSort();
        java.lang.String str61 = type35.getClassName();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type35, list62, false);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int67 = type65.getOpcode(48);
        java.lang.String str68 = type65.getClassName();
        java.lang.String str69 = type65.getClassName();
        java.lang.String str70 = type65.toString();
        java.lang.String str71 = type65.toString();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int75 = type73.getOpcode(48);
        java.lang.String str76 = type73.getClassName();
        java.lang.String str77 = type73.getClassName();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str81 = type80.getDescriptor();
        int int82 = type80.getSort();
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type80, list83, false);
        java.lang.String str86 = type80.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type80, false);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.CHAR_TYPE;
        int int91 = type89.getOpcode(101);
        java.lang.String str92 = type89.toString();
        int int93 = type89.getSort();
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier88.newValue(type89);
        org.mockito.asm.tree.analysis.Value value95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier64.merge(value94, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "B" + "'", str25, "B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "B" + "'", str32, "B");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "char" + "'", str39, "char");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)C" + "'", str58, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str59, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str61, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 48 + "'", int67 == 48);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Z" + "'", str70, "Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Z" + "'", str71, "Z");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 48 + "'", int75 == 48);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "boolean" + "'", str76, "boolean");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "boolean" + "'", str77, "boolean");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lfloat;" + "'", str81, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 101 + "'", int91 == 101);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "C" + "'", str92, "C");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException12);
        java.lang.Object obj18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.ternaryOperation(abstractInsnNode45, value46, value47, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter44.merge(value55, value61);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier24.merge(value43, value55);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter19.copyOperation(abstractInsnNode23, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj18, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value64);
        java.lang.Throwable[] throwableArray67 = analyzerException66.getSuppressed();
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter76.ternaryOperation(abstractInsnNode77, value78, value79, value80);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter82 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter82.copyOperation(abstractInsnNode83, value84);
        org.mockito.asm.Type type86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter82.newValue(type86);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter88 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        org.mockito.asm.tree.analysis.Value value90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter88.copyOperation(abstractInsnNode89, value90);
        org.mockito.asm.Type type92 = null;
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter88.newValue(type92);
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter76.merge(value87, value93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode73, value94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException95);
        analyzerException66.addSuppressed((java.lang.Throwable) analyzerException96);
        java.lang.String str98 = analyzerException66.toString();
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: F: expected 1.0, but found ." + "'", str98, "org.mockito.asm.tree.analysis.AnalyzerException: F: expected 1.0, but found .");
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str11 = type10.getDescriptor();
        int int12 = type10.getSort();
        int int13 = type10.getSize();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException19);
        boolean boolean21 = type10.equals((java.lang.Object) analyzerException19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type23, false);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int52 = type50.getOpcode(48);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        int int83 = type78.getSize();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type78, list84, true);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int88 = type87.getSize();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier86.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter26.merge(value89, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LL(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;;", (java.lang.Object) false, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException92);
        java.lang.Throwable[] throwableArray94 = analyzerException92.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lfloat;" + "'", str11, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 48 + "'", int52 == 48);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray76);
        java.lang.Class<?> wildcardClass78 = type66.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/Type" + "'", str79, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/Type" + "'", str80, "org/mockito/asm/Type");
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list56, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type50, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type63, list64, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/AnalyzerException");
        int int70 = type68.getOpcode(8);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier66.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newOperation(abstractInsnNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException74);
        java.lang.Class<?> wildcardClass76 = analyzerException74.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type79, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.newValue(type83);
        int int86 = type83.getOpcode(81);
        org.mockito.asm.Type type87 = type83.getElementType();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type83);
        int int89 = type83.getSize();
        int int90 = type83.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 85 + "'", int86 == 85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter1, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier53.newValue(type56);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter23.copyOperation(abstractInsnNode30, value60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        int int82 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter23.copyOperation(abstractInsnNode62, value74);
        int int84 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter1.copyOperation(abstractInsnNode22, value74);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter1.newValue(type87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter1.newValue(type89);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "I" + "'", str28, "I");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str22, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type13, value47);
        int int50 = type13.getDimensions();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier74.newValue(type77);
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type77, list82, true);
        int int86 = type77.getOpcode(100);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str88 = type87.toString();
        org.mockito.asm.Type[] typeArray90 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type87, typeArray90);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray90);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray90);
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, list94, true);
        int int97 = type13.getSize();
        java.lang.String str98 = type13.getInternalName();
        int int99 = type13.getSort();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 102 + "'", int86 == 102);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "S" + "'", str88, "S");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)S" + "'", str91, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)F" + "'", str92, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)[Lorg/mockito/asm/Type;" + "'", str93, "(CBFCF)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str98, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 9 + "'", int99 == 9);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str4 = type3.getDescriptor();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier28.newValue(type31);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type31, list36, true);
        int int40 = type31.getOpcode(100);
        org.mockito.asm.Type[] typeArray42 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray42);
        int int44 = type31.getSort();
        org.mockito.asm.Type[] typeArray46 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray65);
        int int70 = type1.getOpcode(177);
        org.mockito.asm.Type type71 = type1.getElementType();
        int int72 = type71.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = type71.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lboolean;" + "'", str4, "Lboolean;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 102 + "'", int40 == 102);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)F" + "'", str43, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)F" + "'", str47, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)Lboolean;" + "'", str48, "(CBFCF)Lboolean;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)Lboolean;" + "'", str67, "(CBFCF)Lboolean;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)LCBFCF)Lorg/mockito/asm/Type;" + "'", str68, "(CBFCF)LCBFCF)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 181 + "'", int70 == 181);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        int int14 = type9.getSize();
        java.lang.String str15 = type9.getClassName();
        int int16 = type9.getSize();
        int int17 = type9.getDimensions();
        int int18 = type9.getSize();
        int int19 = type9.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type4, list40, false);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        int int48 = type44.getOpcode(2);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str6 = type5.getDescriptor();
        int int7 = type5.getSort();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type5, list8, false);
        int int11 = type5.getSize();
        int int12 = type5.getSort();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type13, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int18 = type16.getOpcode(48);
        java.lang.String str19 = type16.getClassName();
        java.lang.String str20 = type16.getClassName();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type16, list21, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type30 = type29.getElementType();
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier23.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException40);
        java.lang.Class<?> wildcardClass42 = analyzerException40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.Type type44 = type43.getElementType();
        java.lang.String str45 = type44.getClassName();
        java.lang.String str46 = type44.getDescriptor();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type44, list47, false);
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list50, true);
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lbyte;", (java.lang.Object) type32, value53);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException54);
        java.lang.String str56 = analyzerException54.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lfloat;" + "'", str6, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str45, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str46, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lbyte;: expected F, but found null" + "'", str56, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lbyte;: expected F, but found null");
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        java.lang.String str24 = type1.toString();
        int int25 = type1.getSize();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list26, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier52.newValue(type55);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type55, list60, true);
        int int64 = type55.getOpcode(100);
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray66);
        int int69 = type55.getOpcode(97);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier28.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        java.util.List list72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier28.naryOperation(abstractInsnNode71, list72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 102 + "'", int64 == 102);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)F" + "'", str67, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 99 + "'", int69 == 99);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        boolean boolean36 = type31.equals((java.lang.Object) 177);
        int int37 = type31.getSize();
        java.lang.String str38 = type31.toString();
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter25.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        java.lang.String str46 = type43.toString();
        int int47 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter25.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        boolean boolean61 = type56.equals((java.lang.Object) 177);
        int int62 = type56.getSize();
        java.lang.String str63 = type56.toString();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.newValue(type56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter25.copyOperation(abstractInsnNode49, value64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type84, false);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier88.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier11.merge(value65, value91);
        java.lang.Class<?> wildcardClass93 = simpleVerifier11.getClass();
        java.lang.String str94 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass93);
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass93);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "F" + "'", str63, "F");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str94, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str95, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter6.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier16.merge(value35, value47);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter6.copyOperation(abstractInsnNode15, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter6.copyOperation(abstractInsnNode57, value82);
        java.lang.Class<?> wildcardClass84 = basicInterpreter6.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        int int86 = type85.getSize();
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type85, list87, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier89.newOperation(abstractInsnNode90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.asm.Type" + "'", str5, "org.mockito.asm.Type");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        int int7 = type1.getOpcode(148);
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type38, list39, true);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type30, list42, false);
        java.lang.String str45 = type30.getInternalName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type47, false);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        int int52 = type50.getOpcode(101);
        int int54 = type50.getOpcode(191);
        int int55 = type50.getSort();
        java.lang.Class<?> wildcardClass56 = type50.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        int int60 = type58.getOpcode(160);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier49.newValue(type58);
        java.lang.String str62 = type58.toString();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getReturnType("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type64, true);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier10.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier10.naryOperation(abstractInsnNode68, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "char" + "'", str4, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 148 + "'", int7 == 148);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str45, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 101 + "'", int52 == 101);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 191 + "'", int54 == 191);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 164 + "'", int60 == 164);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str62, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type35, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier42.newOperation(abstractInsnNode43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)C" + "'", str33, "(CBFCF)C");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str36, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type38);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("Lhi!;", (java.lang.Object) "F", value21);
        java.lang.Class<?> wildcardClass23 = value21.getClass();
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str24, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str25, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        java.lang.Class<?> wildcardClass53 = analyzerException51.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        int int56 = type54.getOpcode(114);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray73);
        java.lang.String str76 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier0.newValue(type54);
        java.lang.String str78 = type54.getInternalName();
        org.mockito.asm.Type type79 = type54.getElementType();
        org.mockito.asm.Type type80 = type79.getElementType();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 118 + "'", int56 == 118);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str76, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str78, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str90 = type89.getClassName();
        int int91 = type89.getSort();
        java.lang.String str92 = type89.getDescriptor();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type89, list93, true);
        int int96 = type83.getSort();
        java.lang.String str97 = type83.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "void" + "'", str90, "void");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "V" + "'", str92, "V");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "V" + "'", str97, "V");
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = type78.getElementType();
        java.lang.Class<?> wildcardClass80 = type79.getClass();
        java.lang.String str81 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass80);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str81, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter10, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, list26, true);
        java.lang.Class<?> wildcardClass29 = simpleVerifier28.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str33 = type32.getDescriptor();
        int int34 = type32.getSort();
        int int35 = type32.getSize();
        java.lang.String str36 = type32.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, true);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        int int43 = type39.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        java.lang.String str51 = type45.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        int int59 = type57.getOpcode(114);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type61, type64, type65, type69, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray76);
        boolean boolean79 = type45.equals((java.lang.Object) typeArray76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray84 = analyzerException83.getSuppressed();
        boolean boolean85 = type45.equals((java.lang.Object) analyzerException83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray88 = analyzerException87.getSuppressed();
        boolean boolean89 = type45.equals((java.lang.Object) analyzerException87);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier38.newValue(type45);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter10.newValue(type45);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type45, true);
        java.lang.String str94 = type8.toString();
        int int95 = type8.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lfloat;" + "'", str33, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 191 + "'", int43 == 191);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "F" + "'", str51, "F");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 118 + "'", int59 == 118);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)B" + "'", str77, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str94, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.newValue(type13);
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray17);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray17);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier0.newValue(type6);
        int int22 = type6.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)I" + "'", str18, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)S" + "'", str19, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str20, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException7);
        java.lang.Object obj13 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier19.merge(value38, value50);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter14.copyOperation(abstractInsnNode18, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj13, value59);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = analyzerException60.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException63);
        java.lang.Throwable[] throwableArray65 = analyzerException64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = analyzerException64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = analyzerException64.getSuppressed();
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: char", (java.lang.Throwable) analyzerException64);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        java.lang.String str83 = type81.toString();
        java.lang.String str84 = type81.getClassName();
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list85, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier87.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "C" + "'", str83, "C");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "char" + "'", str84, "char");
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier1.newValue(type3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        java.lang.String str12 = type7.getClassName();
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list13, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str18 = type17.getDescriptor();
        java.lang.String str19 = type17.getInternalName();
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier15.newValue(type17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        java.lang.String str24 = type21.getClassName();
        int int26 = type21.getOpcode(138);
        int int27 = type21.getSize();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier15.newValue(type21);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type30, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier34.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        java.lang.String str42 = type39.getClassName();
        int int44 = type39.getOpcode(138);
        int int45 = type39.getSize();
        boolean boolean47 = type39.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier1.merge(value28, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        java.lang.Class<?> wildcardClass54 = analyzerException52.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        int int57 = type55.getOpcode(114);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray74);
        java.lang.String str77 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier1.newValue(type55);
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Object) simpleVerifier1, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.BasicValue");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Throwable) analyzerException83);
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException83);
        java.lang.String str86 = analyzerException83.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LB;" + "'", str18, "LB;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "B" + "'", str19, "B");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "char" + "'", str24, "char");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 138 + "'", int26 == 138);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "char" + "'", str42, "char");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 138 + "'", int44 == 138);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 118 + "'", int57 == 118);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str77, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.BasicValue" + "'", str86, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type22, false);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier26.newValue(type29);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type29, list34, true);
        int int38 = type29.getOpcode(100);
        org.mockito.asm.Type[] typeArray40 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray40);
        int int42 = type29.getSort();
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type48, list49, true);
        java.lang.Class<?> wildcardClass52 = simpleVerifier51.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        int int58 = type55.getSize();
        java.lang.String str59 = type55.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException64);
        boolean boolean66 = type55.equals((java.lang.Object) analyzerException64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type68, false);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type55, list71, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass75 = type74.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str77 = type76.getInternalName();
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type76, list78, false);
        java.lang.String str81 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lboolean;" + "'", str2, "Lboolean;");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 102 + "'", int38 == 102);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)F" + "'", str41, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)F" + "'", str45, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)Lboolean;" + "'", str46, "(CBFCF)Lboolean;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/asm/Type" + "'", str77, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        java.lang.String str59 = type36.toString();
        java.lang.String str60 = type36.toString();
        int int61 = type36.getSize();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type63, list64, true);
        java.lang.Class<?> wildcardClass67 = simpleVerifier66.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str71 = type70.getDescriptor();
        int int72 = type70.getSort();
        int int73 = type70.getSize();
        java.lang.String str74 = type70.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type70, true);
        boolean boolean77 = type36.equals((java.lang.Object) type70);
        java.lang.String str78 = type70.toString();
        java.lang.Object obj79 = null;
        boolean boolean80 = type70.equals(obj79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier11.newValue(type70);
        int int83 = type70.getOpcode(2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "B" + "'", str59, "B");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "B" + "'", str60, "B");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lfloat;" + "'", str71, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lfloat;" + "'", str78, "Lfloat;");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        int int12 = type9.getOpcode(136);
        int int13 = type9.getSize();
        java.lang.String str14 = type9.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        java.lang.Object obj17 = null;
        boolean boolean18 = type9.equals(obj17);
        java.lang.String str19 = type9.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 140 + "'", int12 == 140);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str14, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str19, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.Type[] typeArray5 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str6 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray5);
        java.lang.String str7 = type1.toString();
        int int9 = type1.getOpcode(12);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type76, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type76);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier10.newValue(type85);
        boolean boolean88 = type85.equals((java.lang.Object) "I");
        int int90 = type85.getOpcode(8);
        org.mockito.asm.Type[] typeArray92 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type85, typeArray92);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray92);
        java.lang.String str95 = type1.getClassName();
        int int96 = type1.getDimensions();
        int int98 = type1.getOpcode(2);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(CBFCF)Lfloat;" + "'", str6, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)C" + "'", str93, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(CBFCF)Lfloat;" + "'", str94, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "float" + "'", str95, "float");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type33, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        boolean boolean39 = type10.equals((java.lang.Object) type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        java.lang.String str65 = type42.getClassName();
        int int66 = type42.getSort();
        int int68 = type42.getOpcode(148);
        java.lang.String str69 = type42.getClassName();
        java.lang.String str70 = type42.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type41, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newOperation(abstractInsnNode75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 148 + "'", int68 == 148);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "byte" + "'", str69, "byte");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type21, true);
        java.lang.String str26 = type21.getClassName();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type21, list27, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type21, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean33 = type21.equals((java.lang.Object) type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type52, false);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier56.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier56.newValue(type59);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int65 = type64.getSize();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        int int68 = type66.getOpcode(101);
        java.lang.String str69 = type66.toString();
        int int70 = type66.getSort();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type66, list71, false);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier56.newValue(type64);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type64, list75, false);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("float");
        int int80 = type79.getSize();
        boolean boolean81 = type21.equals((java.lang.Object) type79);
        java.lang.String str82 = type21.toString();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;");
        int int85 = type84.getDimensions();
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type84, list86, true);
        int int89 = type84.getSize();
        org.mockito.asm.Type type90 = type84.getElementType();
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier8.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier8.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "void" + "'", str26, "void");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 101 + "'", int68 == 101);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "C" + "'", str69, "C");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "V" + "'", str82, "V");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list9, false);
        int int12 = type6.getSize();
        int int13 = type6.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type14, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int19 = type17.getOpcode(48);
        java.lang.String str20 = type17.getClassName();
        java.lang.String str21 = type17.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type17, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        int int26 = type25.getSize();
        java.lang.String str27 = type25.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type25, true);
        java.lang.String str32 = type3.toString();
        int int33 = type3.getDimensions();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list34, false);
        int int37 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str32, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type40, true);
        boolean boolean43 = type9.equals((java.lang.Object) type40);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier7.newValue(type40);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.ternaryOperation(abstractInsnNode49, value50, value51, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter48.merge(value59, value65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier7.copyOperation(abstractInsnNode47, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value5 = simpleVerifier1.newValue(type2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        int int9 = type8.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.newValue(type14);
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier1.newValue(type7);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        boolean boolean28 = type23.equals((java.lang.Object) 177);
        java.lang.String str29 = type23.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass34 = analyzerException32.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        int int37 = type35.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray54);
        boolean boolean57 = type23.equals((java.lang.Object) typeArray54);
        java.lang.String str58 = type23.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier1.newValue(type23);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type62 = type61.getElementType();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier1.newValue(type62);
        java.lang.Class<?> wildcardClass64 = simpleVerifier1.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        int int68 = type66.getOpcode(101);
        java.lang.String str69 = type66.toString();
        int int70 = type66.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.BasicValue", (java.lang.Object) int70, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("LLB;;", (java.lang.Object) simpleVerifier1, value76);
        java.lang.String str79 = analyzerException78.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)I" + "'", str19, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)S" + "'", str20, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str21, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "F" + "'", str29, "F");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 118 + "'", int37 == 118);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str56, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 101 + "'", int68 == 101);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "C" + "'", str69, "C");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int14 = type12.getOpcode(48);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier37.newValue(type40);
        int int45 = type40.getSize();
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type40, list46, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier48.newValue(type50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("()Lorg/mockito/asm/Type;", (java.lang.Object) type11, value51);
        java.lang.String str53 = type11.toString();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 48 + "'", int14 == 48);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int10 = type9.getSort();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType("I");
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type12, list13, true);
        org.mockito.asm.tree.analysis.Value value16 = simpleVerifier5.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier5.newOperation(abstractInsnNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(value16);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        java.lang.String str7 = type6.getClassName();
        java.lang.String str8 = type6.getDescriptor();
        org.mockito.asm.Type type9 = type6.getElementType();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        java.lang.String str33 = type10.getClassName();
        int int34 = type10.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list43, false);
        int int46 = type40.getSize();
        int int47 = type40.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type51, list56, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException61);
        java.lang.Class<?> wildcardClass63 = analyzerException61.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type65 = type64.getElementType();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier58.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        boolean boolean72 = type67.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException75);
        java.lang.Class<?> wildcardClass77 = analyzerException75.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = type78.getElementType();
        java.lang.String str80 = type79.getClassName();
        java.lang.String str81 = type79.getDescriptor();
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type79, list82, false);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type67, list85, true);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.LONG_TYPE;
        int int89 = type88.getSort();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.newValue(type88);
        int int91 = value90.getSize();
        int int92 = value90.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier36.copyOperation(abstractInsnNode37, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str7, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "byte" + "'", str33, "byte");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str80, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lboolean;");
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type26, list27, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int31 = type30.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        java.lang.String str35 = type32.toString();
        int int36 = type32.getSort();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, list45, false);
        int int48 = type42.getSize();
        int int49 = type42.getSort();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type50, false);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier39.newValue(type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("void");
        java.lang.String str56 = type55.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier39.newValue(type55);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type55, true);
        int int61 = type23.getOpcode(178);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = type23.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lvoid;" + "'", str56, "Lvoid;");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 178 + "'", int61 == 178);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier16.newValue(type17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        java.lang.String str28 = type23.getClassName();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list29, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type23, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type23, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type38 = type37.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type65, list70, true);
        int int74 = type65.getOpcode(100);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type65, list75, false);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        int int79 = type78.getSize();
        java.lang.String str80 = type78.getClassName();
        int int81 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier77.newValue(type78);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier35.newValue(type78);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getReturnType("()L(CBFCF)S;");
        int int86 = type85.getSort();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier35.newValue(type85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier8.unaryOperation(abstractInsnNode9, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "void" + "'", str28, "void");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 102 + "'", int74 == 102);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str90 = type89.getClassName();
        int int91 = type89.getSort();
        java.lang.String str92 = type89.getDescriptor();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type89, list93, true);
        int int97 = type89.getOpcode(153);
        java.lang.String str98 = type89.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "void" + "'", str90, "void");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "V" + "'", str92, "V");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 158 + "'", int97 == 158);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "V" + "'", str98, "V");
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str6 = type5.getDescriptor();
        int int7 = type5.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type8, list9, false);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list12, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        java.lang.String str40 = type17.toString();
        java.lang.String str41 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier16.newValue(type17);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("hi!");
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        int int47 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier16.newValue(type44);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType("D");
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier16.newValue(type50);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = type50.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LLB;;" + "'", str6, "LLB;;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "byte" + "'", str41, "byte");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        java.lang.Object obj9 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int13 = type11.getOpcode(167);
        org.mockito.asm.Type type14 = type11.getElementType();
        int int15 = type11.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 24);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type46, list47, true);
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type38, list50, false);
        boolean boolean53 = type16.equals((java.lang.Object) type19);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier56.newValue(type58);
        int int61 = type58.getOpcode(136);
        int int62 = type58.getSize();
        java.lang.String str63 = type58.getInternalName();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type58, list64, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier66.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/SimpleVerifier", obj9, value69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier6.unaryOperation(abstractInsnNode7, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 171 + "'", int13 == 171);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 140 + "'", int61 == 140);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str63, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type28, list29, true);
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type20, list32, false);
        java.lang.String str35 = type20.getInternalName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        int int42 = type40.getOpcode(101);
        int int44 = type40.getOpcode(191);
        int int45 = type40.getSort();
        java.lang.Class<?> wildcardClass46 = type40.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.String str48 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier39.newValue(type47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier39.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter54.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        java.lang.String str69 = type64.getClassName();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type64, list70, true);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException83);
        boolean boolean85 = type73.equals((java.lang.Object) analyzerException84);
        java.lang.String str86 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier72.newValue(type73);
        int int88 = value87.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter54.copyOperation(abstractInsnNode61, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J", (java.lang.Object) value53, value87);
        java.lang.String str91 = analyzerException90.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str35, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 101 + "'", int42 == 101);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 191 + "'", int44 == 191);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str48, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str52, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "F" + "'", str86, "F");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J: expected L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;, but found F" + "'", str91, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J: expected L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;, but found F");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str55 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter35.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int59 = type58.getDimensions();
        java.lang.String str60 = type58.getInternalName();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter35.newValue(type58);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier33.copyOperation(abstractInsnNode34, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "C" + "'", str55, "C");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str60, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        java.lang.Class<?> wildcardClass18 = type16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str21 = type20.getInternalName();
        java.lang.String str22 = type20.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/Type" + "'", str21, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.mockito.asm.Type" + "'", str22, "org.mockito.asm.Type");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list3, true);
        java.lang.Class<?> wildcardClass6 = type1.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Object) wildcardClass6, value25);
        java.lang.Throwable[] throwableArray27 = analyzerException26.getSuppressed();
        java.lang.String str28 = analyzerException26.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F: expected class org.mockito.asm.Type, but found ." + "'", str28, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F: expected class org.mockito.asm.Type, but found .");
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        int int8 = type6.getOpcode(101);
        java.lang.String str9 = type6.toString();
        int int10 = type6.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray27);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier4.newValue(type5);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier4.newValue(type32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        java.lang.Class<?> wildcardClass36 = analyzerException35.getClass();
        java.lang.String str37 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier4.newValue(type38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException42);
        java.lang.Class<?> wildcardClass44 = analyzerException43.getClass();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        int int47 = type45.getOpcode(138);
        int int48 = type45.getSort();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier4.newValue(type45);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type62, true);
        java.lang.String str67 = type62.getClassName();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type62, list68, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type62, true);
        java.lang.Class<?> wildcardClass73 = type56.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        int int75 = type74.getSort();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type74, type76, true);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type76, list80, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)C" + "'", str29, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)I" + "'", str30, "(CBFCF)I");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str37, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 142 + "'", int47 == 142);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "void" + "'", str67, "void");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "void" + "'", str77, "void");
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        java.lang.Object obj5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter6.copyOperation(abstractInsnNode10, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj5, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = analyzerException52.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException52);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)J", (java.lang.Throwable) analyzerException52);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException34);
        boolean boolean36 = type24.equals((java.lang.Object) analyzerException35);
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException35);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException23);
        boolean boolean39 = type0.equals((java.lang.Object) analyzerException23);
        java.lang.String str40 = type0.toString();
        java.lang.String str41 = type0.toString();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        int int44 = type42.getOpcode(101);
        java.lang.String str45 = type42.toString();
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, list46, false);
        int int50 = type0.getOpcode(260);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "F" + "'", str40, "F");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "F" + "'", str41, "F");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 101 + "'", int44 == 101);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "C" + "'", str45, "C");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 262 + "'", int50 == 262);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        java.lang.String str8 = type0.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        int int10 = type9.getSize();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list11, true);
        java.lang.String str14 = type9.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass16 = type15.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        boolean boolean19 = type17.equals((java.lang.Object) 112);
        java.lang.String str20 = type17.toString();
        int int22 = type17.getOpcode(41);
        boolean boolean23 = type9.equals((java.lang.Object) int22);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 45 + "'", int22 == 45);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.getDescriptor();
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = null;
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list6, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type11 = type10.getElementType();
        java.lang.String str12 = type11.getInternalName();
        int int13 = type11.getSort();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier8.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value17 = simpleVerifier8.naryOperation(abstractInsnNode15, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLB;" + "'", str3, "LLB;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "i!" + "'", str12, "i!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(value14);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = type0.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = type7.getElementType();
        org.mockito.asm.Type type9 = type7.getElementType();
        int int11 = type9.getOpcode(46);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier17.newValue(type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 193);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray46);
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray46);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray46);
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type21, list51, false);
        org.mockito.asm.Type type54 = type19.getElementType();
        java.lang.String str55 = type19.getDescriptor();
        java.lang.String str56 = type19.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "char" + "'", str29, "char");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)C" + "'", str48, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str49, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)S" + "'", str50, "(CBFCF)S");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str55, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str56, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        java.lang.String str25 = type0.toString();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        boolean boolean31 = type26.equals((java.lang.Object) 177);
        int int33 = type26.getOpcode(167);
        java.lang.String str34 = type26.getDescriptor();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type37, list40, false);
        int int43 = type37.getSize();
        int int44 = type37.getSort();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type45, false);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type49, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, true);
        java.lang.String str65 = type60.getClassName();
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type60, list66, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type60, true);
        java.lang.String str71 = type60.toString();
        int int72 = type60.getSort();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type60, list73, false);
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray77);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray77);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "C" + "'", str25, "C");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 169 + "'", int33 == 169);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "F" + "'", str34, "F");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lfloat;" + "'", str38, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "void" + "'", str65, "void");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "V" + "'", str71, "V");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)V" + "'", str78, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)F" + "'", str79, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)C" + "'", str80, "(CBFCF)C");
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type75, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier9.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier9.newValue(type84);
        java.lang.String str86 = type84.toString();
        java.lang.String str87 = type84.getDescriptor();
        java.lang.String str88 = type84.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type84, false);
        int int91 = type84.getSize();
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "C" + "'", str87, "C");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        java.lang.String str49 = type47.getInternalName();
        int int51 = type47.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier45.newValue(type47);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        java.lang.String str56 = type53.getClassName();
        int int58 = type53.getOpcode(138);
        int int59 = type53.getSize();
        boolean boolean61 = type53.equals((java.lang.Object) 154);
        java.lang.String str62 = type53.getDescriptor();
        java.lang.Class<?> wildcardClass63 = type53.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier45.newValue(type64);
        int int66 = type64.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 152 + "'", int51 == 152);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "char" + "'", str56, "char");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 138 + "'", int58 == 138);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "C" + "'", str62, "C");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.Class<?> wildcardClass38 = simpleVerifier37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = type40.getElementType();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier32.newValue(type41);
        int int43 = value42.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        java.lang.Class<?> wildcardClass19 = value17.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int23 = type21.getOpcode(66);
        int int24 = type21.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        boolean boolean30 = type25.equals((java.lang.Object) 177);
        int int31 = type25.getSize();
        java.lang.String str32 = type25.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type25, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str39 = type38.getInternalName();
        java.lang.String str40 = type38.toString();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, list41, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str46 = type45.getClassName();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type45, list47, true);
        org.mockito.asm.Type type50 = type38.getElementType();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier34.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        int int54 = type52.getOpcode(183);
        java.lang.String str55 = type52.toString();
        org.mockito.asm.Type[] typeArray57 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray57);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str20, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LB;" + "'", str39, "LB;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LLB;;" + "'", str40, "LLB;;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 183 + "'", int54 == 183);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "I" + "'", str55, "I");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)I" + "'", str58, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type7, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        int int36 = type32.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier61.newValue(type64);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type64, list69, true);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier31.newValue(type38);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type74, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier78.newValue(type79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean87 = type85.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type84, type85, true);
        java.lang.String str90 = type85.getClassName();
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type85, list91, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type85, true);
        org.mockito.asm.Type type96 = null;
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier95.newValue(type96);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException98 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;: expected LLB;;, but found null", (java.lang.Object) value72, value97);
        java.lang.String str99 = analyzerException98.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 191 + "'", int36 == 191);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "void" + "'", str90, "void");
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;: expected LLB;;, but found null: expected I, but found ." + "'", str99, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;: expected LLB;;, but found null: expected I, but found .");
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(CBFCF)I");
        int int3 = type2.getSort();
        java.lang.String str4 = type2.getDescriptor();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getReturnType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type6, list7, false);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.Class<?> wildcardClass12 = type11.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str14 = type13.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type13, list15, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type21 = null;
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type21, list22, false);
        int int25 = type20.getSize();
        int int26 = type20.getSort();
        int int27 = type20.getSort();
        int int28 = type20.getSort();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type30 = null;
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type30, list31, false);
        int int34 = type29.getSize();
        int int35 = type29.getSort();
        int int36 = type29.getSort();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type29, list37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        int int58 = type40.getSize();
        java.lang.Class<?> wildcardClass59 = type40.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass59);
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) 151);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean88 = type86.equals((java.lang.Object) 151);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean91 = type89.equals((java.lang.Object) (byte) 100);
        java.lang.String str92 = type89.getClassName();
        org.mockito.asm.Type[] typeArray93 = new org.mockito.asm.Type[] { type78, type81, type82, type86, type89 };
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray93);
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray93);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray93);
        java.lang.String str97 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray93);
        java.lang.String str98 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray93);
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier19.newValue(type29);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(CBFCF)I;" + "'", str4, "L(CBFCF)I;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str14, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str61, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "char" + "'", str76, "char");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "float" + "'", str92, "float");
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(CBFCF)B" + "'", str94, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(CBFCF)C" + "'", str95, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(CBFCF)C" + "'", str96, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(CBFCF)Lorg/mockito/asm/Type;" + "'", str97, "(CBFCF)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(CBFCF)V" + "'", str98, "(CBFCF)V");
        org.junit.Assert.assertNull(value99);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        java.lang.String str37 = type14.toString();
        java.lang.String str38 = type14.toString();
        java.lang.String str39 = type14.toString();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("Lg/mockito/asm/Type;");
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type41, list42, false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int48 = type46.getOpcode(167);
        org.mockito.asm.Type type49 = type46.getElementType();
        int int50 = type46.getSort();
        java.lang.String str51 = type46.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier52.newValue(type54);
        int int57 = type54.getOpcode(136);
        int int58 = type54.getSize();
        java.lang.String str59 = type54.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type54, true);
        java.lang.String str62 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier44.newValue(type54);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int66 = type64.getOpcode(48);
        java.lang.String str67 = type64.getClassName();
        java.lang.String str68 = type64.getClassName();
        java.lang.String str69 = type64.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type88, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type70, true);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str96 = type95.getClassName();
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier94.newValue(type95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException98 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected null, but found F", (java.lang.Object) value63, value97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier11.copyOperation(abstractInsnNode12, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "B" + "'", str37, "B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "B" + "'", str38, "B");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "B" + "'", str39, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 171 + "'", int48 == 171);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str51, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 140 + "'", int57 == 140);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str59, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str62, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 48 + "'", int66 == 48);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "long" + "'", str96, "long");
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        int int33 = type31.getOpcode(114);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray50);
        java.lang.String str53 = type31.getDescriptor();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, true);
        int int60 = type54.getOpcode(169);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        int int65 = type61.getOpcode(191);
        int int66 = type61.getSort();
        java.lang.Class<?> wildcardClass67 = type61.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = type68.getDescriptor();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type68, list70, true);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type54, list73, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier22.newValue(type54);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier22.newValue(type78);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        java.util.List list81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.naryOperation(abstractInsnNode80, list81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 118 + "'", int33 == 118);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 170 + "'", int60 == 170);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 191 + "'", int65 == 191);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        int int42 = type41.getSize();
        java.lang.String str43 = type41.getClassName();
        int int44 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier4.newValue(type41);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str49 = type48.getDescriptor();
        int int50 = type48.getSort();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type48, list51, false);
        java.lang.String str54 = type46.getClassName();
        java.lang.String str55 = type46.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type46, list56, false);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = type41.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lfloat;" + "'", str49, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        int int6 = type0.getSort();
        int int7 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type38, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type42);
        int int45 = type42.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, false);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.Type type50 = type49.getElementType();
        int int51 = type50.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        int int55 = type53.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type59 = org.mockito.asm.Type.SHORT_TYPE;
        int int60 = type59.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str66 = type65.getDescriptor();
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter61.newValue(type65);
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray69);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier52.newValue(type58);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier52.newValue(type75);
        boolean boolean78 = type50.equals((java.lang.Object) simpleVerifier52);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier79.newValue(type81);
        int int84 = type81.getOpcode(136);
        int int85 = type81.getSize();
        java.lang.String str86 = type81.getInternalName();
        java.lang.String str87 = type81.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type81, false);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier47.newValue(type81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier47.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "char" + "'", str11, "char");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)C" + "'", str30, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 85 + "'", int45 == 85);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 101 + "'", int55 == 101);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "I" + "'", str66, "I");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)I" + "'", str70, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)S" + "'", str71, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str72, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "byte" + "'", str76, "byte");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 140 + "'", int84 == 140);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str86, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str87, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException13);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter18.newValue(type22);
        org.mockito.asm.Type[] typeArray26 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str38, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type29, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: F: expected 1.0, but found .", (java.lang.Object) analyzerException13, value63);
        java.lang.Throwable[] throwableArray67 = analyzerException66.getSuppressed();
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "I" + "'", str23, "I");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)I" + "'", str27, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type13.getClassName();
        java.lang.String str15 = type13.getDescriptor();
        org.mockito.asm.Type type16 = type13.getElementType();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier6.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier6.newValue(type19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier6.newValue(type22);
        java.lang.String str24 = type22.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str24, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        int int33 = type31.getOpcode(114);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray50);
        java.lang.String str53 = type31.getDescriptor();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, true);
        int int60 = type54.getOpcode(169);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        int int65 = type61.getOpcode(191);
        int int66 = type61.getSort();
        java.lang.Class<?> wildcardClass67 = type61.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = type68.getDescriptor();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type68, list70, true);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type54, list73, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier22.newValue(type54);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier22.newValue(type78);
        java.lang.String str80 = type78.getClassName();
        int int81 = type78.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 118 + "'", int33 == 118);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 170 + "'", int60 == 170);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 191 + "'", int65 == 191);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LLg.mockito.asm.tree.analysis.AnalyzerException;;" + "'", str80, "LLg.mockito.asm.tree.analysis.AnalyzerException;;");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.ternaryOperation(abstractInsnNode19, value20, value21, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter18.merge(value29, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier17.merge(value36, value48);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter10.copyOperation(abstractInsnNode16, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Object) wildcardClass7, value48);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        java.lang.String str69 = type64.getClassName();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type64, list70, true);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException83);
        boolean boolean85 = type73.equals((java.lang.Object) analyzerException84);
        java.lang.String str86 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("Lid;", (java.lang.Object) type61, value87);
        int int89 = type61.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str60, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "F" + "'", str86, "F");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        int int49 = value40.getSize();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type58, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str64 = type63.getDescriptor();
        int int65 = type63.getSort();
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type63, list66, false);
        int int69 = type63.getSize();
        int int70 = type63.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type71, false);
        int int75 = type63.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier60.newValue(type63);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier8.merge(value40, value76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier8.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lfloat;" + "'", str64, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 158 + "'", int75 == 158);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int30 = type28.getOpcode(48);
        java.lang.String str31 = type28.getClassName();
        java.lang.String str32 = type28.getClassName();
        java.lang.String str33 = type28.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type52, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type34, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type63, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier67.newValue(type68);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.merge(value61, value71);
        java.lang.Class<?> wildcardClass74 = basicInterpreter0.getClass();
        java.lang.String str75 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass74);
        java.lang.String str76 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass74);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "long" + "'", str60, "long");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str75, "org/mockito/asm/tree/analysis/BasicInterpreter");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org/mockito/asm/tree/analysis/BasicInterpreter" + "'", str76, "org/mockito/asm/tree/analysis/BasicInterpreter");
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str8 = type7.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type17, list18, false);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter21.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, true);
        java.lang.String str36 = type31.getClassName();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type31, list37, true);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException46.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException50);
        boolean boolean52 = type40.equals((java.lang.Object) analyzerException51);
        java.lang.String str53 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier39.newValue(type40);
        int int55 = value54.getSize();
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter21.copyOperation(abstractInsnNode28, value54);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter21.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str62 = type61.getDescriptor();
        int int63 = type61.getSort();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type61, list64, false);
        java.lang.String str67 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter21.newValue(type61);
        java.lang.String str69 = type61.getDescriptor();
        boolean boolean70 = type7.equals((java.lang.Object) str69);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.Type" + "'", str8, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "void" + "'", str36, "void");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "F" + "'", str53, "F");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lfloat;" + "'", str62, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lfloat;" + "'", str69, "Lfloat;");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        java.lang.String str43 = type37.getClassName();
        int int45 = type37.getOpcode(131076);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str43, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 131080 + "'", int45 == 131080);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("I");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.getInternalName();
        java.lang.String str6 = type3.getDescriptor();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list7, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        java.util.List list11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value12 = simpleVerifier9.naryOperation(abstractInsnNode10, list11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: LLB" + "'", str4, "rg.mockito.asm.tree.analysis.AnalyzerException: LLB");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: LLB" + "'", str5, "rg.mockito.asm.tree.analysis.AnalyzerException: LLB");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;" + "'", str6, "Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;");
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode7, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass33 = analyzerException30.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = type35.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type35, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type41, list42, true);
        java.lang.Class<?> wildcardClass45 = simpleVerifier44.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = type46.getInternalName();
        java.lang.String str48 = type46.getDescriptor();
        int int49 = type46.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        java.lang.Class<?> wildcardClass54 = analyzerException52.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type56 = type55.getElementType();
        java.lang.String str57 = type56.getClassName();
        java.lang.String str58 = type56.getDescriptor();
        org.mockito.asm.Type type59 = type56.getElementType();
        org.mockito.asm.Type type60 = type56.getElementType();
        org.mockito.asm.Type type61 = type56.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type61, false);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str66 = type65.getDescriptor();
        java.lang.String str67 = type65.getClassName();
        org.mockito.asm.Type type68 = type65.getElementType();
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type68, list69, false);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type73, list74, true);
        java.lang.Class<?> wildcardClass77 = simpleVerifier76.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str79 = type78.getInternalName();
        java.lang.String str80 = type78.toString();
        org.mockito.asm.Type type81 = type78.getElementType();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier71.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier38.unaryOperation(abstractInsnNode39, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "B" + "'", str1, "B");
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str47, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str48, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str57, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str58, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str66, "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException" + "'", str67, "CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str79, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str80, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str10 = type9.getDescriptor();
        int int11 = type9.getSort();
        int int12 = type9.getDimensions();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str15 = type14.getDescriptor();
        int int16 = type14.getSort();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type14, list17, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str22 = type21.getDescriptor();
        int int23 = type21.getSort();
        int int24 = type21.getDimensions();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str27 = type26.getDescriptor();
        int int28 = type26.getSort();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type26, list29, true);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier19.newValue(type42);
        java.lang.String str44 = type42.getDescriptor();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, list45, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        java.util.List list49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier47.naryOperation(abstractInsnNode48, list49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lfloat;" + "'", str10, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lfloat;" + "'", str15, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lfloat;" + "'", str22, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lfloat;" + "'", str27, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str40, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str41, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str44, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, false);
        java.lang.String str61 = type18.getClassName();
        java.lang.String str62 = type18.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "char" + "'", str61, "char");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "C" + "'", str62, "C");
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list29, true);
        java.lang.Class<?> wildcardClass32 = simpleVerifier31.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = type33.getInternalName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        java.lang.String str53 = type35.toString();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, list54, true);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type57, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, list62, true);
        java.lang.Class<?> wildcardClass65 = simpleVerifier64.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type68 = type67.getElementType();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier59.newValue(type68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier22.copyOperation(abstractInsnNode26, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str34, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "B" + "'", str53, "B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        int int5 = type3.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier2.newValue(type3);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        boolean boolean12 = type7.equals((java.lang.Object) 177);
        java.lang.String str13 = type7.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int21 = type19.getOpcode(114);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray38);
        boolean boolean41 = type7.equals((java.lang.Object) typeArray38);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray38);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray38);
        int int44 = type1.getSize();
        int int45 = type1.getSize();
        java.lang.String str46 = type1.getDescriptor();
        int int47 = type1.getSize();
        java.lang.String str48 = type1.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type49 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 101 + "'", int5 == 101);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 118 + "'", int21 == 118);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)C" + "'", str42, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)Lbyte;" + "'", str43, "(CBFCF)Lbyte;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lbyte;" + "'", str46, "Lbyte;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        java.lang.Class<?> wildcardClass26 = value24.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str29 = type28.getClassName();
        java.lang.String str30 = type28.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list31, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type34 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str27, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str29, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str30, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter24.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, true);
        java.lang.String str39 = type34.getClassName();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, list40, true);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException53);
        boolean boolean55 = type43.equals((java.lang.Object) analyzerException54);
        java.lang.String str56 = type43.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier42.newValue(type43);
        int int58 = value57.getSize();
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter24.copyOperation(abstractInsnNode31, value57);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter24.newValue(type60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Object) true, value61);
        int int63 = value61.getSize();
        java.lang.Class<?> wildcardClass64 = value61.getClass();
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        int int67 = type66.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "void" + "'", str39, "void");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "F" + "'", str56, "F");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str65, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        int int42 = type28.getOpcode(97);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        int int78 = type69.getOpcode(100);
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray80);
        java.lang.Class<?> wildcardClass82 = type69.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        boolean boolean84 = type28.equals((java.lang.Object) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type28, true);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        int int89 = type87.getOpcode(101);
        java.lang.String str90 = type87.toString();
        int int91 = type87.getSize();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.FLOAT_TYPE;
        int int93 = type92.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type87, type92, false);
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier86.newValue(type87);
        int int97 = value96.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 102 + "'", int78 == 102);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)F" + "'", str81, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 101 + "'", int89 == 101);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "C" + "'", str90, "C");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier26.merge(value45, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.ternaryOperation(abstractInsnNode67, value68, value69, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter66.merge(value77, value83);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier25.merge(value65, value77);
        int int86 = value85.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;", value85);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter6.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter6, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Class<?> wildcardClass22 = analyzerException19.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type23, list24, false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass28 = type27.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        int int30 = type29.getDimensions();
        java.lang.String str31 = type29.getInternalName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type33, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        java.lang.Class<?> wildcardClass44 = analyzerException42.getClass();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type45, false);
        java.lang.String str48 = type38.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type38, true);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier26.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list61, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str66 = type65.getDescriptor();
        java.lang.String str67 = type65.getInternalName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        int int74 = type69.getOpcode(138);
        int int75 = type69.getSize();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier63.newValue(type69);
        int int77 = value76.getSize();
        org.mockito.asm.tree.analysis.Value value78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier26.binaryOperation(abstractInsnNode52, value76, value78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "LB;" + "'", str66, "LB;");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "B" + "'", str67, "B");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 138 + "'", int74 == 138);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        java.lang.String str8 = type0.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str12 = type11.getDescriptor();
        int int13 = type11.getSort();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type11, list14, false);
        int int17 = type11.getSize();
        int int18 = type11.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type19, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, true);
        java.lang.String str39 = type34.getClassName();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, list40, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type34, true);
        java.lang.String str45 = type34.toString();
        int int46 = type34.getSort();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type34, list47, false);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray51);
        int int54 = type0.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lfloat;" + "'", str12, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "void" + "'", str39, "void");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)V" + "'", str52, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)F" + "'", str53, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str10 = type9.getDescriptor();
        int int11 = type9.getSort();
        int int12 = type9.getDimensions();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str15 = type14.getDescriptor();
        int int16 = type14.getSort();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type14, list17, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str22 = type21.getDescriptor();
        int int23 = type21.getSort();
        int int24 = type21.getDimensions();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str27 = type26.getDescriptor();
        int int28 = type26.getSort();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type26, list29, true);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier19.newValue(type42);
        java.lang.String str44 = type42.getDescriptor();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, list45, true);
        int int49 = type0.getOpcode(196);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)V");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("L(CBFCF)I;");
        org.mockito.asm.Type[] typeArray56 = org.mockito.asm.Type.getArgumentTypes("LCBFCF)LB;");
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray56);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray56);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lfloat;" + "'", str10, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lfloat;" + "'", str15, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lfloat;" + "'", str22, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lfloat;" + "'", str27, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str40, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str41, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str44, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 198 + "'", int49 == 198);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)F" + "'", str52, "(CBFCF)F");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)I" + "'", str57, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)F" + "'", str58, "(CBFCF)F");
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str25 = type24.getDescriptor();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter20.newValue(type24);
        org.mockito.asm.Type[] typeArray28 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray28);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier14.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier40.merge(value59, value71);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter33.copyOperation(abstractInsnNode39, value71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier14.unaryOperation(abstractInsnNode32, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "I" + "'", str25, "I");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)I" + "'", str29, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;" + "'", str30, "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        int int26 = type12.getSort();
        int int27 = type12.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str34 = type33.getDescriptor();
        int int35 = type33.getSort();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type36, list37, false);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.ternaryOperation(abstractInsnNode43, value44, value45, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter42.merge(value53, value59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str62 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter42.newValue(type61);
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type61, list64, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        boolean boolean78 = type73.equals((java.lang.Object) 177);
        int int79 = type73.getSize();
        java.lang.String str80 = type73.toString();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter67.newValue(type73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter67.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        int int87 = type85.getOpcode(101);
        java.lang.String str88 = type85.toString();
        int int89 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter67.newValue(type85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Object) simpleVerifier66, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("()Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Object) simpleVerifier39, value90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier29.unaryOperation(abstractInsnNode30, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "LLB;;" + "'", str34, "LLB;;");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "C" + "'", str62, "C");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "F" + "'", str80, "F");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 101 + "'", int87 == 101);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter6.copyOperation(abstractInsnNode12, value44);
        int int54 = value53.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter4.copyOperation(abstractInsnNode5, value53);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.merge(value55, value56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.getClassName();
        java.lang.String str61 = type59.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        int int65 = type63.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type59, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type59);
        int int69 = type59.getSort();
        java.lang.String str70 = type59.getDescriptor();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "long" + "'", str60, "long");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "long" + "'", str61, "long");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 101 + "'", int65 == 101);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "J" + "'", str70, "J");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        int int21 = type17.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        boolean boolean32 = type17.equals((java.lang.Object) type31);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier15.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        java.util.List list35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value36 = simpleVerifier15.naryOperation(abstractInsnNode34, list35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str28, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str29, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str30, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int3 = type2.getDimensions();
        java.lang.Class<?> wildcardClass4 = type2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        int int31 = type26.getSort();
        java.lang.String str32 = type26.getDescriptor();
        boolean boolean34 = type26.equals((java.lang.Object) 179);
        java.lang.String str35 = type26.getDescriptor();
        int int36 = type26.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, true);
        int int40 = type7.getOpcode(59);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "C" + "'", str32, "C");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 63 + "'", int40 == 63);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int31 = type30.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        java.lang.String str35 = type32.toString();
        int int36 = type32.getSort();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list37, false);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier22.newValue(type30);
        int int41 = type30.getSize();
        int int43 = type30.getOpcode(0);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type24, list36, false);
        boolean boolean39 = type2.equals((java.lang.Object) type5);
        int int40 = type5.getSize();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list41, true);
        java.lang.String str44 = type1.getClassName();
        java.lang.String str45 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, list17, true);
        org.mockito.asm.Type type20 = type16.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier21.newValue(type26);
        boolean boolean30 = type20.equals((java.lang.Object) type26);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type32 = null;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, false);
        int int36 = type31.getSize();
        boolean boolean37 = type26.equals((java.lang.Object) int36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException40);
        java.lang.Class<?> wildcardClass42 = analyzerException40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        int int45 = type43.getOpcode(114);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray62);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type43, list65, false);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier6.newValue(type26);
        java.lang.String str69 = type26.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "I" + "'", str27, "I");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 118 + "'", int45 == 118);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str64, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "I" + "'", str69, "I");
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str35 = type34.getDescriptor();
        boolean boolean36 = type6.equals((java.lang.Object) type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str39 = type38.getInternalName();
        boolean boolean40 = type34.equals((java.lang.Object) type38);
        java.lang.String str41 = type38.getInternalName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type43 = null;
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, list44, false);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        int int50 = type48.getOpcode(101);
        java.lang.String str51 = type48.toString();
        int int52 = type48.getSize();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray69);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier46.newValue(type47);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass75 = type74.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier46.newValue(type76);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type76, list78, false);
        int int81 = type38.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "LLB;;" + "'", str35, "LLB;;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str41, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 101 + "'", int50 == 101);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "C" + "'", str51, "C");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)I" + "'", str72, "(CBFCF)I");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int24 = type0.getOpcode(10);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str27 = type26.getInternalName();
        int int28 = type26.getSort();
        int int30 = type26.getOpcode(82);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value35 = simpleVerifier33.newOperation(abstractInsnNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LB;" + "'", str27, "LB;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 86 + "'", int30 == 86);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getInternalName();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Class<?> wildcardClass9 = analyzerException7.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str16 = type15.getInternalName();
        int int17 = type15.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type22, type25, type26, type30, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type39, false);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier43.newValue(type46);
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type46, list51, true);
        int int55 = type46.getOpcode(100);
        org.mockito.asm.Type[] typeArray57 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray57);
        java.lang.Class<?> wildcardClass59 = type46.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier19.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        java.util.List list64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = simpleVerifier19.naryOperation(abstractInsnNode63, list64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str3, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str4, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str12, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)B" + "'", str38, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 102 + "'", int55 == 102);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)F" + "'", str58, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("B");
        int int3 = type2.getSize();
        int int4 = type2.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        java.lang.Object obj19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.ternaryOperation(abstractInsnNode46, value47, value48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter45.merge(value56, value62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier25.merge(value44, value56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter20.copyOperation(abstractInsnNode24, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj19, value65);
        java.lang.Class<?> wildcardClass67 = value65.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier17.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier17.newValue(type71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) type2, value73);
        java.lang.Object obj76 = null;
        boolean boolean77 = type2.equals(obj76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException80);
        java.lang.Class<?> wildcardClass82 = analyzerException81.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        int int86 = type85.getSize();
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type85, list87, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str83, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str84, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value12 = simpleVerifier8.newValue(type9);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier8.newValue(type13);
        int int18 = type13.getSize();
        int int20 = type13.getOpcode(114);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        java.lang.String str26 = type24.getDescriptor();
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type27, false);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.tree.analysis.AnalyzerException: LB");
        int int32 = type31.getDimensions();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type31, list33, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        java.util.List list37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.naryOperation(abstractInsnNode36, list37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 116 + "'", int20 == 116);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "L(CBFCF)B;" + "'", str26, "L(CBFCF)B;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier34.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list40, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        java.lang.String str47 = type36.getDescriptor();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException50);
        java.lang.Class<?> wildcardClass52 = analyzerException51.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str56 = type55.getClassName();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list57, false);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type61 = null;
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, list62, false);
        int int65 = type60.getSize();
        int int66 = type60.getSort();
        int int67 = type60.getSort();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type60, list68, true);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str73 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier70.newValue(type72);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type72, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type53, false);
        java.lang.String str79 = type53.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "LLB;;" + "'", str47, "LLB;;");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "byte" + "'", str56, "byte");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CBFCF)LB" + "'", str73, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str79, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        java.lang.Class<?> wildcardClass85 = value84.getClass();
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        java.lang.String str87 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass85);
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str86, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str87, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str88, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type89);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        int int5 = type1.getOpcode(163);
        int int6 = type1.getSize();
        org.mockito.asm.Type type7 = type1.getElementType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier31.newValue(type34);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type34, list39, true);
        int int42 = type34.getSize();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        int int78 = type69.getOpcode(100);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str80 = type79.toString();
        org.mockito.asm.Type[] typeArray82 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray82);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray82);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray82);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray82);
        java.lang.String str87 = type1.toString();
        java.lang.String str88 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 102 + "'", int78 == 102);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "S" + "'", str80, "S");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)S" + "'", str83, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)F" + "'", str84, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(CBFCF)F" + "'", str85, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str86, "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str87, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str88, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int16 = type14.getOpcode(48);
        java.lang.String str17 = type14.getClassName();
        java.lang.String str18 = type14.getClassName();
        java.lang.String str19 = type14.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type38, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter10.newValue(type14);
        java.lang.String str46 = type14.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException49);
        java.lang.Class<?> wildcardClass51 = analyzerException49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass51);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type58 = type57.getElementType();
        boolean boolean59 = type14.equals((java.lang.Object) type58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier9.newValue(type14);
        java.lang.Class<?> wildcardClass61 = value60.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str53, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str54, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str55, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        java.lang.String str25 = type0.toString();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("Lg/mockito/asm/Type;");
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list28, false);
        int int31 = type0.getSort();
        java.lang.String str32 = type0.toString();
        int int33 = type0.getSize();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type53, false);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier57.newValue(type60);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type60, list65, true);
        int int69 = type60.getOpcode(100);
        org.mockito.asm.Type[] typeArray71 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray71);
        java.lang.Class<?> wildcardClass73 = type60.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type76, list77, true);
        int int80 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "B" + "'", str25, "B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "B" + "'", str32, "B");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 102 + "'", int69 == 102);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)F" + "'", str72, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        int int79 = type77.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type77);
        org.mockito.asm.Type[] typeArray82 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray82);
        java.lang.String str84 = type77.toString();
        java.lang.String str85 = type77.getDescriptor();
        int int86 = type77.getSort();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 101 + "'", int79 == 101);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)C" + "'", str83, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "C" + "'", str84, "C");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "C" + "'", str85, "C");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Li!;");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int6 = type4.getOpcode(113);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        boolean boolean12 = type7.equals((java.lang.Object) 177);
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list13, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, list18, true);
        java.lang.String str21 = type17.getClassName();
        java.lang.String str22 = type17.getDescriptor();
        int int23 = type17.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, list26, false);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier15.newValue(type17);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type17, false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        java.lang.String str35 = type32.getClassName();
        int int37 = type32.getOpcode(138);
        int int38 = type32.getSize();
        boolean boolean40 = type32.equals((java.lang.Object) 154);
        java.lang.String str41 = type32.getDescriptor();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type42, true);
        int int49 = type42.getSize();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = null;
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, list52, false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException80);
        java.lang.Class<?> wildcardClass82 = analyzerException80.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type85, true);
        boolean boolean89 = type85.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier54.newValue(type85);
        int int91 = type85.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type85, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier95.naryOperation(abstractInsnNode96, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLi!;;" + "'", str2, "LLi!;;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 113 + "'", int6 == 113);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Z" + "'", str22, "Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "char" + "'", str35, "char");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 138 + "'", int37 == 138);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "C" + "'", str41, "C");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "char" + "'", str58, "char");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)C" + "'", str77, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str84, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: float;", (java.lang.Throwable) analyzerException50);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        int int83 = type82.getSize();
        int int84 = type82.getSort();
        java.lang.String str85 = type82.getDescriptor();
        org.mockito.asm.Type type86 = type82.getElementType();
        int int88 = type82.getOpcode(50);
        int int89 = type82.getDimensions();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str85, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54 + "'", int88 == 54);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        int int20 = type2.getSize();
        java.lang.String str21 = type2.toString();
        int int23 = type2.getOpcode(9);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list24, true);
        int int28 = type1.getOpcode(172);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        java.lang.String str33 = type29.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean36 = type29.equals((java.lang.Object) type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier59.newValue(type60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier59.newValue(type62);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type68 = null;
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type68, list69, false);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier59.newValue(type67);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type67, false);
        java.lang.String str75 = type29.getClassName();
        java.lang.String str76 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type29, true);
        int int79 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 176 + "'", int28 == 176);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "F" + "'", str76, "F");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        int int24 = type0.getSort();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type31 = type30.getElementType();
        java.lang.String str32 = type31.getClassName();
        java.lang.String str33 = type31.getDescriptor();
        org.mockito.asm.Type type34 = type31.getElementType();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        int int40 = type38.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        boolean boolean47 = type42.equals((java.lang.Object) 177);
        java.lang.String str48 = type42.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        java.lang.Class<?> wildcardClass53 = analyzerException51.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        int int56 = type54.getOpcode(114);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray73);
        boolean boolean76 = type42.equals((java.lang.Object) typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray73);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray73);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray73);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException85);
        java.lang.Class<?> wildcardClass87 = analyzerException85.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type90, list91, true);
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type90, list94, false);
        java.lang.String str97 = type0.toString();
        int int98 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str32, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 101 + "'", int40 == 101);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "F" + "'", str48, "F");
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 118 + "'", int56 == 118);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)C" + "'", str77, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lbyte;" + "'", str78, "(CBFCF)Lbyte;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str79, "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str89, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "B" + "'", str97, "B");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type3 = null;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        int int7 = type1.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str13 = type12.getDescriptor();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter8.newValue(type12);
        org.mockito.asm.Type[] typeArray16 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str21 = type20.getInternalName();
        java.lang.String str22 = type20.toString();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str25 = type24.getInternalName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type24, list26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type24, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        java.util.List list32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.naryOperation(abstractInsnNode31, list32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg.mockito.asm.tree.analysis.AnalyzerException;, but found ." + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg.mockito.asm.tree.analysis.AnalyzerException;, but found .");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "I" + "'", str13, "I");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)I" + "'", str17, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str21, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str22, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str25, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier47.newValue(type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int56 = type55.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        int int59 = type57.getOpcode(101);
        java.lang.String str60 = type57.toString();
        int int61 = type57.getSort();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type57, list62, false);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier47.newValue(type55);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type55, list66, false);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("float");
        int int71 = type70.getSize();
        boolean boolean72 = type12.equals((java.lang.Object) type70);
        java.lang.String str73 = type12.toString();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;");
        int int76 = type75.getDimensions();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type75, list77, true);
        int int80 = type75.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 101 + "'", int59 == 101);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = null;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, list8, false);
        int int11 = type6.getSize();
        int int12 = type6.getSort();
        int int13 = type6.getSort();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list14, true);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier16.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str24 = type23.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier16.newValue(type22);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int30 = type28.getOpcode(48);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier53.newValue(type56);
        int int61 = type56.getSize();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type56, list62, true);
        int int66 = type28.getOpcode(138);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier16.newValue(type28);
        int int68 = value67.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CBFCF)LB" + "'", str19, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 138 + "'", int66 == 138);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        java.lang.Class<?> wildcardClass33 = simpleVerifier32.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type35 = type34.getElementType();
        int int37 = type34.getOpcode(112);
        int int38 = type34.getSort();
        int int39 = type34.getSize();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type70, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier72.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, list78, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type74, type76, true);
        int int83 = type74.getDimensions();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type74, list84, true);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "char" + "'", str43, "char");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)C" + "'", str62, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str9, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str11, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        java.lang.String str36 = type32.getDescriptor();
        org.mockito.asm.Type type37 = type32.getElementType();
        java.lang.String str38 = type32.getInternalName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        java.lang.String str45 = type39.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        java.lang.Class<?> wildcardClass50 = analyzerException48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        int int53 = type51.getOpcode(114);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type55, type58, type59, type63, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray70);
        boolean boolean73 = type39.equals((java.lang.Object) typeArray70);
        int int74 = type39.getSort();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str77 = type76.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type76, true);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type80, true);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type39, list83, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = type39.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str38, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "F" + "'", str45, "F");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 118 + "'", int53 == 118);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)B" + "'", str71, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str72, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "byte" + "'", str77, "byte");
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        java.lang.String str28 = type5.toString();
        java.lang.String str29 = type5.toString();
        int int30 = type5.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.lang.Class<?> wildcardClass36 = simpleVerifier35.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getSize();
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, true);
        boolean boolean46 = type5.equals((java.lang.Object) type39);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type48, true);
        java.lang.String str53 = type48.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type48, false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        int int58 = type56.getOpcode(101);
        java.lang.String str59 = type56.toString();
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type56, list60, false);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type56, list63, false);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("[Lorg/mockito/asm/Type;");
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier65.newValue(type67);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str73 = type72.getDescriptor();
        int int74 = type72.getSort();
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type72, list75, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier65.unaryOperation(abstractInsnNode69, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "B" + "'", str29, "B");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "void" + "'", str53, "void");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 101 + "'", int58 == 101);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "C" + "'", str59, "C");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lfloat;" + "'", str73, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = analyzerException3.getSuppressed();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier29.newValue(type32);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        java.lang.String str41 = type37.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean44 = type37.equals((java.lang.Object) type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type76 = null;
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type76, list77, false);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier67.newValue(type75);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type75, false);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier29.newValue(type75);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        java.lang.String str86 = type85.toString();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier29.newValue(type85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) throwableArray6, value87);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "LLorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;;" + "'", str86, "LLorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;;");
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.CHAR_TYPE;
        int int85 = type83.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier6.newValue(type83);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier5.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier5.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 101 + "'", int85 == 101);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str36 = type35.toString();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type35, false);
        java.lang.String str43 = type35.getInternalName();
        java.lang.String str44 = type35.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)C" + "'", str33, "(CBFCF)C");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str36, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str43, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str44, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type0.getDescriptor();
        org.mockito.asm.Type type7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        int int42 = type27.getDimensions();
        java.lang.String str43 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type27, false);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list46, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier48.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str43, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier17.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier17.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str33 = type32.getDescriptor();
        int int34 = type32.getSort();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list35, false);
        int int38 = type32.getSize();
        int int39 = type32.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, false);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        java.lang.String str46 = type43.getClassName();
        java.lang.String str47 = type43.getClassName();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type43, list48, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        int int52 = type51.getSize();
        java.lang.String str53 = type51.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type51, true);
        java.lang.Class<?> wildcardClass56 = type51.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type57, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        java.util.List list61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier59.naryOperation(abstractInsnNode60, list61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str28, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lfloat;" + "'", str33, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        int int15 = type10.getSize();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier39.newValue(type40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier39.newValue(type42);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type42, list47, true);
        int int51 = type42.getOpcode(100);
        org.mockito.asm.Type[] typeArray53 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray53);
        java.lang.Class<?> wildcardClass55 = type42.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str57 = type56.getDescriptor();
        int int59 = type56.getOpcode(110);
        java.lang.String str60 = type56.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type56, false);
        int int63 = type56.getSize();
        int int65 = type56.getOpcode(125);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 102 + "'", int51 == 102);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)F" + "'", str54, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 114 + "'", int59 == 114);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str60, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 129 + "'", int65 == 129);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) 179);
        java.lang.String str27 = type18.getDescriptor();
        int int28 = type18.getSort();
        java.lang.String str29 = type18.getDescriptor();
        int int31 = type18.getOpcode(100);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type33, list34, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        java.util.List list38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.naryOperation(abstractInsnNode37, list38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "C" + "'", str27, "C");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "C" + "'", str29, "C");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(type33);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier24.newValue(type27);
        int int32 = value31.getSize();
        java.lang.Class<?> wildcardClass33 = value31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)I");
        java.lang.String str37 = type36.toString();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type36, list38, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        int int44 = type36.getOpcode(154);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "L(CBFCF)I;" + "'", str37, "L(CBFCF)I;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 158 + "'", int44 == 158);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.toString();
        int int5 = type0.getSize();
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        java.lang.Class<?> wildcardClass55 = value53.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type58, list59, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        java.lang.String str65 = type62.getClassName();
        int int67 = type62.getOpcode(138);
        int int68 = type62.getSize();
        boolean boolean70 = type62.equals((java.lang.Object) 154);
        java.lang.String str71 = type62.getDescriptor();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        java.lang.String str76 = type72.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type72, true);
        java.lang.String str79 = type72.getDescriptor();
        int int81 = type72.getOpcode(151);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier61.newValue(type72);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier61.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier61.newOperation(abstractInsnNode85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "char" + "'", str65, "char");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 138 + "'", int67 == 138);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "C" + "'", str71, "C");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 153 + "'", int81 == 153);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newValue(type41);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type41, list46, true);
        int int50 = type41.getOpcode(100);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier14.newValue(type41);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, list52, true);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str57 = type56.getClassName();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, list58, false);
        boolean boolean61 = type1.equals((java.lang.Object) simpleVerifier60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type63, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str69 = type68.getDescriptor();
        int int70 = type68.getSort();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type68, list71, false);
        int int74 = type68.getSize();
        int int75 = type68.getSort();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type76, false);
        int int80 = type68.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier65.newValue(type68);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier60.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        java.util.List list84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier60.naryOperation(abstractInsnNode83, list84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "byte" + "'", str57, "byte");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lfloat;" + "'", str69, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 158 + "'", int80 == 158);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray31);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "char" + "'", str14, "char");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)C" + "'", str33, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)C" + "'", str34, "(CBFCF)C");
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        java.lang.String str30 = type7.getClassName();
        int int31 = type7.getSort();
        int int33 = type7.getOpcode(148);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        java.lang.String str37 = type34.getClassName();
        int int38 = type34.getSize();
        int int40 = type34.getOpcode(148);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type34, list41, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type47, list48, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 193);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type61, type64, type65, type69, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray76);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray76);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray76);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray76);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray76);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type45, false);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean88 = type86.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type86, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type86, true);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.newValue(type86);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.newValue(type95);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = basicInterpreter0.newOperation(abstractInsnNode97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "byte" + "'", str30, "byte");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 148 + "'", int33 == 148);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "char" + "'", str37, "char");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 148 + "'", int40 == 148);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "char" + "'", str59, "char");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)B" + "'", str77, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)C" + "'", str78, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str79, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)S" + "'", str80, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)J" + "'", str81, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)B" + "'", str82, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(value93);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type75, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier9.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier9.newValue(type84);
        java.lang.String str86 = type84.toString();
        java.lang.String str87 = type84.getDescriptor();
        java.lang.String str88 = type84.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type84, false);
        java.lang.String str91 = type84.toString();
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "C" + "'", str87, "C");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "C" + "'", str91, "C");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        int int2 = type0.getOpcode(0);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) (byte) 100);
        java.lang.String str6 = type3.getClassName();
        boolean boolean8 = type3.equals((java.lang.Object) 177);
        java.lang.String str9 = type3.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass14 = analyzerException12.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        int int17 = type15.getOpcode(114);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray34);
        boolean boolean37 = type3.equals((java.lang.Object) typeArray34);
        int int38 = type3.getSort();
        int int40 = type3.getOpcode(114);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier46.newValue(type47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        java.lang.String str58 = type53.getClassName();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type53, list59, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type53, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type53, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type66, list67, false);
        int int70 = type66.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type66, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("char");
        int int76 = type74.getOpcode(516);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier72.newValue(type74);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newOperation(abstractInsnNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "F" + "'", str9, "F");
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 118 + "'", int17 == 118);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 116 + "'", int40 == 116);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "void" + "'", str58, "void");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 520 + "'", int76 == 520);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        int int85 = type80.getOpcode(96);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier4.newValue(type80);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier4.newValue(type87);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str91 = type90.toString();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier4.newValue(type90);
        org.mockito.asm.Type type93 = type90.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 96 + "'", int85 == 96);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "LCBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;" + "'", str91, "LCBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type93);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.copyOperation(abstractInsnNode9, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.copyOperation(abstractInsnNode51, value76);
        java.lang.Class<?> wildcardClass78 = basicInterpreter0.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        int int59 = type54.getSort();
        java.lang.String str60 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        int int74 = type69.getOpcode(138);
        int int75 = type69.getSize();
        boolean boolean77 = type69.equals((java.lang.Object) 154);
        java.lang.String str78 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier63.newValue(type69);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.copyOperation(abstractInsnNode62, value81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.newOperation(abstractInsnNode83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 138 + "'", int74 == 138);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "C" + "'", str78, "C");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type13.getClassName();
        java.lang.String str15 = type13.toString();
        java.lang.String str16 = type13.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.Type");
        int int21 = type20.getSort();
        int int23 = type20.getOpcode(2048);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("float");
        int int26 = type25.getSize();
        int int27 = type25.getDimensions();
        org.mockito.asm.Type[] typeArray29 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray29);
        boolean boolean31 = type20.equals((java.lang.Object) type25);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier18.newValue(type20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value34 = simpleVerifier18.newOperation(abstractInsnNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2052 + "'", int23 == 2052);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)Lfloat;" + "'", str30, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        boolean boolean84 = type81.equals((java.lang.Object) "I");
        int int86 = type81.getOpcode(8);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list87, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException92);
        java.lang.Class<?> wildcardClass94 = analyzerException93.getClass();
        java.lang.String str95 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass94);
        java.lang.String str96 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass94);
        org.mockito.asm.Type type97 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass94);
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier89.newValue(type97);
        int int99 = type97.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str95, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str96, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertNotNull(value98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        int int79 = type77.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type77);
        org.mockito.asm.Type[] typeArray82 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray82);
        int int84 = type77.getSize();
        java.lang.Class<?> wildcardClass85 = type77.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 101 + "'", int79 == 101);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)C" + "'", str83, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str10 = type9.getDescriptor();
        int int11 = type9.getSort();
        int int12 = type9.getDimensions();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str15 = type14.getDescriptor();
        int int16 = type14.getSort();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type14, list17, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str22 = type21.getDescriptor();
        int int23 = type21.getSort();
        int int24 = type21.getDimensions();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str27 = type26.getDescriptor();
        int int28 = type26.getSort();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type26, list29, true);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier19.newValue(type42);
        java.lang.String str44 = type42.getDescriptor();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, list45, true);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        java.lang.String str50 = type49.getClassName();
        boolean boolean51 = type42.equals((java.lang.Object) type49);
        int int52 = type42.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lfloat;" + "'", str10, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lfloat;" + "'", str15, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lfloat;" + "'", str22, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lfloat;" + "'", str27, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str40, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str41, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str44, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str50, "org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int3 = type2.getDimensions();
        java.lang.String str4 = type2.getInternalName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type6, list7, true);
        java.lang.String str10 = type2.toString();
        org.mockito.asm.Type type11 = type2.getElementType();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value17 = simpleVerifier15.newOperation(abstractInsnNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str10, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(114);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray24);
        java.lang.String str27 = type5.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, list30, true);
        int int34 = type28.getOpcode(169);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        int int37 = type35.getOpcode(101);
        int int39 = type35.getOpcode(191);
        int int40 = type35.getSort();
        java.lang.Class<?> wildcardClass41 = type35.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str43 = type42.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type42, list44, true);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type28, list47, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int53 = type51.getOpcode(167);
        org.mockito.asm.Type type54 = type51.getElementType();
        int int55 = type51.getSort();
        java.lang.String str56 = type51.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier57.newValue(type59);
        int int62 = type59.getOpcode(136);
        int int63 = type59.getSize();
        java.lang.String str64 = type59.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type59, true);
        java.lang.Object obj67 = null;
        boolean boolean68 = type59.equals(obj67);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier49.newValue(type59);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 118 + "'", int7 == 118);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 170 + "'", int34 == 170);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 101 + "'", int37 == 101);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 191 + "'", int39 == 191);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 171 + "'", int53 == 171);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str56, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 140 + "'", int62 == 140);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str64, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier4.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type75, true);
        boolean boolean78 = type44.equals((java.lang.Object) type75);
        int int80 = type44.getOpcode(88);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier4.newValue(type44);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        java.lang.String str85 = type82.getClassName();
        java.lang.String str86 = type82.toString();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier4.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier4.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "char" + "'", str48, "char");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)C" + "'", str67, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 92 + "'", int80 == 92);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "char" + "'", str85, "char");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str20 = type19.getDescriptor();
        java.lang.String str21 = type19.getInternalName();
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier17.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        java.lang.String str26 = type23.getClassName();
        int int28 = type23.getOpcode(138);
        int int29 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier17.newValue(type23);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int33 = type31.getOpcode(48);
        java.lang.String str34 = type31.getClassName();
        java.lang.String str35 = type31.getClassName();
        java.lang.String str36 = type31.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type37, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier6.merge(value30, value64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int69 = type67.getOpcode(113);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        boolean boolean75 = type70.equals((java.lang.Object) 177);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type70, list76, false);
        java.lang.String str79 = type67.toString();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type67);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier6.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier6.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LB;" + "'", str20, "LB;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "char" + "'", str26, "char");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 138 + "'", int28 == 138);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "long" + "'", str63, "long");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 113 + "'", int69 == 113);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "B" + "'", str79, "B");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        int int24 = value23.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("int", (java.lang.Throwable) analyzerException25);
        java.lang.Object obj29 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.ternaryOperation(abstractInsnNode56, value57, value58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter55.merge(value66, value72);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier35.merge(value54, value66);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter30.copyOperation(abstractInsnNode34, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj29, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException76);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("L(LLhi!;;)Lfloat;;", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("short");
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException82);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, list36, true);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        int int42 = type41.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str48 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter43.newValue(type47);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray51);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray51);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier38.newValue(type40);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier38.newValue(type57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException63);
        java.lang.Class<?> wildcardClass65 = analyzerException63.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type68, list69, true);
        java.lang.String str72 = type60.toString();
        java.lang.String str73 = type60.getDescriptor();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier38.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        java.util.List list76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier38.naryOperation(abstractInsnNode75, list76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "I" + "'", str48, "I");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)I" + "'", str52, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)S" + "'", str53, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str54, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str67, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str72, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str73, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        java.lang.Object obj1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str4 = type3.getClassName();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int11 = type9.getOpcode(167);
        org.mockito.asm.Type type12 = type9.getElementType();
        int int13 = type9.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 24);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type44, list45, true);
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type36, list48, false);
        boolean boolean51 = type14.equals((java.lang.Object) type17);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type17, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier54.newValue(type56);
        int int59 = type56.getOpcode(136);
        int int60 = type56.getSize();
        java.lang.String str61 = type56.getInternalName();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type56, list62, false);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier7.newValue(type17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;", obj1, value65);
        java.lang.Class<?> wildcardClass67 = value65.getClass();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "byte" + "'", str4, "byte");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 171 + "'", int11 == 171);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 140 + "'", int59 == 140);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str61, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        java.lang.String str28 = type10.toString();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list29, true);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type32, true);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list35, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        java.util.List list39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = simpleVerifier37.naryOperation(abstractInsnNode38, list39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int30 = type28.getOpcode(48);
        java.lang.String str31 = type28.getClassName();
        java.lang.String str32 = type28.getClassName();
        java.lang.String str33 = type28.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type52, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type34, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type63, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier67.newValue(type68);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.merge(value61, value71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newValue(type74);
        int int77 = type74.getOpcode(24);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "long" + "'", str60, "long");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 24 + "'", int77 == 24);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        org.mockito.asm.Type type3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter4.newValue(type23);
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type23, list26, true);
        boolean boolean29 = type1.equals((java.lang.Object) simpleVerifier28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier28.newOperation(abstractInsnNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        java.lang.String str10 = type8.toString();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list11, true);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type14, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier18.newValue(type44);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        int int53 = type52.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str59 = type58.getDescriptor();
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter54.newValue(type58);
        org.mockito.asm.Type[] typeArray62 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray62);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray62);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier18.newValue(type51);
        int int67 = value66.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier16.unaryOperation(abstractInsnNode17, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str10, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "I" + "'", str59, "I");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)I" + "'", str63, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)S" + "'", str64, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str65, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        java.lang.String str39 = type36.toString();
        int int40 = type36.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray57);
        int int60 = type36.getSort();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier11.newValue(type36);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType("J");
        int int65 = type63.getOpcode(154);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type63, true);
        java.lang.String str68 = type63.getClassName();
        java.lang.String str69 = type63.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type70 = type63.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "C" + "'", str39, "C");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)C" + "'", str59, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 155 + "'", int65 == 155);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "long" + "'", str68, "long");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "J" + "'", str69, "J");
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        java.lang.String str8 = type2.getClassName();
        java.lang.String str9 = type2.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int23 = type21.getOpcode(48);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type25, type28, type29, type33, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type42, false);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier46.newValue(type47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier46.newValue(type49);
        int int54 = type49.getSize();
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type49, list55, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int59 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier20.newValue(type58);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type58, list62, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier64.naryOperation(abstractInsnNode65, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 48 + "'", int23 == 48);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)B" + "'", str41, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str31 = type30.getDescriptor();
        int int32 = type30.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type30, list33, false);
        int int36 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        int int46 = type45.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter47.newValue(type51);
        org.mockito.asm.Type[] typeArray55 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray55);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray55);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray55);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier38.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type44, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier61.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lfloat;" + "'", str31, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "I" + "'", str52, "I");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)I" + "'", str56, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)S" + "'", str57, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str58, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value59);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, false);
        org.mockito.asm.Type type9 = null;
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier8.newValue(type9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        java.lang.Class<?> wildcardClass16 = analyzerException14.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str18 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type38, false);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str19, value44);
        int int46 = value44.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Object) simpleVerifier8, value44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        int int51 = type49.getOpcode(101);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type56, list57, false);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type56, list60, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        int int67 = type63.getSize();
        int int69 = type63.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier62.newValue(type63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier8.copyOperation(abstractInsnNode48, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str18, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str19, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 101 + "'", int51 == 101);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LLB;;" + "'", str54, "LLB;;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 148 + "'", int69 == 148);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(CBFCF)B;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str9 = type8.getDescriptor();
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter4.newValue(type8);
        org.mockito.asm.Type[] typeArray12 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str13 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray12);
        java.lang.String str14 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newValue(type41);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type41, list46, true);
        int int50 = type41.getOpcode(100);
        org.mockito.asm.Type[] typeArray52 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray52);
        org.mockito.asm.Type type55 = type3.getElementType();
        boolean boolean56 = type1.equals((java.lang.Object) type3);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "I" + "'", str9, "I");
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(CBFCF)I" + "'", str13, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;" + "'", str14, "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)F" + "'", str53, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;" + "'", str54, "(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier17.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        java.lang.String str28 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier17.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int32 = type30.getOpcode(48);
        java.lang.String str33 = type30.getClassName();
        java.lang.String str34 = type30.getClassName();
        java.lang.String str35 = type30.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type36, true);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type62, list63, true);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type62, list66, true);
        boolean boolean70 = type30.equals((java.lang.Object) 158);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier17.newValue(type30);
        java.lang.String str72 = type30.getDescriptor();
        int int74 = type30.getOpcode(53);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str28, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Z" + "'", str72, "Z");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 53 + "'", int74 == 53);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.ternaryOperation(abstractInsnNode24, value25, value26, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter23.merge(value34, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.ternaryOperation(abstractInsnNode43, value44, value45, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter42.merge(value53, value59);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier22.merge(value41, value53);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter15.copyOperation(abstractInsnNode21, value53);
        int int63 = value62.getSize();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter13.copyOperation(abstractInsnNode14, value62);
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter9.merge(value64, value65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier7.copyOperation(abstractInsnNode8, value64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        java.lang.String str8 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type17 = type16.getElementType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, list49, true);
        int int53 = type44.getOpcode(100);
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type44, list54, false);
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type16, list57, false);
        java.lang.String str60 = type16.getInternalName();
        int int62 = type16.getOpcode(258);
        java.lang.String str63 = type16.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 102 + "'", int53 == 102);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 262 + "'", int62 == 262);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;" + "'", str63, "L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type13.getClassName();
        java.lang.String str15 = type13.toString();
        java.lang.String str16 = type13.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.Type");
        int int21 = type20.getSort();
        int int23 = type20.getOpcode(2048);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("float");
        int int26 = type25.getSize();
        int int27 = type25.getDimensions();
        org.mockito.asm.Type[] typeArray29 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray29);
        boolean boolean31 = type20.equals((java.lang.Object) type25);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier18.newValue(type20);
        int int33 = value32.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2052 + "'", int23 == 2052);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)Lfloat;" + "'", str30, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        int int8 = type6.getOpcode(101);
        java.lang.String str9 = type6.toString();
        int int10 = type6.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray27);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier4.newValue(type5);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass33 = type32.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier4.newValue(type34);
        int int36 = type34.getDimensions();
        int int38 = type34.getOpcode(197);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)C" + "'", str29, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)I" + "'", str30, "(CBFCF)I");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 201 + "'", int38 == 201);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str26 = type25.getDescriptor();
        int int27 = type25.getSort();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list28, false);
        int int31 = type25.getSize();
        int int32 = type25.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, list33, true);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int40 = type38.getOpcode(48);
        java.lang.String str41 = type38.getClassName();
        java.lang.String str42 = type38.getClassName();
        java.lang.String str43 = type38.getClassName();
        int int44 = type38.getSort();
        java.lang.String str45 = type38.toString();
        java.lang.String str46 = type38.toString();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier35.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        java.util.List list49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier35.naryOperation(abstractInsnNode48, list49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lfloat;" + "'", str26, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 48 + "'", int40 == 48);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "boolean" + "'", str41, "boolean");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Z" + "'", str45, "Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Z" + "'", str46, "Z");
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        java.lang.Class<?> wildcardClass79 = simpleVerifier2.getClass();
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] {};
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray82);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray82);
        int int86 = type1.getOpcode(171);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str80, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str83, "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "()Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;;" + "'", str84, "()Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;;");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 175 + "'", int86 == 175);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = type40.getDescriptor();
        int int43 = type40.getOpcode(110);
        java.lang.String str44 = type40.toString();
        int int46 = type40.getOpcode((-1));
        java.lang.String str47 = type40.getDescriptor();
        java.lang.String str48 = type40.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str41, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 114 + "'", int43 == 114);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str44, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org/mockito/asm/Type" + "'", str48, "org/mockito/asm/Type");
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        boolean boolean7 = type1.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, list10, true);
        java.lang.Class<?> wildcardClass13 = simpleVerifier12.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getInternalName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        java.lang.String str34 = type16.toString();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list35, true);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type38, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type41, false);
        int int47 = type41.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        boolean boolean55 = type50.equals((java.lang.Object) 177);
        int int56 = type50.getSize();
        java.lang.String str57 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier81.newValue(type82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier81.newValue(type84);
        int int89 = type84.getSize();
        int int91 = type84.getOpcode(12);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type84, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        java.util.List list95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier93.naryOperation(abstractInsnNode94, list95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str15, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "B" + "'", str34, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "float" + "'", str87, "float");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 14 + "'", int91 == 14);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier4.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type75, true);
        boolean boolean78 = type44.equals((java.lang.Object) type75);
        int int80 = type44.getOpcode(88);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier4.newValue(type44);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        java.lang.String str85 = type82.getClassName();
        java.lang.String str86 = type82.toString();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier4.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier4.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "char" + "'", str48, "char");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)C" + "'", str67, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 92 + "'", int80 == 92);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "char" + "'", str85, "char");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        boolean boolean12 = type10.equals((java.lang.Object) 81);
        java.lang.String str13 = type10.getInternalName();
        java.lang.String str14 = type10.getClassName();
        java.lang.String str15 = type10.getInternalName();
        java.lang.String str16 = type10.toString();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("J");
        java.lang.String str19 = type18.getClassName();
        int int20 = type18.getSort();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type22, list23, true);
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, list26, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier28.naryOperation(abstractInsnNode29, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str6, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str8, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "long" + "'", str19, "long");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(type22);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        int int27 = type25.getOpcode(101);
        java.lang.String str28 = type25.toString();
        int int29 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type31 = null;
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type31, list32, false);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException40);
        java.lang.Class<?> wildcardClass42 = analyzerException40.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type43, false);
        int int46 = type36.getSort();
        int int47 = type36.getSort();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier34.newValue(type36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier34.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 101 + "'", int27 == 101);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C" + "'", str28, "C");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.newValue(type50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        java.lang.String str62 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        java.lang.String str64 = type63.getDescriptor();
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type63, list65, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type68 = type50.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str59, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str61, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str62, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str64, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int3 = type1.getOpcode(113);
        int int4 = type1.getSize();
        int int6 = type1.getOpcode(107);
        org.mockito.asm.Type type7 = null;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type7, list8, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter14.newValue(type33);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type33, list36, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        int int51 = type45.getSize();
        java.lang.String str52 = type45.toString();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter39.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter39.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        int int59 = type57.getOpcode(101);
        java.lang.String str60 = type57.toString();
        int int61 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter39.newValue(type57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Object) simpleVerifier38, value62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, list66, true);
        java.lang.Class<?> wildcardClass69 = simpleVerifier68.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = type70.getInternalName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier38.newValue(type70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier10.unaryOperation(abstractInsnNode11, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 113 + "'", int3 == 113);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 107 + "'", int6 == 107);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "F" + "'", str52, "F");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 101 + "'", int59 == 101);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str71, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        java.lang.String str26 = type3.toString();
        java.lang.String str27 = type3.toString();
        int int28 = type3.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type29, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type29, list34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        int int46 = type39.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException57.addSuppressed((java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException73);
        boolean boolean75 = type63.equals((java.lang.Object) analyzerException74);
        analyzerException62.addSuppressed((java.lang.Throwable) analyzerException74);
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException62);
        boolean boolean78 = type39.equals((java.lang.Object) analyzerException62);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list79, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        java.lang.String str84 = type83.getClassName();
        java.lang.String str85 = type83.getClassName();
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type83, list86, false);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier36.newValue(type39);
        int int90 = value89.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "B" + "'", str27, "B");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 169 + "'", int46 == 169);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str84, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg.mockito.asm.Type;" + "'", str85, "Lorg.mockito.asm.Type;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str11 = type10.getClassName();
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, true);
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier9.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        java.util.List list17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier9.naryOperation(abstractInsnNode16, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(value15);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        int int14 = type9.getSize();
        java.lang.String str15 = type9.getClassName();
        java.lang.String str16 = type9.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.ternaryOperation(abstractInsnNode24, value25, value26, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter23.merge(value34, value40);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier3.merge(value22, value34);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier3.newValue(type69);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int80 = type78.getOpcode(48);
        java.lang.String str81 = type78.getClassName();
        java.lang.String str82 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier3.newValue(type78);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier3.newValue(type85);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type85, list87, true);
        java.lang.String str90 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 48 + "'", int80 == 48);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "boolean" + "'", str81, "boolean");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "boolean" + "'", str82, "boolean");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        java.lang.Class<?> wildcardClass43 = value41.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier10.newValue(type45);
        java.lang.Object obj47 = null;
        boolean boolean48 = type45.equals(obj47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getReturnType("LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int52 = type50.getOpcode(201);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type50, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = simpleVerifier54.naryOperation(abstractInsnNode55, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str44, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 205 + "'", int52 == 205);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        java.lang.Class<?> wildcardClass24 = type7.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int29 = type27.getOpcode(8);
        int int31 = type27.getOpcode(163);
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type27, list32, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str39 = type38.getDescriptor();
        int int40 = type38.getSort();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, list41, false);
        int int44 = type38.getSize();
        int int45 = type38.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type46, false);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier54.newValue(type55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, true);
        java.lang.String str66 = type61.getClassName();
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type61, list67, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type61, true);
        java.lang.String str72 = type61.toString();
        int int73 = type61.getSort();
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type61, list74, false);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int79 = type77.getOpcode(48);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type82, true);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier84.newValue(type85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("(CBFCF)LB;");
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type88, type90, list91, true);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier84.newValue(type90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LCBFCF)Lorg/mockito/asm/Type;", (java.lang.Object) type46, value94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("Lid;", (java.lang.Object) type25, value94);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 167 + "'", int31 == 167);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lfloat;" + "'", str39, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "void" + "'", str66, "void");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "V" + "'", str72, "V");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 48 + "'", int79 == 48);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "boolean" + "'", str80, "boolean");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        int int59 = type54.getSort();
        java.lang.String str60 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = basicInterpreter0.newOperation(abstractInsnNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str77 = type76.toString();
        int int78 = type76.getSort();
        int int79 = type76.getSize();
        int int80 = type76.getDimensions();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str77, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        java.lang.String str8 = type2.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type17, list18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        int int24 = type22.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type27, type30, type31, type35, type38 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, false);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier48.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier48.newValue(type51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type57 = null;
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, list58, false);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier48.newValue(type56);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier21.newValue(type56);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier20.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type66, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type76);
        int int78 = value77.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier20.copyOperation(abstractInsnNode64, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 101 + "'", int24 == 101);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)B" + "'", str43, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        int int60 = type57.getDimensions();
        int int62 = type57.getOpcode((int) (short) 10);
        int int63 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier55.newValue(type57);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int68 = type65.getOpcode(115);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier55.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier55.copyOperation(abstractInsnNode70, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "byte" + "'", str66, "byte");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 115 + "'", int68 == 115);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.String str23 = type12.toString();
        int int24 = type12.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier25.newValue(type27);
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type27, list29, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lhi!;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException40);
        java.lang.Class<?> wildcardClass45 = analyzerException40.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = type46.getInternalName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("Lhi!;");
        java.lang.String str50 = type49.toString();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type49, list51, false);
        int int54 = type46.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type46, false);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier31.newValue(type46);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str47, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LLhi!;;" + "'", str50, "LLhi!;;");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier10.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSize();
        java.lang.String str30 = type28.toString();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list31, false);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier10.newValue(type27);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("hi!");
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        int int40 = type36.getSort();
        int int41 = type36.getSize();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type36, list42, true);
        org.mockito.asm.Type type45 = type27.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "S" + "'", str30, "S");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lhi!;" + "'", str39, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type45);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        java.lang.Class<?> wildcardClass88 = analyzerException87.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str91 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.lang.String str92 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.lang.String str93 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        int int95 = type94.getDimensions();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier0.newValue(type94);
        java.lang.String str97 = type94.getDescriptor();
        int int99 = type94.getOpcode(135);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str91, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str92, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str93, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str97, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 139 + "'", int99 == 139);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list56, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type50, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type63, list64, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/AnalyzerException");
        int int70 = type68.getOpcode(8);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier66.newValue(type68);
        int int72 = type68.getSize();
        int int73 = type68.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        int int2 = type1.getDimensions();
        java.lang.Object obj4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter5.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter5.copyOperation(abstractInsnNode9, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj4, value50);
        java.lang.Class<?> wildcardClass52 = value50.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type57 = type56.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type57, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        int int69 = type67.getOpcode(114);
        java.lang.Class<?> wildcardClass70 = type67.getClass();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type72, list73, true);
        java.lang.String str76 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier59.newValue(type72);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str53, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str55, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 118 + "'", int69 == 118);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str76, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        boolean boolean54 = type49.equals((java.lang.Object) 177);
        java.lang.String str55 = type49.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException58);
        java.lang.Class<?> wildcardClass60 = analyzerException58.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        int int63 = type61.getOpcode(114);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type65, type68, type69, type73, type76 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray80);
        boolean boolean83 = type49.equals((java.lang.Object) typeArray80);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type49);
        java.lang.String str85 = type49.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = type49.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "F" + "'", str55, "F");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 118 + "'", int63 == 118);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)B" + "'", str81, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "F" + "'", str85, "F");
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        java.lang.String str30 = type7.toString();
        java.lang.String str31 = type7.toString();
        int int32 = type7.getSize();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, list33, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        java.lang.String str39 = type37.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B" + "'", str30, "B");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str39, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type22 = type21.getElementType();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, list23, false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType("C");
        java.lang.String str28 = type27.toString();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier25.newValue(type27);
        int int31 = type27.getOpcode(105);
        java.lang.String str32 = type27.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C" + "'", str28, "C");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 105 + "'", int31 == 105);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "char" + "'", str32, "char");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        int int9 = type3.getSize();
        java.lang.String str10 = type3.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LB;" + "'", str10, "LB;");
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lfloat;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type3 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray4);
        java.lang.String str6 = type1.toString();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass36 = analyzerException34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type39, list40, true);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type31, list43, false);
        boolean boolean46 = type9.equals((java.lang.Object) type12);
        java.lang.String str47 = type9.getClassName();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, list48, true);
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list51, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        java.util.List list55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value56 = simpleVerifier53.naryOperation(abstractInsnNode54, list55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(LLhi!;;)Lfloat;" + "'", str5, "(LLhi!;;)Lfloat;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lfloat;" + "'", str6, "Lfloat;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "void" + "'", str47, "void");
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type4, list40, false);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSort();
        int int46 = type43.getSize();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type43, list47, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str52 = type51.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int56 = type54.getOpcode(8);
        int int58 = type54.getOpcode(163);
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type54, list59, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type54, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type64 = type4.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 167 + "'", int58 == 167);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        int int9 = type2.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException25);
        boolean boolean41 = type2.equals((java.lang.Object) analyzerException25);
        java.lang.Class<?> wildcardClass42 = analyzerException25.getClass();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass42);
        int int44 = type43.getDimensions();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type43, list45, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = simpleVerifier47.newOperation(abstractInsnNode48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 169 + "'", int9 == 169);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, true);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier22.newValue(type30);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier22.newValue(type37);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier39.newValue(type41);
        int int44 = type41.getOpcode(136);
        int int45 = type41.getSize();
        int int46 = type41.getSort();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier22.newValue(type41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException50);
        java.lang.Class<?> wildcardClass52 = analyzerException50.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier22.newValue(type57);
        java.lang.String str59 = type57.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 140 + "'", int44 == 140);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str54, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str55, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str56, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str59, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type36, false);
        int int39 = type19.getDimensions();
        java.lang.String str40 = type19.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str40, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("B");
        int int3 = type2.getSize();
        int int4 = type2.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        java.lang.Object obj19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.ternaryOperation(abstractInsnNode46, value47, value48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter45.merge(value56, value62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier25.merge(value44, value56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter20.copyOperation(abstractInsnNode24, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj19, value65);
        java.lang.Class<?> wildcardClass67 = value65.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier17.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier17.newValue(type71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) type2, value73);
        java.lang.String str76 = type2.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "B" + "'", str76, "B");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        java.lang.Throwable[] throwableArray55 = analyzerException54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = analyzerException54.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: F: expected 1.0, but found .", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)[Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.Throwable[] throwableArray64 = analyzerException63.getSuppressed();
        analyzerException61.addSuppressed((java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("J", (java.lang.Throwable) analyzerException63);
        java.lang.String str67 = analyzerException63.toString();
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str67, "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(CBFCF)D");
        org.mockito.asm.Type type3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        int int7 = type5.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type5, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        java.lang.String str17 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass15);
        java.lang.String str18 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str20 = type19.toString();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier10.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)L(CBFCF)B;", (java.lang.Object) type2, value21);
        java.lang.String str23 = analyzerException22.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 101 + "'", int7 == 101);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str17, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str18, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)B;: expected D, but found Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str23, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)B;: expected D, but found Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        java.lang.String str9 = type4.getClassName();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list10, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str15 = type14.getDescriptor();
        java.lang.String str16 = type14.getInternalName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier12.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        java.lang.Class<?> wildcardClass45 = value43.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        java.lang.String str56 = type53.getClassName();
        java.lang.String str57 = type53.getClassName();
        java.lang.String str58 = type53.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type59, true);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter49.newValue(type53);
        java.lang.String str85 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type53);
        java.lang.String str87 = type53.toString();
        java.lang.String str88 = type53.toString();
        int int90 = type53.getOpcode(61);
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type53, list91, true);
        int int94 = type53.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LB;" + "'", str15, "LB;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str46, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Z" + "'", str87, "Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Z" + "'", str88, "Z");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 61 + "'", int90 == 61);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        java.lang.String str28 = type10.toString();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list29, true);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type32, true);
        org.mockito.asm.Type type35 = type8.getElementType();
        java.lang.String str36 = type8.toString();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list37, false);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str42 = type41.getDescriptor();
        int int43 = type41.getSort();
        int int44 = type41.getDimensions();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str47 = type46.getDescriptor();
        int int48 = type46.getSort();
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type46, list49, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getDimensions();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str59 = type58.getDescriptor();
        int int60 = type58.getSort();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type58, list61, true);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier51.newValue(type58);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        int int67 = type65.getOpcode(101);
        java.lang.String str68 = type65.toString();
        int int69 = type65.getSize();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray86);
        int int89 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.newValue(type65);
        int int91 = type65.getSort();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier39.newValue(type65);
        int int93 = value92.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str36, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lfloat;" + "'", str47, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lfloat;" + "'", str59, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 101 + "'", int67 == 101);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)C" + "'", str88, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        java.lang.String str7 = type6.getClassName();
        java.lang.String str8 = type6.getDescriptor();
        org.mockito.asm.Type type9 = type6.getElementType();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        int int15 = type13.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value16 = simpleVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        boolean boolean22 = type17.equals((java.lang.Object) 177);
        java.lang.String str23 = type17.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        int int31 = type29.getOpcode(114);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type33, type36, type37, type41, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray48);
        boolean boolean51 = type17.equals((java.lang.Object) typeArray48);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray48);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray48);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray48);
        org.mockito.asm.Type type55 = type9.getElementType();
        java.lang.String str56 = type9.getClassName();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str7, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 101 + "'", int15 == 101);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "F" + "'", str23, "F");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 118 + "'", int31 == 118);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)B" + "'", str49, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str50, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)C" + "'", str52, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)Lbyte;" + "'", str53, "(CBFCF)Lbyte;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str54, "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "mockito.asm.tree.analysis.AnalyzerException" + "'", str56, "mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        java.lang.String str8 = type2.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException12.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type17, list18, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int23 = type22.getDimensions();
        java.lang.String str24 = type22.getDescriptor();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type26, false);
        java.lang.String str29 = type22.toString();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str32 = type31.getInternalName();
        java.lang.String str33 = type31.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException36);
        java.lang.Class<?> wildcardClass38 = analyzerException37.getClass();
        java.lang.String str39 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, list45, true);
        java.lang.Class<?> wildcardClass48 = simpleVerifier47.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str52 = type51.getDescriptor();
        int int53 = type51.getSort();
        int int54 = type51.getSize();
        java.lang.String str55 = type51.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type51, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 193);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        java.lang.String str82 = type79.getClassName();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type68, type71, type72, type76, type79 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray83);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray83);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray83);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray83);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray83);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray83);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray83);
        int int93 = type2.getDimensions();
        java.lang.String str94 = type2.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "LLB;" + "'", str24, "LLB;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "LLB;" + "'", str29, "LLB;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str32, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str33, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str39, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str40, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str41, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lfloat;" + "'", str52, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)B" + "'", str84, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(CBFCF)C" + "'", str85, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str86, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)S" + "'", str87, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)Lfloat;" + "'", str88, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str89, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str90, "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)LLB;" + "'", str91, "(CBFCF)LLB;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)Lfloat;" + "'", str92, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "float" + "'", str94, "float");
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        int int14 = type10.getOpcode((int) (byte) 10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int17 = type15.getOpcode(48);
        java.lang.String str18 = type15.getClassName();
        java.lang.String str19 = type15.getClassName();
        java.lang.String str20 = type15.getClassName();
        int int21 = type15.getSort();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type15, list22, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value27 = simpleVerifier24.naryOperation(abstractInsnNode25, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str6 = type5.getDescriptor();
        int int7 = type5.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type8, list9, false);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list12, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        java.lang.String str40 = type17.toString();
        java.lang.String str41 = type17.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier16.newValue(type17);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("hi!");
        int int45 = type44.getSize();
        int int46 = type44.getSize();
        int int47 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier16.newValue(type44);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType("D");
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier16.newValue(type50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        java.util.List list53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value54 = simpleVerifier16.naryOperation(abstractInsnNode52, list53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "LLB;;" + "'", str6, "LLB;;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "byte" + "'", str41, "byte");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        int int43 = type39.getOpcode(191);
        int int44 = type39.getSort();
        java.lang.Class<?> wildcardClass45 = type39.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier38.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier38.newOperation(abstractInsnNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 191 + "'", int43 == 191);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str47, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        int int43 = type42.getDimensions();
        java.lang.String str44 = type42.getInternalName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str50 = type49.getDescriptor();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter45.newValue(type49);
        org.mockito.asm.Type[] typeArray53 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray53.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str58 = type57.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type57, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/Type" + "'", str44, "org/mockito/asm/Type");
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "I" + "'", str50, "I");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)I" + "'", str54, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str58, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter7.copyOperation(abstractInsnNode13, value45);
        int int55 = value45.getSize();
        int int56 = value45.getSize();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode6, value45);
        int int58 = value45.getSize();
        int int59 = value45.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, list7, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier10.newValue(type11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        int int18 = type17.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter19.newValue(type23);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier10.newValue(type16);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        java.lang.String str38 = type32.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        int int46 = type44.getOpcode(114);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray63);
        boolean boolean66 = type32.equals((java.lang.Object) typeArray63);
        java.lang.String str67 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier10.newValue(type32);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier10.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getReturnType("S");
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier10.newValue(type73);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier9.newValue(type73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        java.util.List list77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier9.naryOperation(abstractInsnNode76, list77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101 + "'", int13 == 101);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)I" + "'", str28, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)S" + "'", str29, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str30, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 118 + "'", int46 == 118);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.SHORT_TYPE;
        int int35 = type34.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter36.newValue(type40);
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray44);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.newValue(type33);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        int int67 = type49.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type49, true);
        org.mockito.asm.Type type70 = null;
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type70, list71, false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier73.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "I" + "'", str41, "I");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)I" + "'", str45, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)S" + "'", str46, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str47, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter6.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter6, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Class<?> wildcardClass22 = analyzerException19.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type23, list24, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        int int34 = type32.getOpcode(114);
        java.lang.Class<?> wildcardClass35 = type32.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        int int40 = type39.getSize();
        int int41 = type39.getDimensions();
        org.mockito.asm.Type[] typeArray43 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray43);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray43);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, list46, false);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException71);
        java.lang.Class<?> wildcardClass73 = analyzerException71.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type76, list77, true);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type68, list80, false);
        int int83 = type68.getDimensions();
        int int84 = type68.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        analyzerException88.addSuppressed((java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException91);
        boolean boolean94 = type68.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier48.newValue(type68);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 118 + "'", int34 == 118);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.asm.Type" + "'", str37, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lfloat;" + "'", str44, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)Lorg/mockito/asm/Type;" + "'", str45, "(CBFCF)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list9, false);
        int int12 = type6.getSize();
        int int13 = type6.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type14, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int19 = type17.getOpcode(48);
        java.lang.String str20 = type17.getClassName();
        java.lang.String str21 = type17.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type17, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        int int26 = type25.getSize();
        java.lang.String str27 = type25.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type25, true);
        java.lang.String str32 = type3.toString();
        int int33 = type3.getDimensions();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list34, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        boolean boolean42 = type37.equals((java.lang.Object) 177);
        java.lang.String str43 = type37.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException46);
        java.lang.Class<?> wildcardClass48 = analyzerException46.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        int int51 = type49.getOpcode(114);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray68);
        boolean boolean71 = type37.equals((java.lang.Object) typeArray68);
        int int72 = type37.getSort();
        int int74 = type37.getOpcode(114);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type37, list75, true);
        int int78 = type3.getSize();
        int int79 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str32, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "F" + "'", str43, "F");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 118 + "'", int51 == 118);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 116 + "'", int74 == 116);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str3 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type2);
        int int5 = type2.getDimensions();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.BasicValue;" + "'", str3, "Lorg.mockito.asm.tree.analysis.BasicValue;");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.toString();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type77, false);
        int int82 = type75.getSize();
        int int83 = type75.getSize();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "J" + "'", str78, "J");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        int int13 = type1.getSort();
        int int15 = type1.getOpcode((int) 'a');
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int18 = type17.getSort();
        org.mockito.asm.Type type19 = type17.getElementType();
        java.lang.String str20 = type19.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type27, list28, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = type36.getElementType();
        java.lang.String str38 = type37.getClassName();
        java.lang.String str39 = type37.getDescriptor();
        org.mockito.asm.Type type40 = type37.getElementType();
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier30.newValue(type40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier30.newValue(type43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str47 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier30.newValue(type46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.unaryOperation(abstractInsnNode23, value48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "g.mockito.asm.tree.analysis.SimpleVerifier" + "'", str20, "g.mockito.asm.tree.analysis.SimpleVerifier");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str38, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        java.lang.String str54 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier28.newValue(type31);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("LLg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Object) value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        boolean boolean69 = type64.equals((java.lang.Object) 177);
        int int70 = type64.getSize();
        java.lang.String str71 = type64.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.ternaryOperation(abstractInsnNode75, value76, value77, value78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter86 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter86.copyOperation(abstractInsnNode87, value88);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter86.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter74.merge(value85, value91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter58.copyOperation(abstractInsnNode73, value92);
        int int94 = value92.getSize();
        int int95 = value92.getSize();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier4.merge(value55, value92);
        java.lang.Class<?> wildcardClass97 = value96.getClass();
        java.lang.String str98 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass97);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "byte" + "'", str54, "byte");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "F" + "'", str71, "F");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str98, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("C");
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type5, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getSort();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list15, false);
        int int18 = type12.getSize();
        int int19 = type12.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type20, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int25 = type23.getOpcode(48);
        java.lang.String str26 = type23.getClassName();
        java.lang.String str27 = type23.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type23, list28, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier31.newValue(type33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        java.lang.String str40 = type37.getClassName();
        int int42 = type37.getOpcode(138);
        int int43 = type37.getSize();
        boolean boolean45 = type37.equals((java.lang.Object) 154);
        java.lang.String str46 = type37.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier31.newValue(type37);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int52 = type50.getOpcode(48);
        java.lang.String str53 = type50.getClassName();
        java.lang.String str54 = type50.getClassName();
        java.lang.String str55 = type50.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type74, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type56, true);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str82 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier80.newValue(type81);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str86 = type85.getDescriptor();
        int int87 = type85.getSort();
        int int88 = type85.getDimensions();
        int int90 = type85.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier80.newValue(type85);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier30.merge(value49, value91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier8.copyOperation(abstractInsnNode9, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C" + "'", str6, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lfloat;" + "'", str13, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "char" + "'", str40, "char");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 138 + "'", int42 == 138);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 48 + "'", int52 == 48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "long" + "'", str82, "long");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lfloat;" + "'", str86, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 14 + "'", int90 == 14);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        int int19 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier17.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;: expected null, but found .");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.lang.String str30 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        int int34 = type32.getOpcode(262);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type32, list35, false);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier17.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        java.util.List list40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = simpleVerifier17.naryOperation(abstractInsnNode39, list40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str29, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str30, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 266 + "'", int34 == 266);
        org.junit.Assert.assertNotNull(value38);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter6.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter6, value18);
        java.lang.Throwable[] throwableArray20 = analyzerException19.getSuppressed();
        java.lang.Throwable[] throwableArray21 = analyzerException19.getSuppressed();
        java.lang.Class<?> wildcardClass22 = analyzerException19.getClass();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass22);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type23, list24, false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list29, true);
        java.lang.Class<?> wildcardClass32 = type27.getClass();
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = type34.getElementType();
        java.lang.String str36 = type35.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        int int60 = type55.getSort();
        java.lang.String str61 = type55.getDescriptor();
        boolean boolean63 = type55.equals((java.lang.Object) 179);
        int int64 = type55.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        int int68 = type66.getOpcode(101);
        java.lang.String str69 = type66.toString();
        int int70 = type66.getSize();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) 151);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        java.lang.String str86 = type83.getClassName();
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type72, type75, type76, type80, type83 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray87);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray87);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray87);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray87);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray87);
        java.lang.String str94 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str33, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "g.mockito.asm.Type" + "'", str36, "g.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 101 + "'", int68 == 101);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "C" + "'", str69, "C");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)B" + "'", str88, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)C" + "'", str89, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)I" + "'", str90, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)C" + "'", str91, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)Lg/mockito/asm/Type;" + "'", str92, "(CBFCF)Lg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str93, "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str94, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(114);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSize();
        java.lang.String str12 = type10.getDescriptor();
        int int13 = type10.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type15, list16, true);
        java.lang.Class<?> wildcardClass19 = simpleVerifier18.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str23 = type22.getDescriptor();
        int int24 = type22.getSort();
        int int25 = type22.getSize();
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type22, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        int int31 = type29.getOpcode(101);
        int int33 = type29.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type[] typeArray36 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 118 + "'", int7 == 118);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str12, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lfloat;" + "'", str23, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 101 + "'", int31 == 101);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 191 + "'", int33 == 191);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)C" + "'", str37, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)Lorg/mockito/asm/Type;" + "'", str38, "(CBFCF)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.Type type15 = type3.getElementType();
        int int16 = type3.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type28, list29, true);
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type20, list32, false);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int41 = type39.getOpcode(8);
        int int43 = type39.getOpcode(163);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type39, list44, false);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier34.newValue(type39);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type39, false);
        java.lang.String str50 = type39.toString();
        int int51 = type39.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 167 + "'", int43 == 167);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str50, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Class<?> wildcardClass51 = value49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        int int58 = type55.getSize();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type55, list59, true);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list62, false);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        java.lang.String str68 = type65.getClassName();
        int int70 = type65.getOpcode(138);
        int int71 = type65.getSize();
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type72, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier64.newValue(type72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        java.util.List list77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier64.naryOperation(abstractInsnNode76, list77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "char" + "'", str68, "char");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 138 + "'", int70 == 138);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int25 = type23.getOpcode(48);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type28, true);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.unaryOperation(abstractInsnNode22, value32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 48 + "'", int25 == 48);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list8, false);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, list11, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        java.lang.String str17 = type14.getClassName();
        int int18 = type14.getSize();
        int int20 = type14.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier13.newValue(type14);
        int int22 = value21.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "char" + "'", str17, "char");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 148 + "'", int20 == 148);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        int int22 = type17.getSort();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("LCBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        java.lang.String str29 = type25.toString();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)C");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type31, false);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, list34, true);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, list37, false);
        int int41 = type17.getOpcode(528);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "F" + "'", str29, "F");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 532 + "'", int41 == 532);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("I");
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        java.lang.String str19 = type10.toString();
        java.lang.String str20 = type10.toString();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type22, type25, type26, type30, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Class<?> wildcardClass45 = analyzerException43.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type48, list49, true);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type40, list52, false);
        int int55 = type40.getDimensions();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type40, list56, false);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type60 = null;
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, list61, false);
        java.lang.String str64 = type59.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type59, true);
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type10, list67, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier69.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "V" + "'", str19, "V");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "V" + "'", str20, "V");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)B" + "'", str38, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        java.lang.String str56 = type53.getClassName();
        java.lang.String str57 = type53.getClassName();
        java.lang.String str58 = type53.getClassName();
        int int59 = type53.getSort();
        java.lang.String str60 = type53.toString();
        java.lang.String str61 = type53.toString();
        java.lang.String str62 = type53.toString();
        int int63 = type53.getSort();
        java.lang.String str64 = type53.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("float");
        int int67 = type66.getSize();
        int int68 = type66.getDimensions();
        org.mockito.asm.Type[] typeArray70 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray70);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray70);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type75, list76, false);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException83);
        java.lang.Class<?> wildcardClass85 = analyzerException83.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.lang.String str87 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type80, type88, list89, true);
        int int93 = type80.getOpcode(103);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier78.newValue(type80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier30.unaryOperation(abstractInsnNode50, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Z" + "'", str61, "Z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Z" + "'", str62, "Z");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)Lfloat;" + "'", str71, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Z" + "'", str72, "(CBFCF)Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str73, "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str87, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 107 + "'", int93 == 107);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        boolean boolean84 = type81.equals((java.lang.Object) "I");
        int int86 = type81.getOpcode(8);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list87, false);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.newValue(type91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier89.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) 179);
        int int27 = type18.getSize();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        int int30 = type28.getOpcode(101);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type28, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value35 = simpleVerifier33.newOperation(abstractInsnNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 101 + "'", int30 == 101);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "char" + "'", str31, "char");
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type19, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier12.newValue(type44);
        int int48 = type44.getSort();
        java.lang.String str49 = type44.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "long" + "'", str45, "long");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "J" + "'", str49, "J");
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode3, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException34.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter37.copyOperation(abstractInsnNode41, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass35, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException83);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException84);
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException84);
        java.lang.String str87 = analyzerException84.toString();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str36, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: boolean" + "'", str87, "org.mockito.asm.tree.analysis.AnalyzerException: boolean");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        int int4 = type0.getOpcode(0);
        int int5 = type0.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier11.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type18, true);
        java.lang.String str23 = type18.getClassName();
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type18, list24, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type18, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean30 = type18.equals((java.lang.Object) type29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        boolean boolean41 = type36.equals((java.lang.Object) 177);
        java.lang.String str42 = type36.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException45);
        java.lang.Class<?> wildcardClass47 = analyzerException45.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        int int50 = type48.getOpcode(114);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray67);
        boolean boolean70 = type36.equals((java.lang.Object) typeArray67);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray67);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray67);
        org.mockito.asm.Type[] typeArray74 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray74);
        java.lang.String str76 = type29.getClassName();
        int int78 = type29.getOpcode(0);
        int int79 = type29.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type29, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "void" + "'", str23, "void");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "F" + "'", str42, "F");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 118 + "'", int50 == 118);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)I" + "'", str72, "(CBFCF)I");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)I" + "'", str75, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "int" + "'", str76, "int");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        java.lang.Object obj4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter5.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter5.copyOperation(abstractInsnNode9, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj4, value50);
        java.lang.Throwable[] throwableArray52 = analyzerException51.getSuppressed();
        java.lang.Throwable[] throwableArray53 = analyzerException51.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException54);
        java.lang.Throwable[] throwableArray56 = analyzerException55.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException55);
        java.lang.Throwable throwable59 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: I", throwable59);
        analyzerException55.addSuppressed((java.lang.Throwable) analyzerException60);
        java.lang.String str62 = analyzerException55.toString();
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;" + "'", str62, "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        java.lang.String str25 = type23.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Z" + "'", str25, "Z");
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str80 = type79.getDescriptor();
        int int81 = type79.getSort();
        java.lang.String str82 = type79.getDescriptor();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str80, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str82, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier46.newValue(type48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        java.lang.String str55 = type52.getClassName();
        int int57 = type52.getOpcode(138);
        int int58 = type52.getSize();
        boolean boolean60 = type52.equals((java.lang.Object) 154);
        java.lang.String str61 = type52.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier46.newValue(type52);
        java.lang.String str65 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter27.newValue(type52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) analyzerException10, value66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.ternaryOperation(abstractInsnNode76, value77, value78, value79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter87 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter87.copyOperation(abstractInsnNode88, value89);
        org.mockito.asm.Type type91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter87.newValue(type91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter75.merge(value86, value92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode72, value93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException94);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException95);
        java.lang.Throwable[] throwableArray97 = analyzerException10.getSuppressed();
        java.lang.String str98 = analyzerException10.toString();
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "char" + "'", str55, "char");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 138 + "'", int57 == 138);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "char" + "'", str65, "char");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNull(value90);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str98, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str38 = type37.getInternalName();
        java.lang.String str39 = type37.toString();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier32.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        int int59 = type41.getSize();
        int int60 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier32.newValue(type41);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getReturnType("(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier32.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.lang.Object obj67 = null;
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        boolean boolean83 = type78.equals((java.lang.Object) 177);
        int int84 = type78.getSize();
        java.lang.String str85 = type78.toString();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter72.newValue(type78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException89);
        java.lang.Class<?> wildcardClass91 = analyzerException89.getClass();
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass91);
        java.lang.String str93 = type92.toString();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter72.newValue(type92);
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier71.newValue(type92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.tree.analysis.AnalyzerException: LLB", obj67, value95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier32.copyOperation(abstractInsnNode65, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LB;" + "'", str38, "LB;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LLB;;" + "'", str39, "LLB;;");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "F" + "'", str85, "F");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str93, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, list5, true);
        java.lang.Class<?> wildcardClass8 = type3.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter9.merge(value20, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Object) wildcardClass8, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int35 = type33.getOpcode(48);
        java.lang.String str36 = type33.getClassName();
        java.lang.String str37 = type33.getClassName();
        java.lang.String str38 = type33.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type39, true);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)V", (java.lang.Object) analyzerException28, value64);
        java.lang.Throwable[] throwableArray66 = analyzerException28.getSuppressed();
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException84);
        analyzerException75.addSuppressed((java.lang.Throwable) analyzerException84);
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException75);
        java.lang.Throwable[] throwableArray89 = analyzerException88.getSuppressed();
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;", (java.lang.Throwable) analyzerException88);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 48 + "'", int35 == 48);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        int int25 = type12.getSort();
        java.lang.String str26 = type12.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "C" + "'", str26, "C");
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, list14, true);
        java.lang.Class<?> wildcardClass17 = simpleVerifier16.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.lang.String str19 = type18.getInternalName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        java.lang.String str38 = type20.toString();
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list39, true);
        org.mockito.asm.Type type42 = type18.getElementType();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier11.newValue(type18);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        int int48 = type44.getOpcode(191);
        int int49 = type44.getSort();
        java.lang.Class<?> wildcardClass50 = type44.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.String str53 = type52.getInternalName();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier11.newValue(type52);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        boolean boolean67 = type62.equals((java.lang.Object) 177);
        int int68 = type62.getSize();
        java.lang.String str69 = type62.toString();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter56.newValue(type62);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter56.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        int int76 = type74.getOpcode(101);
        java.lang.String str77 = type74.toString();
        int int78 = type74.getSize();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter56.newValue(type74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException83.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter56.newValue(type85);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier11.copyOperation(abstractInsnNode55, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str19, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "B" + "'", str38, "B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 191 + "'", int48 == 191);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str51, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/Type" + "'", str53, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "F" + "'", str69, "F");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 101 + "'", int76 == 101);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "C" + "'", str77, "C");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int54 = type52.getOpcode(48);
        java.lang.String str55 = type52.getClassName();
        java.lang.String str56 = type52.getClassName();
        int int58 = type52.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier22.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str80 = type79.getDescriptor();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter60.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass86 = analyzerException84.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        int int91 = type89.getOpcode(47);
        org.mockito.asm.Type type92 = type89.getElementType();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type89, list93, true);
        java.lang.String str96 = type79.toString();
        java.lang.String str97 = type79.getDescriptor();
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier22.newValue(type79);
        int int99 = type79.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 119 + "'", int58 == 119);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "C" + "'", str80, "C");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 51 + "'", int91 == 51);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "C" + "'", str96, "C");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "C" + "'", str97, "C");
        org.junit.Assert.assertNotNull(value98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getReturnType("(CBFCF)I");
        java.lang.String str14 = type13.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int22 = type20.getOpcode(114);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray39);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type20, list42, true);
        java.lang.String str45 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier11.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        boolean boolean58 = type53.equals((java.lang.Object) 177);
        int int59 = type53.getSize();
        java.lang.String str60 = type53.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter47.newValue(type53);
        java.lang.Object obj62 = null;
        boolean boolean63 = type53.equals(obj62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier11.newValue(type53);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type67 = type66.getElementType();
        int int69 = type66.getOpcode(0);
        java.lang.String str70 = type66.getInternalName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier11.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier11.newOperation(abstractInsnNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 118 + "'", int22 == 118);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str41, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "I" + "'", str45, "I");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "F" + "'", str60, "F");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value5 = simpleVerifier1.newValue(type2);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        int int9 = type8.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.newValue(type14);
        org.mockito.asm.Type[] typeArray18 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray18);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray18);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray18);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier1.newValue(type7);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        java.lang.String str71 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier45.newValue(type48);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier45.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        int int81 = type75.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier45.newValue(type75);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier1.newValue(type75);
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type75, list84, true);
        int int87 = type75.getSort();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)I" + "'", str19, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)S" + "'", str20, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str21, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "byte" + "'", str71, "byte");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 119 + "'", int81 == 119);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass14 = analyzerException12.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        java.lang.String str16 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type27, type30, type31, type35, type38 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, false);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier48.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier48.newValue(type51);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter18.copyOperation(abstractInsnNode25, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        int int77 = value69.getSize();
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter18.copyOperation(abstractInsnNode57, value69);
        int int79 = value69.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C", (java.lang.Object) wildcardClass14, value69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.unaryOperation(abstractInsnNode8, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "I" + "'", str23, "I");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)B" + "'", str43, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int4 = type2.getOpcode(48);
        java.lang.String str5 = type2.getClassName();
        java.lang.String str6 = type2.getClassName();
        java.lang.String str7 = type2.getClassName();
        int int8 = type2.getSort();
        java.lang.String str9 = type2.toString();
        java.lang.String str10 = type2.toString();
        java.lang.String str11 = type2.toString();
        int int12 = type2.getSort();
        java.lang.String str13 = type2.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        int int16 = type15.getSize();
        int int17 = type15.getDimensions();
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray19);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        java.util.List list25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type24, list25, false);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass34 = analyzerException32.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type37, list38, true);
        int int42 = type29.getOpcode(103);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier27.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier27.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Z" + "'", str10, "Z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Z" + "'", str11, "Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)Lfloat;" + "'", str20, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)Z" + "'", str21, "(CBFCF)Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 107 + "'", int42 == 107);
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        java.lang.Object obj2 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        int int30 = type28.getOpcode(101);
        java.lang.String str31 = type28.toString();
        int int32 = type28.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray49);
        int int52 = type28.getSort();
        java.lang.String str53 = type28.toString();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier25.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException61);
        java.lang.Class<?> wildcardClass66 = analyzerException61.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier25.newValue(type67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: char", obj2, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Z", (java.lang.Throwable) analyzerException69);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 101 + "'", int30 == 101);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "C" + "'", str31, "C");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)C" + "'", str51, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "C" + "'", str53, "C");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSort();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        boolean boolean10 = type5.equals((java.lang.Object) 177);
        java.lang.String str11 = type5.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException14);
        java.lang.Class<?> wildcardClass16 = analyzerException14.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        int int19 = type17.getOpcode(114);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray36);
        boolean boolean39 = type5.equals((java.lang.Object) typeArray36);
        int int40 = type5.getSort();
        int int42 = type5.getOpcode(114);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier48.newValue(type49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list61, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type55, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type55, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type68, list69, false);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type68, list72, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        java.util.List list76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier74.naryOperation(abstractInsnNode75, list76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str4, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "F" + "'", str11, "F");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 118 + "'", int19 == 118);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 116 + "'", int42 == 116);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertNotNull(type68);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getDimensions();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type13, list16, true);
        java.lang.String str19 = type8.getDescriptor();
        int int20 = type8.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException25.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier33.merge(value52, value64);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter28.copyOperation(abstractInsnNode32, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass26, value72);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        boolean boolean78 = type8.equals((java.lang.Object) type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type80, false);
        int int83 = type8.getSize();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier6.newValue(type8);
        int int85 = value84.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str27, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "int" + "'", str6, "int");
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("C");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier6.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier37.newValue(type40);
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type40, list45, true);
        int int49 = type40.getOpcode(100);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray51);
        java.lang.String str54 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier6.newValue(type10);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        boolean boolean61 = type56.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type68 = type67.getElementType();
        java.lang.String str69 = type68.getClassName();
        java.lang.String str70 = type68.getDescriptor();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type68, list71, false);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier6.newValue(type56);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier6.newValue(type75);
        int int77 = value76.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;", (java.lang.Object) throwableArray5, value76);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 102 + "'", int49 == 102);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)F" + "'", str52, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)F" + "'", str53, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str69, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter6.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier16.merge(value35, value47);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter6.copyOperation(abstractInsnNode15, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier80.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter6.copyOperation(abstractInsnNode57, value82);
        java.lang.Class<?> wildcardClass84 = basicInterpreter6.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        int int86 = type85.getSize();
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type85, list87, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.mockito.asm.Type" + "'", str5, "org.mockito.asm.Type");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        int int3 = type2.getSize();
        java.lang.String str4 = type2.toString();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue");
        java.lang.Throwable[] throwableArray12 = analyzerException11.getSuppressed();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type19, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str49 = type48.getDescriptor();
        int int50 = type48.getSort();
        int int51 = type48.getDimensions();
        int int53 = type48.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier43.newValue(type48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C;", (java.lang.Object) throwableArray12, value54);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value56 = simpleVerifier7.unaryOperation(abstractInsnNode8, value54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "S" + "'", str4, "S");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "long" + "'", str45, "long");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lfloat;" + "'", str49, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 14 + "'", int53 == 14);
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean25 = type13.equals((java.lang.Object) type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type27, type30, type31, type35, type38 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, false);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier48.newValue(type49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier48.newValue(type51);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int57 = type56.getSize();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        int int60 = type58.getOpcode(101);
        java.lang.String str61 = type58.toString();
        int int62 = type58.getSort();
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type58, list63, false);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier48.newValue(type56);
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type56, list67, false);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("float");
        int int72 = type71.getSize();
        boolean boolean73 = type13.equals((java.lang.Object) type71);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, list74, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier76.newOperation(abstractInsnNode77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)B" + "'", str43, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 101 + "'", int60 == 101);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.toString();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type77, false);
        int int82 = type77.getSort();
        org.mockito.asm.Type type83 = null;
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type83, list84, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier86.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "J" + "'", str78, "J");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        int int9 = type2.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException25);
        boolean boolean41 = type2.equals((java.lang.Object) analyzerException25);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list42, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        java.lang.String str51 = type46.getDescriptor();
        java.lang.String str52 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier44.newValue(type46);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.SimpleVerifier");
        int int56 = type55.getDimensions();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier44.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value59 = simpleVerifier44.newOperation(abstractInsnNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 169 + "'", int9 == 169);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "V" + "'", str51, "V");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "V" + "'", str52, "V");
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException34);
        boolean boolean36 = type24.equals((java.lang.Object) analyzerException35);
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException35);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException23);
        boolean boolean39 = type0.equals((java.lang.Object) analyzerException23);
        int int40 = type0.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, false);
        int int45 = type42.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        int int12 = type9.getOpcode(136);
        int int13 = type9.getSize();
        java.lang.String str14 = type9.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier16.newOperation(abstractInsnNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 140 + "'", int12 == 140);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str14, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        int int10 = type5.getOpcode(138);
        int int11 = type5.getSize();
        boolean boolean13 = type5.equals((java.lang.Object) 154);
        java.lang.String str14 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        java.lang.String str17 = type5.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        java.lang.Object obj30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.ternaryOperation(abstractInsnNode57, value58, value59, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter56.merge(value67, value73);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier36.merge(value55, value67);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter31.copyOperation(abstractInsnNode35, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj30, value76);
        java.lang.Class<?> wildcardClass78 = value76.getClass();
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier28.newValue(type80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.SHORT_TYPE;
        int int83 = type82.getSize();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier28.newValue(type82);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier28.newValue(type86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("short", (java.lang.Object) str17, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("rg.mockito.asm.tree.analysis.AnalyzerException: LLB", (java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;", (java.lang.Throwable) analyzerException88);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 138 + "'", int10 == 138);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "C" + "'", str14, "C");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "char" + "'", str17, "char");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str79, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type22, true);
        java.lang.String str27 = type22.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type22, list28, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str33 = type32.getDescriptor();
        java.lang.String str34 = type32.getInternalName();
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier30.newValue(type32);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getSort();
        int int40 = type37.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type37, false);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type37);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        java.lang.String str51 = type46.getClassName();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type46, list52, true);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str57 = type56.getDescriptor();
        java.lang.String str58 = type56.getInternalName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier54.newValue(type56);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str62 = type61.getDescriptor();
        int int63 = type61.getSort();
        int int64 = type61.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type61, false);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter0.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.newOperation(abstractInsnNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "LB;" + "'", str33, "LB;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "B" + "'", str34, "B");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lfloat;" + "'", str38, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "void" + "'", str51, "void");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "LB;" + "'", str57, "LB;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "B" + "'", str58, "B");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lfloat;" + "'", str62, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J");
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier10.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier10.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        java.lang.String str12 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        int int47 = type32.getDimensions();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type52 = null;
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, list53, false);
        java.lang.String str56 = type51.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type51, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int61 = type59.getOpcode(48);
        java.lang.String str62 = type59.getClassName();
        java.lang.String str63 = type59.getClassName();
        java.lang.String str64 = type59.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.Type[] typeArray81 = new org.mockito.asm.Type[] { type66, type69, type70, type74, type77 };
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type83, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type65, true);
        int int91 = type59.getOpcode(171);
        int int92 = type59.getSize();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type59, list93, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier95.naryOperation(abstractInsnNode96, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 48 + "'", int61 == 48);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)B" + "'", str82, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 171 + "'", int91 == 171);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list61, true);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 193);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean87 = type85.equals((java.lang.Object) (byte) 100);
        java.lang.String str88 = type85.getClassName();
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type74, type77, type78, type82, type85 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray89);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray89);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray89);
        int int95 = type53.getSort();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier49.newValue(type53);
        int int97 = value96.getSize();
        int int98 = value96.getSize();
        int int99 = value96.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "float" + "'", str88, "float");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)B" + "'", str90, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)C" + "'", str91, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str92, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)S" + "'", str93, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(CBFCF)I" + "'", str94, "(CBFCF)I");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 5 + "'", int95 == 5);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier8.newOperation(abstractInsnNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        boolean boolean23 = type18.equals((java.lang.Object) 177);
        java.lang.String str24 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier17.newValue(type18);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier17.newValue(type26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        int int46 = type41.getOpcode(138);
        int int47 = type41.getSize();
        boolean boolean49 = type41.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier36.newValue(type41);
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type41, list51, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        int int56 = type54.getOpcode(101);
        int int58 = type54.getOpcode(191);
        int int59 = type54.getSort();
        java.lang.Class<?> wildcardClass60 = type54.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int64 = type63.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type63, false);
        java.lang.String str67 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier53.newValue(type61);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier17.copyOperation(abstractInsnNode28, value68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 138 + "'", int46 == 138);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 101 + "'", int56 == 101);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 191 + "'", int58 == 191);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str67, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier7.newValue(type82);
        java.lang.Class<?> wildcardClass84 = simpleVerifier7.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] {};
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray87);
        org.mockito.asm.Type type89 = type86.getElementType();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type89);
        int int91 = value90.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str85, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str88, "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        boolean boolean78 = type75.equals((java.lang.Object) (short) 10);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType("L(CBFCF)I;");
        java.lang.String str81 = type80.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type80, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = type75.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "L(CBFCF)I;" + "'", str81, "L(CBFCF)I;");
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Li!;");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int6 = type4.getOpcode(113);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        boolean boolean12 = type7.equals((java.lang.Object) 177);
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list13, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, list18, true);
        java.lang.String str21 = type17.getClassName();
        java.lang.String str22 = type17.getDescriptor();
        int int23 = type17.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, list26, false);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier15.newValue(type17);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type17, false);
        java.lang.String str32 = type1.toString();
        int int33 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLi!;;" + "'", str2, "LLi!;;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 113 + "'", int6 == 113);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Z" + "'", str22, "Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "LLi!;;" + "'", str32, "LLi!;;");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type14, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.Type type19 = type18.getElementType();
        org.mockito.asm.Type type20 = type19.getElementType();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type19, list21, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        java.lang.String str29 = type26.getClassName();
        int int31 = type26.getOpcode(138);
        int int32 = type26.getSize();
        boolean boolean34 = type26.equals((java.lang.Object) 154);
        java.lang.String str35 = type26.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        java.lang.String str38 = type26.getClassName();
        java.lang.String str39 = type26.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type26, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newOperation(abstractInsnNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str12, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str13, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "char" + "'", str29, "char");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 138 + "'", int31 == 138);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "char" + "'", str38, "char");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "C" + "'", str39, "C");
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        boolean boolean41 = type4.equals((java.lang.Object) type7);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray62);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray62);
        int int67 = type1.getSort();
        java.lang.String str68 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)V" + "'", str65, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)LLB;;" + "'", str66, "(CBFCF)LLB;;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "LB;" + "'", str68, "LB;");
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, list24, true);
        java.lang.Class<?> wildcardClass27 = simpleVerifier26.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str31 = type30.getDescriptor();
        int int32 = type30.getSort();
        int int33 = type30.getSize();
        java.lang.String str34 = type30.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type30, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        int int39 = type37.getOpcode(101);
        int int41 = type37.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException53);
        boolean boolean55 = type43.equals((java.lang.Object) analyzerException54);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier36.newValue(type43);
        java.lang.String str57 = type43.getDescriptor();
        java.lang.String str58 = type43.getDescriptor();
        java.lang.String str59 = type43.getDescriptor();
        org.mockito.asm.Type[] typeArray61 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray61);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type43, list63, false);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type75, list76, true);
        org.mockito.asm.Type type79 = type75.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str86 = type85.getDescriptor();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier80.newValue(type85);
        boolean boolean89 = type79.equals((java.lang.Object) type85);
        java.lang.String str90 = type85.getDescriptor();
        java.lang.String str91 = type85.getDescriptor();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier65.newValue(type85);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = type85.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lfloat;" + "'", str31, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 101 + "'", int39 == 101);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 191 + "'", int41 == 191);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "F" + "'", str58, "F");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "F" + "'", str59, "F");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)F" + "'", str62, "(CBFCF)F");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "I" + "'", str86, "I");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "I" + "'", str90, "I");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "I" + "'", str91, "I");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = type6.getElementType();
        org.mockito.asm.Type type16 = type6.getElementType();
        int int18 = type6.getOpcode(25);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 29 + "'", int18 == 29);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        int int7 = type4.getSort();
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray9);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str13 = type12.toString();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type15, true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier19.newValue(type20);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        java.lang.String str27 = type24.getClassName();
        int int29 = type24.getOpcode(138);
        int int30 = type24.getSize();
        boolean boolean32 = type24.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier19.newValue(type24);
        int int35 = type24.getOpcode(0);
        int int37 = type24.getOpcode(0);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray39);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str13, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "char" + "'", str27, "char");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 138 + "'", int29 == 138);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)C" + "'", str40, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str41, "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)I" + "'", str42, "(CBFCF)I");
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        java.lang.Object obj20 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier26.merge(value45, value57);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter21.copyOperation(abstractInsnNode25, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj20, value66);
        java.lang.Class<?> wildcardClass68 = value66.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier18.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier18.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type73, true);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSort();
        java.lang.String str80 = type77.getDescriptor();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type77, list81, true);
        java.lang.String str84 = type4.toString();
        int int85 = type4.getSize();
        java.lang.String str86 = type4.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "void" + "'", str78, "void");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "V" + "'", str80, "V");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Z" + "'", str84, "Z");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Z" + "'", str86, "Z");
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, true);
        java.lang.String str61 = type56.getClassName();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type56, list62, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str67 = type66.getDescriptor();
        java.lang.String str68 = type66.getInternalName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier64.newValue(type66);
        java.lang.String str70 = type66.getClassName();
        java.lang.String str71 = type66.getDescriptor();
        java.lang.String str72 = type66.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type66, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        java.util.List list76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier74.naryOperation(abstractInsnNode75, list76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str51, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "void" + "'", str61, "void");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LB;" + "'", str67, "LB;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "B" + "'", str68, "B");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LB;" + "'", str71, "LB;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LB;" + "'", str72, "LB;");
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type75, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier9.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = type84.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier9.newValue(type84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier7.copyOperation(abstractInsnNode8, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "float" + "'", str87, "float");
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        java.lang.Class<?> wildcardClass26 = type0.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type28 = type27.getElementType();
        org.mockito.asm.Type type29 = type28.getElementType();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass34 = analyzerException32.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type36 = type35.getElementType();
        java.lang.String str37 = type36.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        int int43 = type41.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier40.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        java.lang.String str51 = type45.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        int int59 = type57.getOpcode(114);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type61, type64, type65, type69, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray76);
        boolean boolean79 = type45.equals((java.lang.Object) typeArray76);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray76);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray76);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray76);
        java.lang.String str83 = type36.getDescriptor();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list84, false);
        java.lang.String str87 = type28.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str37, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 101 + "'", int43 == 101);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "F" + "'", str51, "F");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 118 + "'", int59 == 118);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)B" + "'", str77, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)C" + "'", str80, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lbyte;" + "'", str81, "(CBFCF)Lbyte;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "g.mockito.asm.Type" + "'", str87, "g.mockito.asm.Type");
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lhi!;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException60);
        java.lang.Class<?> wildcardClass65 = analyzerException60.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str67 = type66.getInternalName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("Lhi!;");
        java.lang.String str70 = type69.toString();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type69, list71, false);
        int int74 = type66.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type66, false);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier51.newValue(type66);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str67, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "LLhi!;;" + "'", str70, "LLhi!;;");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: ()L(CBFCF)S;");
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier45.newValue(type47);
        java.lang.String str49 = type47.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)S" + "'", str49, "(CBFCF)S");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = type53.getElementType();
        org.mockito.asm.Type type55 = type54.getElementType();
        java.lang.String str56 = type54.getClassName();
        org.mockito.asm.Type type57 = type54.getElementType();
        java.lang.String str58 = type57.getDescriptor();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "g.mockito.asm.tree.analysis.BasicValue" + "'", str56, "g.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lmockito/asm/tree/analysis/BasicValue;" + "'", str58, "Lmockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str80 = type79.getDescriptor();
        int int81 = type79.getSort();
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type79, list82, false);
        int int85 = type79.getSize();
        int int86 = type79.getSort();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type87, false);
        int int90 = type79.getSort();
        int int91 = type79.getSize();
        java.util.List list92 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type79, list92, true);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier94.newValue(type96);
        java.lang.String str98 = type96.getDescriptor();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lfloat;" + "'", str80, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str98, "Lrg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException29);
        boolean boolean31 = type19.equals((java.lang.Object) analyzerException30);
        java.lang.String str32 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier18.newValue(type19);
        int int34 = value33.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.copyOperation(abstractInsnNode7, value33);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        java.lang.String str42 = type39.getClassName();
        java.lang.String str43 = type39.getClassName();
        java.lang.String str44 = type39.getClassName();
        int int45 = type39.getSort();
        java.lang.String str46 = type39.toString();
        java.lang.String str47 = type39.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode55, value76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter48.copyOperation(abstractInsnNode52, value76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) type39, value76);
        java.lang.String str80 = type39.toString();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = type39.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Z" + "'", str46, "Z");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Z" + "'", str47, "Z");
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Z" + "'", str80, "Z");
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.getInternalName();
        java.lang.Object obj4 = null;
        boolean boolean5 = type2.equals(obj4);
        org.mockito.asm.Type type6 = type2.getElementType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass34 = analyzerException32.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type37, true);
        int int41 = type37.getOpcode(8192);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type37, list42, false);
        java.lang.String str45 = type37.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!" + "'", str3, "i!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "char" + "'", str10, "char");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)C" + "'", str29, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8196 + "'", int41 == 8196);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ldouble;");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        java.lang.String str44 = type6.toString();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        java.lang.String str51 = type45.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        int int59 = type57.getOpcode(114);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type61, type64, type65, type69, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray76);
        boolean boolean79 = type45.equals((java.lang.Object) typeArray76);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray76);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray76);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray76);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ldouble;" + "'", str3, "Ldouble;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "V" + "'", str44, "V");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "F" + "'", str51, "F");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 118 + "'", int59 == 118);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)B" + "'", str77, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)V" + "'", str80, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;" + "'", str81, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Ldouble;" + "'", str82, "(CBFCF)Ldouble;");
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("g.mockito.asm.tree.analysis.AnalyzerException");
        int int2 = type1.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type76, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type76);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier10.newValue(type85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        int int89 = type87.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier10.newValue(type87);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier9.newValue(type87);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier3.newValue(type87);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type87, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier94.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 101 + "'", int89 == 101);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier36.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier36.newOperation(abstractInsnNode63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicInterpreter;: expected F, but found null");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        java.lang.String str25 = type2.toString();
        java.lang.String str26 = type2.toString();
        int int27 = type2.getSize();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, list30, true);
        java.lang.Class<?> wildcardClass33 = simpleVerifier32.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str37 = type36.getDescriptor();
        int int38 = type36.getSort();
        int int39 = type36.getSize();
        java.lang.String str40 = type36.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type36, true);
        boolean boolean43 = type2.equals((java.lang.Object) type36);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type45, true);
        java.lang.String str50 = type45.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type45, false);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        int int55 = type53.getOpcode(101);
        java.lang.String str56 = type53.toString();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type53, list57, false);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        int int62 = type60.getOpcode(0);
        java.lang.String str63 = type60.getDescriptor();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier59.newValue(type60);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("J");
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier59.newValue(type66);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type66, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier69.copyOperation(abstractInsnNode70, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "B" + "'", str25, "B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lfloat;" + "'", str37, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "void" + "'", str50, "void");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 101 + "'", int55 == 101);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "C" + "'", str56, "C");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "I" + "'", str63, "I");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getReturnType("LLB;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int29 = type27.getOpcode(48);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier52.newValue(type55);
        int int60 = type55.getSize();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type55, list61, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int70 = type68.getOpcode(8);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier63.newValue(type68);
        int int73 = value72.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier22.copyOperation(abstractInsnNode26, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str71, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        java.lang.Object obj6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter7.copyOperation(abstractInsnNode11, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj6, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.ternaryOperation(abstractInsnNode62, value63, value64, value65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter61.merge(value72, value78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode58, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException85.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException89);
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException89);
        analyzerException54.addSuppressed((java.lang.Throwable) analyzerException89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException89);
        java.lang.Throwable[] throwableArray94 = analyzerException93.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Throwable) analyzerException93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException93);
        java.lang.String str97 = analyzerException93.toString();
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str97, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value12 = simpleVerifier8.newValue(type9);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier8.newValue(type13);
        int int18 = type13.getSize();
        int int20 = type13.getOpcode(114);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        java.lang.String str26 = type24.getDescriptor();
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type27, false);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.tree.analysis.AnalyzerException: LB");
        int int32 = type31.getDimensions();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type31, list33, true);
        java.lang.String str36 = type24.toString();
        java.lang.String str37 = type24.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 116 + "'", int20 == 116);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "L(CBFCF)B;" + "'", str26, "L(CBFCF)B;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "L(CBFCF)B;" + "'", str36, "L(CBFCF)B;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "L(CBFCF)B;" + "'", str37, "L(CBFCF)B;");
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        boolean boolean34 = type30.equals((java.lang.Object) 81);
        int int36 = type30.getOpcode(139);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 143 + "'", int36 == 143);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int4 = type2.getOpcode(113);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        boolean boolean10 = type5.equals((java.lang.Object) 177);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type5, list11, false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str28 = type27.getDescriptor();
        int int29 = type27.getSort();
        int int30 = type27.getDimensions();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str33 = type32.getDescriptor();
        int int34 = type32.getSort();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type32, list35, true);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier25.newValue(type32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier25.newValue(type48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier25.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode59, value80);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter52.copyOperation(abstractInsnNode56, value80);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str88 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier25.merge(value80, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Object) type5, value90);
        java.lang.Class<?> wildcardClass92 = value90.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = type93.getInternalName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 113 + "'", int4 == 113);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lfloat;" + "'", str28, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lfloat;" + "'", str33, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str46, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str47, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "I" + "'", str88, "I");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str94, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int30 = type28.getOpcode(48);
        java.lang.String str31 = type28.getClassName();
        java.lang.String str32 = type28.getClassName();
        java.lang.String str33 = type28.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type52, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type34, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier58.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type63, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier67.newValue(type68);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter0.merge(value61, value71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter0.newValue(type74);
        int int76 = type74.getSort();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48 + "'", int30 == 48);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "boolean" + "'", str32, "boolean");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "long" + "'", str60, "long");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("I");
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, true);
        java.lang.String str8 = type1.getDescriptor();
        int int10 = type1.getOpcode(108);
        java.lang.Class<?> wildcardClass11 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 112 + "'", int10 == 112);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)J");
        java.lang.Throwable[] throwableArray5 = analyzerException4.getSuppressed();
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value55);
        java.lang.Throwable[] throwableArray58 = analyzerException57.getSuppressed();
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException57);
        java.lang.Throwable[] throwableArray60 = analyzerException57.getSuppressed();
        boolean boolean61 = type1.equals((java.lang.Object) analyzerException57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType("I");
        org.mockito.asm.Type type64 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, list66, true);
        java.lang.Class<?> wildcardClass69 = simpleVerifier68.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type73, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type73, true);
        java.lang.String str78 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.BasicValue;" + "'", str2, "Lorg.mockito.asm.tree.analysis.BasicValue;");
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str71, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str78, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        java.util.List list47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier45.naryOperation(abstractInsnNode46, list47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Throwable[] throwableArray39 = analyzerException38.getSuppressed();
        boolean boolean40 = type0.equals((java.lang.Object) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray43 = analyzerException42.getSuppressed();
        boolean boolean44 = type0.equals((java.lang.Object) analyzerException42);
        java.lang.String str45 = type0.toString();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type47, list48, true);
        java.lang.Class<?> wildcardClass51 = simpleVerifier50.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = type52.getInternalName();
        int int55 = type52.getOpcode(512);
        boolean boolean56 = type0.equals((java.lang.Object) int55);
        java.lang.String str57 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "F" + "'", str45, "F");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str53, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 516 + "'", int55 == 516);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter52.copyOperation(abstractInsnNode59, value71);
        boolean boolean80 = type51.equals((java.lang.Object) basicInterpreter52);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str83 = type82.getDescriptor();
        int int84 = type82.getSort();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter52.newValue(type82);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        int int88 = type86.getOpcode(101);
        java.lang.String str89 = type86.toString();
        int int90 = type86.getSize();
        java.lang.String str91 = type86.getDescriptor();
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter52.newValue(type86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = basicInterpreter52.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "I" + "'", str57, "I");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "LLB;;" + "'", str83, "LLB;;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 101 + "'", int88 == 101);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "C" + "'", str91, "C");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray76);
        java.lang.Class<?> wildcardClass78 = type66.getClass();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass78);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass78);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/Type" + "'", str80, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/Type" + "'", str81, "org/mockito/asm/Type");
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        boolean boolean29 = type24.equals((java.lang.Object) 177);
        int int30 = type24.getSize();
        java.lang.String str31 = type24.toString();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter18.copyOperation(abstractInsnNode33, value52);
        int int54 = value52.getSize();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int57 = type55.getOpcode(48);
        java.lang.String str58 = type55.getClassName();
        java.lang.String str59 = type55.getClassName();
        java.lang.String str60 = type55.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type79, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type61, true);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str87 = type86.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier85.newValue(type86);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier85.newValue(type89);
        int int91 = value90.getSize();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier14.merge(value52, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Object) 116, value92);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Throwable[] throwableArray96 = analyzerException95.getSuppressed();
        java.lang.String str97 = analyzerException95.toString();
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "F" + "'", str31, "F");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 48 + "'", int57 == 48);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "long" + "'", str87, "long");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str97, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int28 = type26.getOpcode(48);
        java.lang.String str29 = type26.getClassName();
        java.lang.String str30 = type26.getClassName();
        java.lang.String str31 = type26.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type33, type36, type37, type41, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type50, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type32, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier56.newValue(type57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str62 = type61.getDescriptor();
        int int63 = type61.getSort();
        int int64 = type61.getDimensions();
        int int66 = type61.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier56.newValue(type61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException71.getClass();
        java.lang.String str73 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass72);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier56.newValue(type77);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type77, list79, false);
        java.lang.Class<?> wildcardClass82 = type77.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.lang.String str85 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type89 = org.mockito.asm.Type.SHORT_TYPE;
        int int90 = type89.getSize();
        java.lang.String str91 = type89.toString();
        java.util.List list92 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type88, type89, list92, false);
        java.util.List list95 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier97 = new org.mockito.asm.tree.analysis.SimpleVerifier(type86, type89, list95, true);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str25, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)B" + "'", str49, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "long" + "'", str58, "long");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lfloat;" + "'", str62, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 14 + "'", int66 == 14);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str73, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str74, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str83, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str84, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str85, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "S" + "'", str91, "S");
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        int int9 = type2.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException25);
        boolean boolean41 = type2.equals((java.lang.Object) analyzerException25);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list42, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        java.lang.String str51 = type46.getDescriptor();
        java.lang.String str52 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier44.newValue(type46);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        int int57 = type55.getOpcode(151);
        int int58 = type55.getSort();
        int int60 = type55.getOpcode(58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type65 = org.mockito.asm.Type.SHORT_TYPE;
        int int66 = type65.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str72 = type71.getDescriptor();
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter67.newValue(type71);
        org.mockito.asm.Type[] typeArray75 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray75);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray75);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray75);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type62, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("(CBFCF)LB;");
        int int84 = type83.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type83, false);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier44.newValue(type62);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier44.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 169 + "'", int9 == 169);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "V" + "'", str51, "V");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "V" + "'", str52, "V");
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 155 + "'", int57 == 155);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 62 + "'", int60 == 62);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "I" + "'", str72, "I");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)I" + "'", str76, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)S" + "'", str77, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str78, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str79, "(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter1.newValue(type20);
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list23, true);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        int int32 = type26.getOpcode(169);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier25.newValue(type26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type53, false);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier57.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType("J");
        java.lang.String str63 = type62.toString();
        java.lang.String str64 = type62.toString();
        int int65 = type62.getSize();
        java.lang.String str66 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier57.newValue(type62);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier25.copyOperation(abstractInsnNode34, value67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "J" + "'", str63, "J");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "J" + "'", str64, "J");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "J" + "'", str66, "J");
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier22.newValue(type34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int39 = type37.getOpcode(48);
        java.lang.String str40 = type37.getClassName();
        int int41 = type37.getSize();
        java.lang.String str42 = type37.getDescriptor();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier50.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        java.lang.String str58 = type55.getClassName();
        int int60 = type55.getOpcode(138);
        int int61 = type55.getSize();
        boolean boolean63 = type55.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier50.newValue(type55);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type55, list65, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type44, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType("()L(CBFCF)I;");
        boolean boolean72 = type37.equals((java.lang.Object) type71);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier22.newValue(type36);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "boolean" + "'", str40, "boolean");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Z" + "'", str42, "Z");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "char" + "'", str58, "char");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 138 + "'", int60 == 138);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str84 = type83.toString();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type86, list87, true);
        java.lang.String str90 = type83.getDescriptor();
        int int91 = type83.getSize();
        java.lang.String str92 = type83.getClassName();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str84, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str90, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str92, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type1.getClassName();
        int int7 = type1.getSize();
        java.lang.String str8 = type1.getDescriptor();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter9.copyOperation(abstractInsnNode16, value35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, list42, false);
        int int45 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter9.newValue(type39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        int int50 = type49.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str56 = type55.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter51.newValue(type55);
        org.mockito.asm.Type[] typeArray59 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray59);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray59);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray59);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray59);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray59);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "V" + "'", str8, "V");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "I" + "'", str56, "I");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)I" + "'", str60, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)S" + "'", str61, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str62, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)Lfloat;" + "'", str63, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)V" + "'", str64, "(CBFCF)V");
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        int int22 = type21.getSize();
        java.lang.String str23 = type21.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type21, true);
        java.lang.Class<?> wildcardClass26 = type21.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str29, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        boolean boolean80 = type77.equals((java.lang.Object) "I");
        int int82 = type77.getOpcode(8);
        boolean boolean84 = type77.equals((java.lang.Object) (-1.0f));
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type77, list85, true);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        int int90 = type89.getSize();
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier87.newValue(type89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier87.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException9.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.ternaryOperation(abstractInsnNode19, value20, value21, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter18.merge(value29, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier17.merge(value36, value48);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter12.copyOperation(abstractInsnNode16, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass10, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)S", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/SimpleVerifier", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode66, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException89);
        analyzerException61.addSuppressed((java.lang.Throwable) analyzerException89);
        java.lang.Throwable[] throwableArray92 = analyzerException61.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException61);
        java.lang.Throwable[] throwableArray94 = analyzerException93.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)Lfloat;;", (java.lang.Throwable) analyzerException93);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType("J");
        java.lang.String str28 = type27.toString();
        java.lang.String str29 = type27.toString();
        int int30 = type27.getSize();
        java.lang.String str31 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier22.newValue(type27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        int int40 = type38.getOpcode(114);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray57);
        java.lang.String str60 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier22.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier22.newOperation(abstractInsnNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "J" + "'", str29, "J");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 118 + "'", int40 == 118);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str59, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str60, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier38.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier38.copyOperation(abstractInsnNode42, value43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass11 = analyzerException6.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = type12.getInternalName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("Lhi!;");
        java.lang.String str16 = type15.toString();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type15, list17, false);
        java.lang.String str20 = type15.getInternalName();
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LLhi!;;" + "'", str16, "LLhi!;;");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lhi!;" + "'", str20, "Lhi!;");
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        java.lang.String str9 = type4.getClassName();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list10, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str15 = type14.getDescriptor();
        java.lang.String str16 = type14.getInternalName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier12.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        java.lang.Class<?> wildcardClass45 = value43.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        java.lang.String str56 = type53.getClassName();
        java.lang.String str57 = type53.getClassName();
        java.lang.String str58 = type53.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type59, true);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter49.newValue(type53);
        java.lang.String str85 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type53);
        java.lang.String str87 = type53.toString();
        java.lang.String str88 = type53.toString();
        int int90 = type53.getOpcode(61);
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type53, list91, true);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: : expected (CBFCF)[Lorg/mockito/asm/Type;, but found .");
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier93.newValue(type95);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LB;" + "'", str15, "LB;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str46, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Z" + "'", str87, "Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Z" + "'", str88, "Z");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 61 + "'", int90 == 61);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        int int49 = type12.getDimensions();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type76, list81, true);
        int int85 = type76.getOpcode(100);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str87 = type86.toString();
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray89);
        org.mockito.asm.Type type93 = type12.getElementType();
        org.mockito.asm.Type type94 = type12.getElementType();
        int int95 = type94.getSort();
        java.lang.String str96 = type94.getInternalName();
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 102 + "'", int85 == 102);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "S" + "'", str87, "S");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)S" + "'", str90, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)F" + "'", str91, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)[Lorg/mockito/asm/Type;" + "'", str92, "(CBFCF)[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org/mockito/asm/Type" + "'", str96, "org/mockito/asm/Type");
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        int int50 = type12.getOpcode(113);
        int int51 = type12.getSize();
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 117 + "'", int50 == 117);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int7 = type0.getOpcode(129);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean32 = type20.equals((java.lang.Object) type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier55.newValue(type58);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int64 = type63.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        int int67 = type65.getOpcode(101);
        java.lang.String str68 = type65.toString();
        int int69 = type65.getSort();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list70, false);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier55.newValue(type63);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type63, list74, false);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list77, false);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type81, list82, false);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier84.newValue(type85);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier84.newValue(type88);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type92 = type91.getElementType();
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier84.newValue(type92);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier84.newOperation(abstractInsnNode94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 129 + "'", int7 == 129);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 101 + "'", int67 == 101);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int9 = type7.getOpcode(48);
        java.lang.String str10 = type7.getClassName();
        java.lang.String str11 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        int int15 = type13.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value16 = simpleVerifier12.newValue(type13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        boolean boolean22 = type17.equals((java.lang.Object) 177);
        java.lang.String str23 = type17.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        int int31 = type29.getOpcode(114);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type33, type36, type37, type41, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray48);
        boolean boolean51 = type17.equals((java.lang.Object) typeArray48);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray48);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray48);
        int int55 = type7.getOpcode(88);
        java.lang.String str56 = type7.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        java.util.List list60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = simpleVerifier58.naryOperation(abstractInsnNode59, list60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 101 + "'", int15 == 101);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "F" + "'", str23, "F");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 118 + "'", int31 == 118);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)B" + "'", str49, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str50, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)C" + "'", str52, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)Z" + "'", str53, "(CBFCF)Z");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 88 + "'", int55 == 88);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Z" + "'", str56, "Z");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int10 = type9.getSize();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(101);
        int int15 = type11.getOpcode(191);
        int int16 = type11.getSort();
        java.lang.Class<?> wildcardClass17 = type11.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        boolean boolean21 = type9.equals((java.lang.Object) type20);
        int int22 = type20.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str6, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str8, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101 + "'", int13 == 101);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 191 + "'", int15 == 191);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("int");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType("()L(CBFCF)S;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        int int8 = type7.getSize();
        int int10 = type7.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier5.newValue(type7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.naryOperation(abstractInsnNode12, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 152 + "'", int10 == 152);
        org.junit.Assert.assertNotNull(value11);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str90 = type89.getClassName();
        int int91 = type89.getSort();
        java.lang.String str92 = type89.getDescriptor();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type89, list93, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier95.newOperation(abstractInsnNode96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "void" + "'", str90, "void");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "V" + "'", str92, "V");
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass34 = analyzerException32.getClass();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.ternaryOperation(abstractInsnNode66, value67, value68, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter65.merge(value76, value82);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier45.merge(value64, value76);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter38.copyOperation(abstractInsnNode44, value76);
        int int86 = value85.getSize();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter36.copyOperation(abstractInsnNode37, value85);
        boolean boolean88 = type35.equals((java.lang.Object) value85);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier27.newValue(type35);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.copyOperation(abstractInsnNode4, value89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        java.lang.String str8 = type2.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int16 = type14.getOpcode(114);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray33);
        boolean boolean36 = type2.equals((java.lang.Object) typeArray33);
        int int37 = type2.getSort();
        int int39 = type2.getOpcode(114);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type41, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        java.lang.String str57 = type52.getClassName();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list58, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type52, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type52, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type65, list66, false);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type65, list69, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newOperation(abstractInsnNode72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 118 + "'", int16 == 118);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 116 + "'", int39 == 116);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "void" + "'", str57, "void");
        org.junit.Assert.assertNotNull(type65);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = type50.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 24);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type30, list31, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type22, list34, false);
        boolean boolean37 = type0.equals((java.lang.Object) type3);
        java.lang.Class<?> wildcardClass38 = type3.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        java.lang.Class<?> wildcardClass19 = value17.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int23 = type21.getOpcode(66);
        int int24 = type21.getSort();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        boolean boolean30 = type25.equals((java.lang.Object) 177);
        int int31 = type25.getSize();
        java.lang.String str32 = type25.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type25, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str43 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter36.newValue(type42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier34.copyOperation(abstractInsnNode35, value44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str20, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 70 + "'", int23 == 70);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "long" + "'", str43, "long");
        org.junit.Assert.assertNotNull(value44);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)[Lorg.mockito.asm.Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int4 = type3.getSort();
        int int5 = type3.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type6, false);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list10, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        java.util.List list14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value15 = simpleVerifier12.naryOperation(abstractInsnNode13, list14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.toString();
        int int5 = type0.getSize();
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        java.lang.Class<?> wildcardClass55 = value53.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type58, list59, true);
        int int62 = type58.getSize();
        boolean boolean64 = type58.equals((java.lang.Object) "g.mockito.asm.tree.analysis.BasicValue");
        int int66 = type58.getOpcode(162);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str69 = type68.getDescriptor();
        int int70 = type68.getDimensions();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)F;", (java.lang.Throwable) analyzerException73);
        boolean boolean75 = type68.equals((java.lang.Object) analyzerException74);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type68, list76, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type80, list81, true);
        java.lang.String str84 = type79.getDescriptor();
        int int85 = type79.getSort();
        org.mockito.asm.Type[] typeArray87 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray87);
        org.mockito.asm.Type type90 = type58.getElementType();
        int int91 = type58.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 166 + "'", int66 == 166);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "LLB;;" + "'", str69, "LLB;;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "J" + "'", str84, "J");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)J" + "'", str88, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str89, "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        int int56 = type52.getSize();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier10.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSize();
        java.lang.String str30 = type28.toString();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list31, false);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier10.newValue(type27);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("hi!");
        int int37 = type36.getSize();
        int int38 = type36.getSize();
        java.lang.String str39 = type36.getDescriptor();
        int int40 = type36.getSort();
        int int41 = type36.getSize();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type36, list42, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        java.util.List list46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = simpleVerifier44.naryOperation(abstractInsnNode45, list46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "S" + "'", str30, "S");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lhi!;" + "'", str39, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType("J");
        java.lang.String str28 = type27.toString();
        java.lang.String str29 = type27.toString();
        int int30 = type27.getSize();
        java.lang.String str31 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier22.newValue(type27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        int int40 = type38.getOpcode(114);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray57);
        java.lang.String str60 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier22.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier22.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "J" + "'", str28, "J");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "J" + "'", str29, "J");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "J" + "'", str31, "J");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 118 + "'", int40 == 118);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str59, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str60, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str12 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 24);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type46, list47, true);
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type38, list50, false);
        boolean boolean53 = type16.equals((java.lang.Object) type19);
        java.lang.String str54 = type16.getClassName();
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, list55, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type15, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type69, list70, true);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        boolean boolean78 = type73.equals((java.lang.Object) 177);
        int int80 = type73.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier72.newValue(type73);
        int int82 = value81.getSize();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type85 = type84.getElementType();
        java.lang.String str86 = type85.toString();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("C");
        java.lang.String str89 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type88, true);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.INT_TYPE;
        int int93 = type92.getSize();
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier91.newValue(type92);
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier59.merge(value81, value94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ()Lboolean;", (java.lang.Object) str12, value81);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str11, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str12, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "void" + "'", str54, "void");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 169 + "'", int80 == 169);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, list54, true);
        java.lang.Class<?> wildcardClass57 = type52.getClass();
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        boolean boolean60 = type44.equals((java.lang.Object) wildcardClass57);
        java.lang.String str61 = type44.toString();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("(CBFCF)Lboolean;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type63, false);
        java.lang.String str66 = type44.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str58, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "C" + "'", str66, "C");
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        java.lang.Class<?> wildcardClass88 = analyzerException87.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str91 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.lang.String str92 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass88);
        java.lang.String str93 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        int int95 = type94.getDimensions();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier0.newValue(type94);
        java.lang.Class<?> wildcardClass97 = type94.getClass();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str91, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str92, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str93, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass23);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/Type" + "'", str25, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/Type" + "'", str26, "org/mockito/asm/Type");
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        java.lang.Object obj23 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier29.merge(value48, value60);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter24.copyOperation(abstractInsnNode28, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj23, value69);
        java.lang.Class<?> wildcardClass71 = value69.getClass();
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier21.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.SHORT_TYPE;
        int int76 = type75.getSize();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier21.newValue(type75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value77);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException78);
        java.lang.Throwable[] throwableArray80 = analyzerException78.getSuppressed();
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str72, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(throwableArray80);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        int int32 = type0.getOpcode(139);
        int int33 = type0.getSize();
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, list42, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = type50.getElementType();
        java.lang.String str52 = type51.getClassName();
        java.lang.String str53 = type51.getDescriptor();
        org.mockito.asm.Type type54 = type51.getElementType();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier44.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        java.lang.String str69 = type66.getClassName();
        int int71 = type66.getOpcode(138);
        int int72 = type66.getSize();
        boolean boolean74 = type66.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier61.newValue(type66);
        int int77 = type66.getOpcode(0);
        int int79 = type66.getOpcode(0);
        int int80 = type66.getSort();
        java.lang.String str81 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier44.newValue(type66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier36.copyOperation(abstractInsnNode37, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 139 + "'", int32 == 139);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str52, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "char" + "'", str69, "char");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 138 + "'", int71 == 138);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "char" + "'", str81, "char");
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        boolean boolean9 = type3.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type11, list12, true);
        java.lang.Class<?> wildcardClass15 = simpleVerifier14.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        java.lang.String str17 = type16.getInternalName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str36 = type18.toString();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type18, list37, true);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type40, true);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type43, false);
        int int49 = type43.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type43, true);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        java.lang.String str69 = type64.getClassName();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type64, list70, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type64, true);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean76 = type64.equals((java.lang.Object) type75);
        int int77 = type75.getSort();
        int int79 = type75.getOpcode(24);
        java.lang.String str80 = type75.getDescriptor();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier51.newValue(type75);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type75, false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str17, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "B" + "'", str36, "B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "char" + "'", str46, "char");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 24 + "'", int79 == 24);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "I" + "'", str80, "I");
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        int int30 = type25.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type25.equals((java.lang.Object) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str49 = type48.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type48, list50, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier52.newValue(type54);
        int int56 = type54.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 138 + "'", int30 == 138);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str44, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str46, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str49, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter1.newValue(type20);
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list23, true);
        int int26 = type20.getSort();
        int int28 = type20.getOpcode(174);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 174 + "'", int28 == 174);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException34);
        boolean boolean36 = type24.equals((java.lang.Object) analyzerException35);
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException35);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException23);
        boolean boolean39 = type0.equals((java.lang.Object) analyzerException23);
        int int40 = type0.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getReturnType("LCBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str43 = type42.getClassName();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, list44, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type50 = type49.getElementType();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier56.newValue(type57);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier56.newValue(type61);
        int int66 = type61.getSize();
        int int68 = type61.getOpcode(114);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type61, true);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str73 = type72.toString();
        java.lang.String str74 = type72.getDescriptor();
        java.lang.String str75 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier70.newValue(type72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier46.copyOperation(abstractInsnNode47, value76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: " + "'", str43, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 116 + "'", int68 == 116);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str73, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str74, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str75, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray23);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray23);
        java.lang.Class<?> wildcardClass27 = type1.getClass();
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type33 = null;
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type33, list34, false);
        int int37 = type32.getSize();
        int int38 = type32.getSort();
        int int39 = type32.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type70, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier72.newValue(type74);
        int int77 = type74.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type74, false);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int83 = type81.getOpcode(8);
        java.lang.String str84 = type81.getDescriptor();
        int int85 = type81.getDimensions();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier79.newValue(type81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;", (java.lang.Object) wildcardClass27, value86);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)I" + "'", str26, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str28, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str31, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "char" + "'", str43, "char");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)C" + "'", str62, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 85 + "'", int77 == 85);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str84, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        int int32 = type0.getOpcode(171);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str36 = type35.getDescriptor();
        int int37 = type35.getSort();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, list38, false);
        int int41 = type35.getSize();
        int int42 = type35.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type43, false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int48 = type46.getOpcode(48);
        java.lang.String str49 = type46.getClassName();
        java.lang.String str50 = type46.getClassName();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type46, list51, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        int int55 = type54.getSize();
        java.lang.String str56 = type54.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type54, true);
        boolean boolean59 = type0.equals((java.lang.Object) type54);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass61 = type60.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        int int63 = type62.getDimensions();
        java.lang.String str64 = type62.getInternalName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type66, list67, true);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type66, list70, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newOperation(abstractInsnNode73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 171 + "'", int32 == 171);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lfloat;" + "'", str36, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org/mockito/asm/Type" + "'", str64, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type66);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        boolean boolean26 = type21.equals((java.lang.Object) 177);
        java.lang.String str27 = type21.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        int int35 = type33.getOpcode(114);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray52);
        boolean boolean55 = type21.equals((java.lang.Object) typeArray52);
        int int56 = type21.getSort();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int60 = type58.getOpcode(167);
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type58, list61, true);
        java.lang.String str64 = type58.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type58, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type67 = type2.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "F" + "'", str27, "F");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 118 + "'", int35 == 118);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str54, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 171 + "'", int60 == 171);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str64, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, true);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type41, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        java.lang.Class<?> wildcardClass50 = analyzerException48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.String str52 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type53, list54, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        boolean boolean62 = type57.equals((java.lang.Object) 177);
        int int64 = type57.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier56.newValue(type57);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        int int68 = type66.getOpcode(0);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type69, false);
        java.lang.Object obj72 = null;
        boolean boolean73 = type66.equals(obj72);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier56.newValue(type66);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier43.newValue(type66);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException80);
        java.lang.Class<?> wildcardClass82 = analyzerException80.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type85, list86, true);
        org.mockito.asm.Type type89 = type85.getElementType();
        boolean boolean91 = type89.equals((java.lang.Object) 159);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier43.newValue(type89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier43.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "byte" + "'", str38, "byte");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 169 + "'", int64 == 169);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str84, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        java.lang.Class<?> wildcardClass33 = simpleVerifier32.getClass();
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.String str36 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass33);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str34, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str35, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str36, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str37, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type43 = type42.getElementType();
        int int44 = type42.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str40, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        java.lang.Object obj20 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier26.merge(value45, value57);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter21.copyOperation(abstractInsnNode25, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj20, value66);
        java.lang.Class<?> wildcardClass68 = value66.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier18.newValue(type70);
        boolean boolean72 = type0.equals((java.lang.Object) type70);
        int int73 = type70.getDimensions();
        java.lang.Class<?> wildcardClass74 = type70.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        java.lang.Class<?> wildcardClass76 = type75.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type80, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier78.newValue(type79);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier78.newValue(type85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        java.util.List list88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier78.naryOperation(abstractInsnNode87, list88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        int int6 = type0.getSort();
        int int7 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type38, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type42);
        int int45 = type42.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, false);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType("LLB;;");
        java.lang.String str50 = type49.toString();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type49, list51, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        java.util.List list55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value56 = simpleVerifier53.naryOperation(abstractInsnNode54, list55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "char" + "'", str11, "char");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)C" + "'", str30, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 85 + "'", int45 == 85);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "LLB;" + "'", str50, "LLB;");
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type36, false);
        int int39 = type36.getSize();
        int int41 = type36.getOpcode(170);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 174 + "'", int41 == 174);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, false);
        java.lang.String str9 = type3.getClassName();
        java.lang.String str10 = type3.getInternalName();
        java.lang.String str11 = type3.toString();
        int int13 = type3.getOpcode(53);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, true);
        int int17 = type3.getOpcode(145);
        int int18 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lfloat;" + "'", str11, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57 + "'", int13 == 57);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 149 + "'", int17 == 149);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        int int9 = type2.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException25);
        boolean boolean41 = type2.equals((java.lang.Object) analyzerException25);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list42, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier45.newValue(type47);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        java.lang.String str60 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier45.newValue(type51);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type51, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        java.util.List list67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier65.naryOperation(abstractInsnNode66, list67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 169 + "'", int9 == 169);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        int int39 = type33.getSize();
        java.lang.String str40 = type33.getClassName();
        java.lang.String str41 = type33.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "char" + "'", str40, "char");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "C" + "'", str41, "C");
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        int int12 = type0.getOpcode(66);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 66 + "'", int12 == 66);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.getClassName();
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list4, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException14.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.ternaryOperation(abstractInsnNode24, value25, value26, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter23.merge(value34, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.ternaryOperation(abstractInsnNode43, value44, value45, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter42.merge(value53, value59);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier22.merge(value41, value53);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter17.copyOperation(abstractInsnNode21, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass15, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)S", (java.lang.Throwable) analyzerException64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/SimpleVerifier", (java.lang.Throwable) analyzerException64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException68);
        boolean boolean71 = type2.equals((java.lang.Object) analyzerException64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;: expected class org.mockito.asm.tree.analysis.SimpleVerifier, but found F", (java.lang.Throwable) analyzerException64);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "byte" + "'", str3, "byte");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list43, true);
        java.lang.String str46 = type8.getClassName();
        int int47 = type8.getSize();
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("LB;");
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        int int61 = type55.getSize();
        boolean boolean62 = type50.equals((java.lang.Object) int61);
        org.mockito.asm.Type type63 = type50.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type63, false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "byte" + "'", str46, "byte");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        java.lang.String str35 = type0.getClassName();
        java.lang.String str36 = type0.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException67);
        java.lang.Class<?> wildcardClass69 = analyzerException67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type72, true);
        boolean boolean76 = type72.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier41.newValue(type72);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier41.newValue(type78);
        boolean boolean80 = type0.equals((java.lang.Object) type78);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str83 = type82.getDescriptor();
        int int84 = type82.getSort();
        int int85 = type82.getDimensions();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str88 = type87.getDescriptor();
        int int89 = type87.getSort();
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type87, list90, true);
        java.lang.String str93 = type82.getDescriptor();
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type82, list94, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type97 = type82.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str71, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lfloat;" + "'", str83, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lfloat;" + "'", str88, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lfloat;" + "'", str93, "Lfloat;");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        int int18 = type16.getOpcode(101);
        java.lang.String str19 = type16.toString();
        int int20 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type16);
        int int22 = type16.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 101 + "'", int18 == 101);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.SHORT_TYPE;
        int int35 = type34.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter36.newValue(type40);
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray44);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.newValue(type33);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        int int67 = type49.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type49, true);
        int int71 = type33.getOpcode(108);
        int int72 = type33.getSort();
        int int73 = type33.getDimensions();
        java.lang.String str74 = type33.getDescriptor();
        java.lang.String str75 = type33.toString();
        java.lang.String str76 = type33.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "I" + "'", str41, "I");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)I" + "'", str45, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)S" + "'", str46, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str47, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 112 + "'", int71 == 112);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str74, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str75, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str76, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("(CBFCF)C");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, false);
        org.mockito.asm.Type type9 = type6.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.toString();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int8 = type6.getOpcode(48);
        java.lang.String str9 = type6.getClassName();
        java.lang.String str10 = type6.getClassName();
        java.lang.String str11 = type6.getClassName();
        int int12 = type6.getSize();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier36.newValue(type39);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type39, list44, true);
        int int48 = type39.getOpcode(100);
        org.mockito.asm.Type[] typeArray50 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray50);
        java.lang.Class<?> wildcardClass52 = type39.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        int int55 = type53.getOpcode(203);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type53, false);
        org.mockito.asm.Type type58 = type53.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type53, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        java.util.List list62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier60.naryOperation(abstractInsnNode61, list62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str5, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 102 + "'", int48 == 102);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)F" + "'", str51, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 207 + "'", int55 == 207);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        java.lang.String str7 = type6.getClassName();
        java.lang.String str8 = type6.getDescriptor();
        org.mockito.asm.Type type9 = type6.getElementType();
        int int10 = type9.getDimensions();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type29, false);
        int int34 = type29.getSort();
        java.lang.String str35 = type29.getDescriptor();
        boolean boolean37 = type29.equals((java.lang.Object) 179);
        int int38 = type29.getSize();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        int int42 = type40.getOpcode(101);
        java.lang.String str43 = type40.toString();
        int int44 = type40.getSize();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray61);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray61);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray61);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray61);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        java.lang.String str70 = type67.getClassName();
        int int72 = type67.getOpcode(138);
        int int73 = type67.getSize();
        boolean boolean75 = type67.equals((java.lang.Object) 154);
        java.lang.String str76 = type67.getDescriptor();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        java.lang.String str81 = type77.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type77, true);
        int int84 = type77.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type77, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier86.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str7, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 101 + "'", int42 == 101);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "C" + "'", str43, "C");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)C" + "'", str63, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)I" + "'", str64, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)C" + "'", str65, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str66, "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "char" + "'", str70, "char");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 138 + "'", int72 == 138);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "C" + "'", str76, "C");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;");
        java.lang.Object obj28 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier34.merge(value53, value65);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter29.copyOperation(abstractInsnNode33, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj28, value74);
        java.lang.Class<?> wildcardClass76 = value74.getClass();
        java.lang.String str77 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type79, list80, false);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type83, true);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        int int88 = type86.getOpcode(101);
        java.lang.String str89 = type86.getClassName();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier85.newValue(type86);
        int int91 = type86.getSize();
        java.lang.String str92 = type86.getClassName();
        int int94 = type86.getOpcode((int) '#');
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str77, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str78, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 101 + "'", int88 == 101);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "char" + "'", str89, "char");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "char" + "'", str92, "char");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int9 = type7.getOpcode(48);
        java.lang.String str10 = type7.getClassName();
        java.lang.String str11 = type7.getClassName();
        java.lang.String str12 = type7.getClassName();
        int int13 = type7.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type73, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier77.newValue(type80);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type80, list85, true);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier14.newValue(type80);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type80, true);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.newValue(type80);
        java.lang.Class<?> wildcardClass92 = value91.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass92);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str94, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type4, list40, false);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str44 = type43.getClassName();
        int int45 = type43.getSort();
        int int46 = type43.getSize();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type43, list47, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newOperation(abstractInsnNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "byte" + "'", str44, "byte");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        java.lang.Object obj2 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter5.copyOperation(abstractInsnNode11, value43);
        int int53 = value52.getSize();
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter3.copyOperation(abstractInsnNode4, value52);
        int int55 = value52.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;", obj2, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException68);
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException69);
        java.lang.Throwable[] throwableArray71 = analyzerException69.getSuppressed();
        analyzerException56.addSuppressed((java.lang.Throwable) analyzerException69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.Type", (java.lang.Throwable) analyzerException69);
        java.lang.String str74 = analyzerException73.toString();
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type" + "'", str74, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.Type");
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        int int33 = type31.getOpcode(114);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray50);
        java.lang.String str53 = type31.getDescriptor();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, true);
        int int60 = type54.getOpcode(169);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        int int65 = type61.getOpcode(191);
        int int66 = type61.getSort();
        java.lang.Class<?> wildcardClass67 = type61.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = type68.getDescriptor();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type68, list70, true);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type54, list73, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier22.newValue(type54);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier22.newValue(type78);
        java.lang.String str80 = type78.getClassName();
        int int81 = type78.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 118 + "'", int33 == 118);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 170 + "'", int60 == 170);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 191 + "'", int65 == 191);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LLg.mockito.asm.tree.analysis.AnalyzerException;;" + "'", str80, "LLg.mockito.asm.tree.analysis.AnalyzerException;;");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str61 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str61, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str63, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier14.newValue(type19);
        boolean boolean23 = type13.equals((java.lang.Object) type19);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray54);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray54);
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray54);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException69);
        boolean boolean71 = type59.equals((java.lang.Object) analyzerException70);
        java.lang.String str72 = type59.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type59, true);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = type19.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "I" + "'", str20, "I");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "char" + "'", str37, "char");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)C" + "'", str56, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)C" + "'", str57, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)I" + "'", str58, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "F" + "'", str72, "F");
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getInternalName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier11.naryOperation(abstractInsnNode12, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Z" + "'", str9, "Z");
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str11 = type10.getDescriptor();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type31, false);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier35.newValue(type38);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type38, list43, true);
        int int47 = type38.getOpcode(100);
        org.mockito.asm.Type[] typeArray49 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray49);
        int int51 = type38.getSort();
        org.mockito.asm.Type[] typeArray53 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray72);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray72);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int79 = type77.getOpcode(113);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        boolean boolean85 = type80.equals((java.lang.Object) 177);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type80, list86, false);
        java.lang.String str89 = type77.toString();
        int int90 = type77.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type77, true);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier6.newValue(type8);
        java.lang.String str94 = type8.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lboolean;" + "'", str11, "Lboolean;");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 102 + "'", int47 == 102);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)F" + "'", str50, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)F" + "'", str54, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Lboolean;" + "'", str55, "(CBFCF)Lboolean;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)Lboolean;" + "'", str74, "(CBFCF)Lboolean;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)LCBFCF)Lorg/mockito/asm/Type;" + "'", str75, "(CBFCF)LCBFCF)Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 113 + "'", int79 == 113);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "B" + "'", str89, "B");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "LCBFCF)Lorg/mockito/asm/Type;" + "'", str94, "LCBFCF)Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        int int38 = type0.getOpcode(138);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier46.newValue(type47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier46.newValue(type51);
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type51, list61, true);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        java.lang.String str70 = type65.getClassName();
        int int71 = type65.getSize();
        java.lang.String str72 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier63.newValue(type65);
        int int75 = type65.getOpcode((int) (short) -1);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type65, list76, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier78.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 138 + "'", int38 == 138);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "void" + "'", str70, "void");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "void" + "'", str72, "void");
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        int int39 = type33.getSize();
        java.lang.String str40 = type33.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass44 = type41.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type47, list48, true);
        int int52 = type47.getOpcode((int) (byte) 10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "char" + "'", str40, "char");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/Type" + "'", str46, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        java.lang.Class<?> wildcardClass57 = value55.getClass();
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        int int61 = type60.getSort();
        int int62 = type60.getDimensions();
        boolean boolean63 = type7.equals((java.lang.Object) int62);
        java.lang.String str64 = type7.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str58, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str59, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str64, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        java.lang.String str28 = type10.toString();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list29, true);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type32, true);
        java.lang.Class<?> wildcardClass35 = simpleVerifier34.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type37 = type36.getElementType();
        int int39 = type36.getOpcode(112);
        int int40 = type36.getSort();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type43, list49, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str54 = type53.getDescriptor();
        java.lang.String str55 = type53.getInternalName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier51.newValue(type53);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        int int62 = type57.getOpcode(138);
        int int63 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier51.newValue(type57);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass66 = type65.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        int int68 = type67.getDimensions();
        java.lang.String str69 = type67.getInternalName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type71, list72, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier51.newValue(type67);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str77 = type76.getDescriptor();
        java.lang.String str78 = type76.getDescriptor();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier51.newValue(type76);
        int int80 = value79.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Object) int40, value79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;", (java.lang.Throwable) analyzerException81);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 116 + "'", int39 == 116);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "LB;" + "'", str54, "LB;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "B" + "'", str55, "B");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 138 + "'", int62 == 138);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org/mockito/asm/Type" + "'", str69, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Z" + "'", str77, "Z");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Z" + "'", str78, "Z");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list8, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        org.mockito.asm.Type type17 = type16.getElementType();
        java.lang.String str18 = type17.getClassName();
        java.lang.String str19 = type17.getDescriptor();
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier10.newValue(type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int24 = type22.getOpcode(48);
        java.lang.String str25 = type22.getClassName();
        java.lang.String str26 = type22.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        int int30 = type28.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        java.lang.String str38 = type32.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        int int46 = type44.getOpcode(114);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray63);
        boolean boolean66 = type32.equals((java.lang.Object) typeArray63);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray63);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray63);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray63);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray63);
        java.lang.String str71 = type1.getClassName();
        org.mockito.asm.Type type72 = type1.getElementType();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str18, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str19, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 101 + "'", int30 == 101);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 118 + "'", int46 == 118);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)C" + "'", str67, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)Z" + "'", str68, "(CBFCF)Z");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "(CBFCF)Lmockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str70, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org.mockito.asm.tree.analysis.SimpleVerifier" + "'", str71, "org.mockito.asm.tree.analysis.SimpleVerifier");
        org.junit.Assert.assertNotNull(type72);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value12 = simpleVerifier8.newValue(type9);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        java.lang.String str16 = type13.getClassName();
        int int18 = type13.getOpcode(138);
        int int19 = type13.getSize();
        boolean boolean21 = type13.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier8.newValue(type13);
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list23, false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        java.lang.String str29 = type26.toString();
        int int30 = type26.getSort();
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        java.lang.String str38 = type32.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        int int46 = type44.getOpcode(114);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray63);
        boolean boolean66 = type32.equals((java.lang.Object) typeArray63);
        int int67 = type32.getSort();
        int int69 = type32.getOpcode(114);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier25.newValue(type32);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, list75, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier77.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "char" + "'", str16, "char");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 138 + "'", int18 == 138);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "C" + "'", str29, "C");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 118 + "'", int46 == 118);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 116 + "'", int69 == 116);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type38, false);
        int int41 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.String str2 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        boolean boolean10 = type5.equals((java.lang.Object) 177);
        int int12 = type5.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException23);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException39);
        boolean boolean41 = type29.equals((java.lang.Object) analyzerException40);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException40);
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException28);
        boolean boolean44 = type5.equals((java.lang.Object) analyzerException28);
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, list45, true);
        int int48 = type4.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        int int53 = type51.getOpcode(101);
        int int55 = type51.getOpcode(191);
        int int56 = type51.getSort();
        java.lang.Class<?> wildcardClass57 = type51.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int61 = type60.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type60, false);
        org.mockito.asm.Type type64 = type58.getElementType();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str67 = type66.toString();
        java.lang.String str68 = type66.getDescriptor();
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type66, true);
        int int73 = type64.getOpcode(207);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier50.newValue(type64);
        int int75 = value74.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 169 + "'", int12 == 169);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 101 + "'", int53 == 101);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 191 + "'", int55 == 191);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str67, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str68, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str69, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 211 + "'", int73 == 211);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier32.newValue(type33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier32.newValue(type35);
        int int40 = type35.getSize();
        int int42 = type35.getOpcode(12);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier5.newValue(type35);
        java.lang.String str44 = type35.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "F" + "'", str44, "F");
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, true);
        java.lang.String str37 = type32.getClassName();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list38, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str43 = type42.getDescriptor();
        java.lang.String str44 = type42.getInternalName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier40.newValue(type42);
        int int46 = value45.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.ternaryOperation(abstractInsnNode48, value49, value50, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.merge(value58, value64);
        int int66 = value65.getSize();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier27.merge(value45, value65);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.copyOperation(abstractInsnNode4, value65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = basicInterpreter0.newOperation(abstractInsnNode69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "void" + "'", str37, "void");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "LB;" + "'", str43, "LB;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "B" + "'", str44, "B");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int7 = type6.getSort();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        int int15 = type10.getOpcode(138);
        int int16 = type10.getSize();
        boolean boolean18 = type10.equals((java.lang.Object) 154);
        java.lang.String str19 = type10.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str30 = type29.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type29, false);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        int int38 = type33.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        boolean boolean45 = type33.equals((java.lang.Object) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier32.newValue(type33);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str49 = type48.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int53 = type51.getOpcode(8);
        int int55 = type51.getOpcode(163);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type51, list56, false);
        java.lang.String str59 = type51.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        java.lang.String str62 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type33, false);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier4.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier4.newOperation(abstractInsnNode66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 138 + "'", int15 == 138);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str28, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str30, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 138 + "'", int38 == 138);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 167 + "'", int55 == 167);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str59, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "char" + "'", str62, "char");
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        int int10 = type8.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier12.newValue(type87);
        boolean boolean90 = type87.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier7.newValue(type87);
        int int92 = type87.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type87, true);
        java.lang.Class<?> wildcardClass95 = type4.getClass();
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass95);
        org.mockito.asm.Type type97 = type96.getElementType();
        int int99 = type97.getOpcode(127);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 101 + "'", int10 == 101);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 131 + "'", int99 == 131);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        java.lang.String str7 = type0.toString();
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        java.lang.Class<?> wildcardClass57 = value55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType("V");
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type60, list61, true);
        java.lang.String str64 = type60.getDescriptor();
        java.lang.String str65 = type60.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str68 = type67.getClassName();
        java.lang.String str69 = type67.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type67, false);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type60, list72, false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type76, true);
        java.lang.String str81 = type75.getDescriptor();
        int int82 = type75.getSort();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier74.newValue(type75);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "V" + "'", str64, "V");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "void" + "'", str65, "void");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "byte" + "'", str68, "byte");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "B" + "'", str69, "B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "I" + "'", str81, "I");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 5 + "'", int82 == 5);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        int int5 = type1.getOpcode(163);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list11, false);
        int int14 = type8.getSize();
        int int15 = type8.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int21 = type19.getOpcode(48);
        java.lang.String str22 = type19.getClassName();
        java.lang.String str23 = type19.getClassName();
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type19, list24, true);
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list27, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = simpleVerifier29.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        int int30 = type25.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type25.equals((java.lang.Object) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int45 = type43.getOpcode(8);
        int int47 = type43.getOpcode(163);
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type43, list48, false);
        java.lang.String str51 = type43.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str54 = type25.getClassName();
        java.lang.Class<?> wildcardClass55 = type25.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 138 + "'", int30 == 138);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 167 + "'", int47 == 167);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str51, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier4.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type75, true);
        boolean boolean78 = type44.equals((java.lang.Object) type75);
        int int80 = type44.getOpcode(88);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier4.newValue(type44);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        java.lang.String str85 = type82.getClassName();
        java.lang.String str86 = type82.toString();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier4.newValue(type82);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType("CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type89, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier91.newOperation(abstractInsnNode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "char" + "'", str48, "char");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)C" + "'", str67, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 92 + "'", int80 == 92);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "char" + "'", str85, "char");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type89);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.merge(value25, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.ternaryOperation(abstractInsnNode67, value68, value69, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter66.merge(value77, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.merge(value64, value84);
        int int86 = value84.getSize();
        java.lang.Class<?> wildcardClass87 = value84.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str89 = type88.getInternalName();
        java.lang.String str90 = type88.getClassName();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str89, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str90, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        boolean boolean7 = type1.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, list10, true);
        java.lang.Class<?> wildcardClass13 = simpleVerifier12.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getInternalName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        java.lang.String str34 = type16.toString();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list35, true);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type38, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type41, false);
        int int47 = type41.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        boolean boolean55 = type50.equals((java.lang.Object) 177);
        int int56 = type50.getSize();
        java.lang.String str57 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier49.newValue(type50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value60 = simpleVerifier49.newOperation(abstractInsnNode59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str15, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "B" + "'", str34, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
        org.junit.Assert.assertNotNull(value58);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.Object obj5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter6.copyOperation(abstractInsnNode10, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj5, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        boolean boolean54 = type3.equals((java.lang.Object) analyzerException52);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("B", (java.lang.Throwable) analyzerException2);
        java.lang.String str57 = analyzerException56.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: B" + "'", str57, "org.mockito.asm.tree.analysis.AnalyzerException: B");
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter3.newValue(type22);
        java.util.List list25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type22, list25, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        boolean boolean39 = type34.equals((java.lang.Object) 177);
        int int40 = type34.getSize();
        java.lang.String str41 = type34.toString();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter28.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        int int48 = type46.getOpcode(101);
        java.lang.String str49 = type46.toString();
        int int50 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter28.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Object) simpleVerifier27, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException52);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "C" + "'", str23, "C");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "F" + "'", str41, "F");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 101 + "'", int48 == 101);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "C" + "'", str49, "C");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 193);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray30);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray30);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray30);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 24);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException61);
        java.lang.Class<?> wildcardClass63 = analyzerException61.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type66, list67, true);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type58, list70, false);
        boolean boolean73 = type36.equals((java.lang.Object) type39);
        boolean boolean74 = type0.equals((java.lang.Object) boolean73);
        int int76 = type0.getOpcode(32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str33, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)S" + "'", str34, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)J" + "'", str35, "(CBFCF)J");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 33 + "'", int76 == 33);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str40, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type46);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type33, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        boolean boolean39 = type10.equals((java.lang.Object) type37);
        java.lang.Class<?> wildcardClass40 = type37.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass40);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
    }
}


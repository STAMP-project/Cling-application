import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth(22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusWeeks(12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTime();
        mutableDateTime16.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime16.set(dateTimeFieldType19, 1);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval40 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight14.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate46, (org.joda.time.ReadablePartial) localDate49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54);
        org.joda.time.Duration duration56 = period50.toDurationTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Instant instant57 = instant43.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, readableDuration69);
        org.joda.time.Duration duration71 = period65.toDurationTo((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Instant instant72 = instant58.minus((org.joda.time.ReadableDuration) duration71);
        boolean boolean73 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(chronology74);
        int int76 = localDate75.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDate75.toDateTimeAtStartOfDay(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = dateTime78.plus((long) 1961);
        org.joda.time.DateTime dateTime82 = dateTime78.withYear(11);
        org.joda.time.DateTime dateTime84 = dateTime78.minusMinutes((int) '4');
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType86 = periodType85.withSecondsRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime78, periodType86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight42.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration56);
        int int91 = dateMidnight90.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight90.minusMonths(19);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 54 + "'", int76 == 54);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 38 + "'", int91 == 38);
        org.junit.Assert.assertNotNull(dateMidnight93);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 25728, (long) 13, periodType2);
        org.joda.time.Period period5 = period3.minusHours(79358169);
        org.joda.time.Period period7 = period3.withMillis(35);
        int int8 = period3.getWeeks();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(336, 79459491, (int) (byte) 100, chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79459491 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        boolean boolean3 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = property7.getRangeDurationField();
        int int11 = durationField8.getValue((long) 852, (long) 79334);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        gregorianCalendar13.setMinimalDaysInFirstWeek(0);
        gregorianCalendar13.setMinimalDaysInFirstWeek(6);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar13.getMinimum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(11, (int) 'a');
        calendar0.roll(0, false);
        boolean boolean8 = calendar0.isWeekDateSupported();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int10 = localTime9.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        int int23 = localDate16.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight24 = localDate16.toDateMidnight();
        int int25 = localDate16.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        org.joda.time.LocalDate.Property property28 = localDate16.property(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localTime9.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-125940437189886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=57,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=13,SECOND=30,MILLISECOND=214,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = property24.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusWeeks(32769);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.era();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        int int33 = periodType30.indexOf(durationFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight28.withFieldAdded(durationFieldType32, 840);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval39.toPeriod();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868389852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=30,MILLISECOND=248,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.TimeOfDay timeOfDay3 = property1.withMinimumValue();
        org.joda.time.DurationField durationField4 = property1.getDurationField();
        org.joda.time.DurationField durationField5 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay6 = property1.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property1.getField();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTimeISO();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) 1961);
        org.joda.time.DateTime dateTime24 = dateTime20.withYear(11);
        org.joda.time.DateTime dateTime26 = dateTime20.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime20.withYear(999);
        org.joda.time.DateTime dateTime30 = dateTime20.withWeekyear(31);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.minus(89469167760000000L);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        org.joda.time.DateTime dateTime35 = property34.roundFloorCopy();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 54 + "'", int18 == 54);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getActualMinimum(98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868389708,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=30,MILLISECOND=392,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        java.lang.String str10 = interval9.toString();
        boolean boolean11 = interval5.overlaps((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        long long20 = dateTimeZone17.nextTransition((long) 1);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime23.set(dateTimeFieldType26, 1);
        org.joda.time.LocalDate.Property property29 = localDate21.property(dateTimeFieldType26);
        org.joda.time.LocalDate localDate30 = property29.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withWeekOfWeekyear(4);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        int int34 = calendar33.getMinimalDaysInFirstWeek();
        calendar33.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay39 = org.joda.time.YearMonthDay.fromCalendarFields(calendar33);
        org.joda.time.Period period40 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.Period period43 = period40.withPeriodType(periodType41);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) yearMonthDay39, periodType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str46 = dateTimeFieldType45.toString();
        int int47 = yearMonthDay39.indexOf(dateTimeFieldType45);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay39.withDayOfMonth(20);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight62.getZone();
        org.joda.time.DateMidnight dateMidnight64 = yearMonthDay57.toDateMidnight(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay57.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay57.withYear(266);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType71 = periodType70.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 'a', dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 'a', dateTimeZone77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate75, (org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = localDate78.isSupported(dateTimeFieldType80);
        org.joda.time.Chronology chronology82 = localDate78.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.minutes();
        org.joda.time.DurationField durationField84 = chronology82.weekyears();
        org.joda.time.Period period85 = new org.joda.time.Period(0L, chronology82);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType71, chronology82);
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay67.withChronologyRetainFields(chronology82);
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str92 = dateTimeZone90.getNameKey((-1L));
        org.joda.time.YearMonthDay yearMonthDay93 = new org.joda.time.YearMonthDay(dateTimeZone90);
        org.joda.time.DateTime dateTime94 = yearMonthDay67.toDateTimeAtCurrentTime(dateTimeZone90);
        org.joda.time.Interval interval95 = yearMonthDay39.toInterval(dateTimeZone90);
        java.lang.String str96 = interval95.toString();
        org.joda.time.Chronology chronology97 = interval95.getChronology();
        boolean boolean98 = interval5.isAfter((org.joda.time.ReadableInterval) interval95);
        org.joda.time.Interval interval99 = interval95.toInterval();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str10, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-61427868389658,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=30,MILLISECOND=442,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "year" + "'", str46, "year");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "0023-06-08T00:00:00.000+38:53/0023-06-09T00:00:00.000+38:53" + "'", str96, "0023-06-08T00:00:00.000+38:53/0023-06-09T00:00:00.000+38:53");
        org.junit.Assert.assertNotNull(chronology97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(interval99);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod28.setYears(53);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime1.toMutableDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.monthOfYear();
        java.util.Date date46 = mutableDateTime1.toDate();
        mutableDateTime1.addMillis(52);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime1.weekyear();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property49.getFieldType();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Sun Feb 23 18:22:01 GMT 55");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds(52);
        org.joda.time.Period period5 = org.joda.time.Period.minutes(15);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        boolean boolean7 = localTime3.equals((java.lang.Object) hours6);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        int int10 = mutablePeriod9.getSeconds();
        mutablePeriod9.addHours((int) (short) 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Instant instant27 = instant13.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        org.joda.time.Duration duration41 = period35.toDurationTo((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Instant instant42 = instant28.minus((org.joda.time.ReadableDuration) duration41);
        boolean boolean43 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime45.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        long long55 = dateTimeZone53.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(17);
        org.joda.time.DateTime dateTime62 = dateMidnight61.toDateTimeISO();
        org.joda.time.DateTime dateTime64 = dateTime62.withMinuteOfHour(38);
        int int65 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime62);
        mutableDateTime45.setZone(dateTimeZone53);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean74 = interval70.contains((org.joda.time.ReadableInterval) interval73);
        java.lang.String str75 = interval70.toString();
        boolean boolean76 = interval67.isAfter((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Interval interval77 = interval70.toInterval();
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval70);
        mutablePeriod9.setMinutes(5);
        org.joda.time.Period period81 = mutablePeriod9.toPeriod();
        int int83 = mutablePeriod9.getValue((int) (short) 1);
        int int84 = mutablePeriod9.getMillis();
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.years();
        mutablePeriod9.set(durationFieldType85, 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime89 = localTime3.withFieldAdded(durationFieldType85, 1640995120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 139980000 + "'", int65 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str75, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(durationFieldType85);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant29 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (short) -1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        mutableDateTime31.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime31.set(dateTimeFieldType34, 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant29, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant59 = instant29.minus((long) 11);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime60.withYearOfEra((-800321));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -800321 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(54);
        org.joda.time.LocalTime localTime13 = localTime9.plusMillis(9);
        org.joda.time.LocalTime localTime15 = localTime13.withHourOfDay(5);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(dateTimeZone21);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.minusSeconds((int) '4');
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 10);
        int int28 = mutablePeriod27.getWeeks();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay23.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay23.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withMinuteOfHour(29);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime13, (org.joda.time.ReadablePartial) timeOfDay33, periodType34);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        boolean boolean16 = timeZone15.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        int int27 = localDate23.getWeekyear();
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 267, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyear();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = dateTimeField31.getAsShortText((int) (byte) 0, locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone15, locale33);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale.Builder builder37 = builder5.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder5.removeUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder40.setLanguage("17");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 17 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514010668,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=30,MILLISECOND=668,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ita" + "'", str36, "ita");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        long long14 = durationField11.subtract(32820000L, (long) 'x');
        java.lang.String str15 = durationField11.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3786619980000L) + "'", long14 == (-3786619980000L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DurationField[weekyears]" + "'", str15, "DurationField[weekyears]");
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        java.util.Date date6 = new java.util.Date(4, 139980000, 5, 16, 0, 8);
        int int7 = date6.getHours();
        date6.setMinutes(79464093);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 06 01:33:08 GMT 11667055");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        int int14 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYear(2);
        int int17 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = localTime18.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(10);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime25 = property23.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime27 = localTime25.withHourOfDay(20);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours(1961);
        org.joda.time.LocalTime localTime31 = localTime27.minusSeconds(454);
        org.joda.time.Period period36 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period37 = new org.joda.time.Period();
        org.joda.time.Period period39 = period37.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean41 = period39.isSupported(durationFieldType40);
        org.joda.time.Period period43 = period36.withFieldAdded(durationFieldType40, 0);
        org.joda.time.Period period45 = period43.withMinutes((int) (short) 0);
        int int46 = period43.getHours();
        org.joda.time.LocalTime localTime47 = localTime27.minus((org.joda.time.ReadablePeriod) period43);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(868);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime8.withHourOfDay(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusSeconds(32769);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withYearOfEra(685);
        int int18 = localDateTime17.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 685 + "'", int18 == 685);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(5070, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("weekyear");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = property9.getAsText(locale11);
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = locale11.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale5, locale11, locale16, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Collection<java.util.Locale> localeCollection24 = null;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection24);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2" + "'", str12, "2");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Deutsch (Deutschland)" + "'", str14, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusMonths(79315175);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period30);
        int int32 = yearMonthDay20.getMonthOfYear();
        org.joda.time.Period period33 = new org.joda.time.Period();
        org.joda.time.Period period35 = period33.minusMonths(53);
        org.joda.time.Period period37 = period33.plusSeconds(9);
        int int38 = period37.getYears();
        org.joda.time.Period period39 = new org.joda.time.Period();
        org.joda.time.Period period41 = period39.minusMonths(53);
        org.joda.time.Period period43 = period39.plusSeconds(9);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period45 = period43.normalizedStandard(periodType44);
        org.joda.time.Period period46 = period37.withPeriodType(periodType44);
        org.joda.time.Period period48 = period37.plusMonths(150);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime50 = yearMonthDay49.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868388924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=31,MILLISECOND=176,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(79320);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        int int11 = dateTime10.getMonthOfYear();
        int int12 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withEra(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes((int) ' ');
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekyear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = new org.joda.time.DurationFieldType[] { durationFieldType2 };
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.forFields(durationFieldTypeArray3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.forFields(durationFieldTypeArray3);
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period(4320000000L, periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.LocalDate localDate12 = localDate5.minusWeeks(489);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.LocalDate localDate5 = dateTime3.toLocalDate();
        org.joda.time.DateTime dateTime7 = dateTime3.minusMinutes(79434912);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        mutableDateTime24.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime24.set(dateTimeFieldType27, 1);
        org.joda.time.LocalDate.Property property30 = localDate22.property(dateTimeFieldType27);
        org.joda.time.LocalDate localDate31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate33 = localDate31.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property34 = localDate31.centuryOfEra();
        org.joda.time.LocalDate localDate36 = localDate31.plusMonths(122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDate36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean13 = interval9.contains((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Chronology chronology14 = interval9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfFloorCopy();
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.Interval interval24 = interval23.toInterval();
        org.joda.time.Chronology chronology25 = interval23.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 1961, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType15.getField(chronology25);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) interval9, chronology25);
        org.joda.time.Chronology chronology29 = interval9.getChronology();
        org.joda.time.Chronology chronology30 = chronology29.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(79320, 975, 39097445, 79582, 5070, 34, 57, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79582 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.Instant instant5 = dateTime3.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime3.withWeekOfWeekyear(1);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale9.getDisplayCountry(locale10);
        java.lang.String str13 = locale9.getDisplayVariant();
        java.lang.String str14 = dateTime3.toString("20:37:39.245", locale9);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Taiwan" + "'", str12, "Taiwan");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "20:37:39.245" + "'", str14, "20:37:39.245");
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        java.lang.String str32 = timeZone30.getID();
        timeZone30.setRawOffset(19);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514011795,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=31,MILLISECOND=895,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GMT" + "'", str32, "GMT");
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale6, locale12, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.String[] strArray33 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        strSet34.clear();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Collection<java.lang.String> strCollection42 = null;
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strCollection42, filteringMode43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfMonth();
        org.joda.time.DurationField durationField56 = property55.getDurationField();
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = property55.getAsText(locale57);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.lang.String str60 = locale57.getDisplayName(locale59);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale61.getDisplayCountry(locale62);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale51, locale57, locale62, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Collection<java.util.Locale> localeCollection70 = null;
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, localeCollection70);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList71, filteringMode72);
        java.lang.String[] strArray81 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        java.util.Iterator<java.lang.String> strItor84 = strSet82.iterator();
        strSet82.clear();
        java.lang.Object[] objArray86 = strSet82.toArray();
        java.lang.String str87 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strSet82);
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strSet82);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch (Deutschland)" + "'", str15, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2" + "'", str58, "2");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Deutsch (Deutschland)" + "'", str60, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Taiwan" + "'", str64, "Taiwan");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) 52, chronology1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusYears((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight2.toYearMonthDay();
        boolean boolean6 = dateMidnight2.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay14.toDateMidnight(dateTimeZone20);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay14.dayOfMonth();
        int int23 = property22.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = property27.getAsText(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale29.getDisplayName(locale31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = localDate34.getField(1);
        java.lang.String str37 = dateTimeField36.getName();
        boolean boolean38 = dateTimeField36.isLenient();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        int int48 = localDate44.getWeekyear();
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDate44, locale50);
        java.lang.String str52 = locale29.getDisplayScript(locale50);
        java.lang.String str53 = locale29.getLanguage();
        java.util.Set<java.lang.Character> charSet54 = locale29.getExtensionKeys();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = locale29.getDisplayLanguage(locale55);
        int int57 = property22.getMaximumTextLength(locale29);
        org.joda.time.DateTimeField dateTimeField58 = property22.getField();
        org.joda.time.YearMonthDay yearMonthDay59 = property22.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight2.withFields((org.joda.time.ReadablePartial) yearMonthDay59);
        int int61 = dateMidnight60.getHourOfDay();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.lang.String str65 = locale63.getLanguage();
        java.lang.String str66 = dateMidnight60.toString("2022-02-07", locale63);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 28 + "'", int23 == 28);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2" + "'", str30, "2");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Deutsch (Deutschland)" + "'", str32, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "monthOfYear" + "'", str37, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc6d4" + "'", str51, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "de" + "'", str53, "de");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Deutsch" + "'", str56, "Deutsch");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "francese" + "'", str64, "francese");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "fr" + "'", str65, "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-07" + "'", str66, "2022-02-07");
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        boolean boolean56 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime32.toMutableDateTimeISO();
        mutableDateTime57.setMinuteOfDay(98);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfEra();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable5, (org.joda.time.ReadablePartial) timeOfDay6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        org.joda.time.Chronology chronology34 = yearMonthDay27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay27.plusMonths(2035);
        org.joda.time.Interval interval37 = yearMonthDay27.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868387763,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=32,MILLISECOND=256,ZONE_OFFSET=19,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(interval37);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        int int12 = dateMidnight5.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.Period period23 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.Period period26 = period23.withPeriodType(periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withMillisRemoved();
        int int28 = periodType27.size();
        org.joda.time.PeriodType periodType29 = periodType27.withSecondsRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period();
        org.joda.time.Period period32 = period30.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate localDate46 = localDate40.withDayOfMonth(13);
        org.joda.time.DateTime dateTime47 = localDate40.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology48 = localDate40.getChronology();
        mutablePeriod36.add((long) '4', chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.DurationField durationField51 = chronology48.months();
        org.joda.time.DurationField durationField52 = durationFieldType33.getField(chronology48);
        boolean boolean53 = periodType27.isSupported(durationFieldType33);
        org.joda.time.LocalDate localDate55 = localDate21.withFieldAdded(durationFieldType33, 12);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) 53);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime14 = dateTime12.withYear(79514722);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) 79514722);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate19 = property17.setCopy(53);
        org.joda.time.LocalDate localDate20 = property17.withMaximumValue();
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime38 = property35.set(9);
        org.joda.time.MutableDateTime mutableDateTime39 = property35.getMutableDateTime();
        boolean boolean40 = dateMidnight32.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.setMillisOfSecond(2);
        mutableDateTime39.addMillis((int) (byte) 100);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        boolean boolean46 = property21.equals((java.lang.Object) mutableDateTime23);
        boolean boolean48 = mutableDateTime23.isAfter(3974400000L);
        org.joda.time.DateTime dateTime49 = mutableDateTime23.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant17 = instant0.withDurationAdded((long) 38, 115);
        org.joda.time.Chronology chronology18 = instant0.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(obj0);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        long long7 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(17);
        org.joda.time.DateTime dateTime14 = dateMidnight13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(38);
        int int17 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime14.getZone();
        org.joda.time.DateTime dateTime20 = dateTime14.plusMonths(10);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-8639999983L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime20.withHourOfDay(575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 139980000 + "'", int17 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean57 = interval53.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = interval2.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Chronology chronology59 = interval2.getChronology();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getMinuteOfDay();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime60.withFieldAdded(durationFieldType62, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1326 + "'", int61 == 1326);
        org.junit.Assert.assertNotNull(durationFieldType62);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        long long16 = dateTimeZone13.nextTransition((long) 1);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        mutableDateTime19.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime19.set(dateTimeFieldType22, 1);
        org.joda.time.LocalDate.Property property25 = localDate17.property(dateTimeFieldType22);
        boolean boolean26 = localDate3.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        int int29 = localDate28.getDayOfYear();
        org.joda.time.Chronology chronology30 = localDate28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType22.getField(chronology30);
        org.joda.time.Period period33 = new org.joda.time.Period((-8639999983L), chronology30);
        org.joda.time.Period period35 = period33.plusHours(21);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField4 = mutableDateTime1.getRoundingField();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate10.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str19 = dateTimeZone17.getNameKey((-1L));
        java.lang.String str20 = dateTimeZone17.toString();
        org.joda.time.Interval interval21 = localDate10.toInterval(dateTimeZone17);
        mutableDateTime1.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = property27.getAsText(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale29.getDisplayName(locale31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = localDate34.getField(1);
        java.lang.String str37 = dateTimeField36.getName();
        boolean boolean38 = dateTimeField36.isLenient();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        int int48 = localDate44.getWeekyear();
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDate44, locale50);
        java.lang.String str52 = locale29.getDisplayScript(locale50);
        java.lang.String str53 = locale29.getDisplayVariant();
        java.lang.String str54 = locale29.getISO3Country();
        java.lang.String str55 = dateTimeZone17.getName(0L, locale29);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+38:53" + "'", str20, "+38:53");
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2" + "'", str30, "2");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Deutsch (Deutschland)" + "'", str32, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "monthOfYear" + "'", str37, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc6d4" + "'", str51, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DEU" + "'", str54, "DEU");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+38:53" + "'", str55, "+38:53");
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Millis");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("Deutsch");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguageTag("2022-01-03");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "millis");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.DateTime dateTime12 = localDateTime6.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 10);
        int int15 = mutablePeriod14.getWeeks();
        mutablePeriod14.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod14.setYears(53);
        mutablePeriod14.setMinutes(54);
        org.joda.time.DateTime dateTime29 = dateTime12.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        int int30 = mutablePeriod14.getHours();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(14);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.plusMinutes(150);
        java.lang.String str12 = timeOfDay11.toString();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusMillis(3277017);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = timeOfDay14.toString("gregory");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: g");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "T02:30:00.000" + "'", str12, "T02:30:00.000");
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.DateTime dateTime15 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate8.getChronology();
        mutablePeriod4.add((long) '4', chronology16);
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, periodType1, chronology16);
        mutablePeriod19.setMinutes(11);
        int int22 = mutablePeriod19.getSeconds();
        mutablePeriod19.addDays(52);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str4 = dateTimeZone2.getNameKey((-1L));
        java.lang.String str5 = dateTimeZone2.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(79308922);
        java.lang.String str10 = timeOfDay7.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+38:53" + "'", str5, "+38:53");
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "T22:06:32.702" + "'", str10, "T22:06:32.702");
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.property(dateTimeFieldType5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.withMillis(53580999L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        int int6 = mutableDateTime5.getRoundingMode();
        mutableDateTime5.setDate(139980267L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withSecondOfMinute(20);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay3.withMillisOfSecond(61200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61200000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder5 = builder3.setLanguage("Millis");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension('#', "256");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        int int14 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusMonths(402);
        int int17 = localDateTime16.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        long long20 = dateTimeZone17.nextTransition((long) 1);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        mutableDateTime23.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime23.set(dateTimeFieldType26, 1);
        org.joda.time.LocalDate.Property property29 = localDate21.property(dateTimeFieldType26);
        boolean boolean30 = localDate7.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        int int33 = localDate32.getDayOfYear();
        org.joda.time.Chronology chronology34 = localDate32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType26.getField(chronology34);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-259200000L), 875L, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((int) '4', 1915, (-9054), chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 54 + "'", int33 == 54);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.withField(dateTimeFieldType10, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        boolean boolean14 = dateTime12.isEqualNow();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 57);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Instant instant34 = instant20.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.Duration duration64 = period58.toDurationTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Instant instant65 = instant51.minus((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean74 = interval70.contains((org.joda.time.ReadableInterval) interval73);
        boolean boolean75 = interval19.contains((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Interval interval76 = interval19.toInterval();
        org.joda.time.DateTime dateTime77 = interval19.getEnd();
        org.joda.time.DateTime dateTime79 = dateTime77.plus((long) 55);
        boolean boolean80 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = property7.setCopy(15);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(32770);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMinuteOfHour(0);
        int int16 = localDateTime11.getMillisOfDay();
        int int17 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plusYears(26);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 79592934 + "'", int16 == 79592934);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2015 + "'", int17 == 2015);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfCentury();
        java.lang.String str12 = dateTimeField11.getName();
        long long14 = dateTimeField11.remainder((long) 79437);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfCentury" + "'", str12, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 79437L + "'", long14 == 79437L);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        java.util.Date date13 = localDateTime12.toDate();
        date13.setTime((long) 24);
        java.util.Date date21 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date21.setMonth((int) (short) 1);
        java.util.Date date29 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date29.setMonth((int) (short) 1);
        boolean boolean32 = date21.before(date29);
        int int33 = date21.getHours();
        date21.setYear(1969);
        date21.setTime((long) 79334);
        java.time.Instant instant38 = date21.toInstant();
        int int39 = date13.compareTo(date21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:01:19 GMT 1970");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 13 + "'", int33 == 13);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale2);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        java.lang.String str7 = locale6.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale6.getUnicodeLocaleType("1970-01-02T14:53:00.017+38:53");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 1970-01-02T14:53:00.017+38:53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay19.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay19.toDateMidnight();
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay19.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay19.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay19.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay19.minusMonths(1970);
        long long36 = chronology10.set((org.joda.time.ReadablePartial) yearMonthDay34, (long) 79321);
        org.joda.time.DateTimeField dateTimeField37 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField38 = dateTimeField37.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3535142320679L) + "'", long36 == (-3535142320679L));
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay6.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra(504);
        org.joda.time.DateTime dateTime26 = dateTime22.minusWeeks(37439);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(2022);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant29, (org.joda.time.ReadableInstant) instant30);
        org.joda.time.Period period32 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.Period period35 = period32.withPeriodType(periodType33);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime37.addMinutes(266);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, readableDuration66);
        org.joda.time.Duration duration68 = period62.toDurationTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Instant instant69 = instant55.minus((org.joda.time.ReadableDuration) duration68);
        boolean boolean70 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration68);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration72 = period32.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Duration duration75 = mutablePeriod73.toDurationFrom(readableInstant74);
        org.joda.time.DateTime dateTime77 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration75, 29);
        org.joda.time.DateTime.Property property78 = dateTime26.secondOfMinute();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868386771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=248,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        java.lang.String str62 = interval57.toString();
        boolean boolean63 = interval54.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Interval interval64 = interval57.toInterval();
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76);
        org.joda.time.Duration duration78 = period72.toDurationTo((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Instant instant79 = instant65.minus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 'a', dateTimeZone82);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((long) 'a', dateTimeZone85);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate83, (org.joda.time.ReadablePartial) localDate86);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.DateMidnight dateMidnight90 = new org.joda.time.DateMidnight(1L, dateTimeZone89);
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight90, readableDuration91);
        org.joda.time.Duration duration93 = period87.toDurationTo((org.joda.time.ReadableInstant) dateMidnight90);
        org.joda.time.Instant instant94 = instant80.minus((org.joda.time.ReadableDuration) duration93);
        boolean boolean95 = duration78.isLongerThan((org.joda.time.ReadableDuration) duration93);
        org.joda.time.Interval interval96 = interval57.withDurationAfterStart((org.joda.time.ReadableDuration) duration93);
        long long97 = interval96.getStartMillis();
        org.joda.time.MutableInterval mutableInterval98 = interval96.toMutableInterval();
        org.joda.time.Interval interval99 = interval96.toInterval();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str62, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertNotNull(mutableInterval98);
        org.junit.Assert.assertNotNull(interval99);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField(1);
        java.lang.String str36 = dateTimeField35.getName();
        boolean boolean37 = dateTimeField35.isLenient();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDate43.isSupported(dateTimeFieldType45);
        int int47 = localDate43.getWeekyear();
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDate43, locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone30, locale49);
        // The following exception was thrown during execution in test generation
        try {
            calendar51.set(39060310, 2332);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39060310");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514013353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=372,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "monthOfYear" + "'", str36, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc6d4" + "'", str50, "\uc6d4");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645514013353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=372,ZONE_OFFSET=19,DST_OFFSET=0]");
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundHalfFloorCopy();
        org.joda.time.Interval interval14 = property11.toInterval();
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 1961, chronology16);
        org.joda.time.DurationField durationField18 = chronology16.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(79503984, 79570599, 279, (int) '4', 292, 55, 56502, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        int int15 = localDate11.getWeekyear();
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.joda.time.Period period18 = new org.joda.time.Period(1010016000000L, (long) 35, chronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
        long long28 = dateTimeZone25.nextTransition((long) 1);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 13, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay37.toDateMidnight(dateTimeZone43);
        java.lang.String str46 = dateTimeZone43.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = dateTime29.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1010016000000L, dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone43);
        java.io.Writer writer51 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer51, 53580000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+38:53" + "'", str46, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(17);
        org.joda.time.DateTime dateTime13 = dateMidnight12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate23 = localDate17.minus((org.joda.time.ReadablePeriod) period22);
        boolean boolean24 = interval6.equals((java.lang.Object) period22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime57.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        long long67 = dateTimeZone65.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour(38);
        int int77 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime74);
        mutableDateTime57.setZone(dateTimeZone65);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean86 = interval82.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str87 = interval82.toString();
        boolean boolean88 = interval79.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval89 = interval6.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Interval interval91 = interval79.withEndMillis((long) 79318959);
        boolean boolean92 = interval79.isBeforeNow();
        org.joda.time.Interval interval93 = interval79.toInterval();
        boolean boolean94 = interval93.isAfterNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 139980000 + "'", int77 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str87, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Days days7 = period4.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period10 = period4.withFieldAdded(durationFieldType8, 0);
        org.joda.time.Period period12 = period10.minusSeconds((int) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.minusDays(17);
        org.joda.time.DateTime dateTime19 = dateMidnight18.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = localDate25.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = localDate25.getChronology();
        org.joda.time.LocalDate localDate31 = localDate25.minusDays(100);
        int int32 = localDate25.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight33 = localDate25.toDateMidnight();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight33.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = null;
        boolean boolean61 = localDate58.isSupported(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = localDate58.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.minutes();
        org.joda.time.DurationField durationField64 = chronology62.weekyears();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology62);
        mutablePeriod50.setPeriod((long) (-1), (long) '4', chronology62);
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay((java.lang.Object) period12, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationField64);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = mutablePeriod44.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod46 = mutablePeriod44.copy();
        mutablePeriod46.addWeeks(900);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.Chronology chronology34 = dateTimeFormatter33.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withOffsetParsed();
        int int36 = dateTimeFormatter35.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2000 + "'", int36 == 2000);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType5, chronology7);
        org.joda.time.Period period9 = interval2.toPeriod(periodType5);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.Duration duration26 = period20.toDurationTo((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Instant instant27 = instant13.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval12.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.Duration duration42 = period36.toDurationTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Instant instant43 = instant29.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, readableDuration55);
        org.joda.time.Duration duration57 = period51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Instant instant58 = instant44.minus((org.joda.time.ReadableDuration) duration57);
        boolean boolean59 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval60 = interval12.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean67 = interval63.contains((org.joda.time.ReadableInterval) interval66);
        boolean boolean68 = interval12.contains((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.dayOfMonth();
        org.joda.time.DurationField durationField73 = property72.getDurationField();
        org.joda.time.DateMidnight dateMidnight74 = property72.roundHalfFloorCopy();
        org.joda.time.Interval interval75 = property72.toInterval();
        org.joda.time.Interval interval76 = interval75.toInterval();
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.Interval interval78 = interval76.withPeriodAfterStart(readablePeriod77);
        boolean boolean79 = interval66.isBefore((org.joda.time.ReadableInterval) interval78);
        org.joda.time.MutableInterval mutableInterval80 = interval66.toMutableInterval();
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime84 = property83.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime86 = property83.set(9);
        org.joda.time.MutableDateTime mutableDateTime87 = property83.getMutableDateTime();
        mutableDateTime87.addMillis(11);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime87.add(durationFieldType90, 31);
        boolean boolean93 = interval66.isBefore((org.joda.time.ReadableInstant) mutableDateTime87);
        org.joda.time.Interval interval94 = interval2.overlap((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Interval interval96 = interval2.withEndMillis(3600100L);
        long long97 = interval2.getStartMillis();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableInterval80);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNull(interval94);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date12 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date12.setMonth((int) (short) 1);
        java.util.Date date20 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date20.setMonth((int) (short) 1);
        java.util.Date date28 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date28.setMonth((int) (short) 1);
        boolean boolean31 = date20.before(date28);
        int int32 = date20.getHours();
        boolean boolean33 = date12.before(date20);
        date12.setMinutes(231);
        calendar0.setTime(date12);
        date12.setYear(36694555);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1731740940019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=51,SECOND=0,MILLISECOND=0,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 15 16:51:00 GMT 36696455");
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate2.withMonthOfYear(11);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 10);
        int int41 = mutablePeriod40.getWeeks();
        mutablePeriod40.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod40.setYears(53);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod40);
        boolean boolean54 = localDate2.equals((java.lang.Object) mutableDateTime13);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime13.copy();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.secondOfDay();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("year");
        int int3 = timeZone1.getOffset((long) 100);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514013663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=663,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusMillis(256);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = property11.addNoWrapToCopy(72716537);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.DateTime dateTime24 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone32);
        long long35 = dateTimeZone32.nextTransition((long) 1);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 13, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        int int42 = period41.size();
        java.lang.String str43 = period41.toString();
        org.joda.time.Period period45 = period41.plusMonths(11);
        boolean boolean46 = dateTime36.equals((java.lang.Object) period45);
        int[] intArray49 = chronology25.get((org.joda.time.ReadablePeriod) period45, (long) 7, (long) ' ');
        int int50 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate12, intArray49);
        java.util.Date date51 = localDate12.toDate();
        date51.setMinutes(36023888);
        org.joda.time.YearMonthDay yearMonthDay54 = org.joda.time.YearMonthDay.fromDateFields(date51);
        java.lang.Object obj55 = date51.clone();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54 + "'", int13 == 54);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0S" + "'", str43, "PT0S");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
        org.junit.Assert.assertNotNull(date51);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Mon Aug 21 14:08:00 GMT 2090");
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "Mon Aug 21 14:08:00 GMT 2090");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "Mon Aug 21 14:08:00 GMT 2090");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "Mon Aug 21 14:08:00 GMT 2090");
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        long long7 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        org.joda.time.YearMonthDay yearMonthDay34 = property33.getYearMonthDay();
        int int35 = property33.getMinimumValue();
        java.lang.Object obj36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(obj36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant(obj36);
        org.joda.time.Instant instant39 = instant38.toInstant();
        boolean boolean40 = property33.equals((java.lang.Object) instant38);
        java.lang.String str41 = instant38.toString();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868386204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=815,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-292275054) + "'", int35 == (-292275054));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T07:13:33.797Z" + "'", str41, "2022-02-22T07:13:33.797Z");
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.LocalDate localDate13 = property11.getLocalDate();
        org.joda.time.LocalDate localDate15 = property11.setCopy(79437);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        long long21 = chronology10.set((org.joda.time.ReadablePartial) localDate19, 10L);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        boolean boolean25 = localDate19.equals((java.lang.Object) property24);
        int int26 = localDate19.size();
        org.joda.time.LocalDate localDate28 = localDate19.plusWeeks(17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1036800010L + "'", long21 == 1036800010L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.plusDays(537);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis(14);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusSeconds(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime6.plusSeconds(4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant42, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.Period period45 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType47 = periodType46.withSecondsRemoved();
        org.joda.time.Period period48 = period45.withPeriodType(periodType46);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime50.addMinutes(266);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64);
        org.joda.time.Duration duration66 = period60.toDurationTo((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Instant instant67 = instant53.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 'a', dateTimeZone73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate71, (org.joda.time.ReadablePartial) localDate74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight78, readableDuration79);
        org.joda.time.Duration duration81 = period75.toDurationTo((org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Instant instant82 = instant68.minus((org.joda.time.ReadableDuration) duration81);
        boolean boolean83 = duration66.isLongerThan((org.joda.time.ReadableDuration) duration81);
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration85 = period45.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant43, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(1L, dateTimeZone88);
        org.joda.time.DateMidnight.Property property90 = dateMidnight89.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight89.minusDays(17);
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration85, (org.joda.time.ReadableInstant) dateMidnight89, periodType93);
        int int95 = duration39.compareTo((org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateTime dateTime96 = dateTime6.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime98 = dateTime96.minusSeconds(1323);
        org.joda.time.DateTime.Property property99 = dateTime98.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int4 = calendar0.getGreatestMinimum(0);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar0.getLeastMaximum(183);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 183");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514013980,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=33,MILLISECOND=999,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        boolean boolean16 = date5.before(date13);
        java.util.Date date22 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date22.setMonth((int) (short) 1);
        int int25 = date22.getTimezoneOffset();
        int int26 = date22.getHours();
        boolean boolean27 = date5.before(date22);
        long long28 = date22.getTime();
        int int29 = date22.getHours();
        int int30 = date22.getMonth();
        int int31 = date22.getDate();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        int int36 = dateMidnight34.getWeekyear();
        java.util.Date date37 = dateMidnight34.toDate();
        java.time.Instant instant38 = date37.toInstant();
        java.util.Date date39 = java.util.Date.from(instant38);
        java.util.Date date40 = java.util.Date.from(instant38);
        date40.setMonth(16);
        int int43 = date22.compareTo(date40);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1731754200019L) + "'", long28 == (-1731754200019L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 13 + "'", int29 == 13);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 15 + "'", int31 == 15);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Dec 31 09:07:00 GMT 1969");
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Wed Dec 31 09:07:00 GMT 1969");
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Sun May 31 09:07:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        java.lang.String str15 = duration13.toString();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        mutableDateTime17.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime17.set(dateTimeFieldType20, 1);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Interval interval41 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration39);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime17.dayOfMonth();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime17.year();
        mutableDateTime17.setMillis((-259200000L));
        int int47 = mutableDateTime17.getMinuteOfDay();
        mutableDateTime17.addYears(32770);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.ReadableInstant readableInstant51 = null;
        mutableDateTime17.setMillis(readableInstant51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime17.year();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 893 + "'", int47 == 893);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.withField(dateTimeFieldType10, 4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.Period period24 = org.joda.time.Period.weeks(126);
        org.joda.time.Period period26 = period24.minusWeeks(16);
        org.joda.time.LocalDate localDate28 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 4);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) period26);
        org.joda.time.Instant instant30 = dateTime6.toInstant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(instant30);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DurationField durationField35 = property33.getDurationField();
        java.lang.String str36 = property33.toString();
        org.joda.time.YearMonthDay yearMonthDay37 = property33.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868385726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=34,MILLISECOND=293,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[year]" + "'", str36, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay37);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        java.lang.String str7 = interval2.toString();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean14 = interval10.contains((org.joda.time.ReadableInterval) interval13);
        boolean boolean15 = interval2.isBefore((org.joda.time.ReadableInterval) interval10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology26 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = dateMidnight32.getZone();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay35.toDateMidnight(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight43 = yearMonthDay35.toDateMidnight();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateMidnight dateMidnight46 = yearMonthDay35.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay35.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay35.minusMonths(1970);
        long long52 = chronology26.set((org.joda.time.ReadablePartial) yearMonthDay50, (long) 79321);
        org.joda.time.Interval interval53 = interval10.withChronology(chronology26);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(chronology26);
        long long58 = chronology26.add((long) 35213769, 0L, 79423);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str7, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-3535142320679L) + "'", long52 == (-3535142320679L));
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 35213769L + "'", long58 == 35213769L);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(287);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfEra(741);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis(657);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withHourOfDay(6609303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6609303 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        org.joda.time.DateTime dateTime35 = yearMonthDay34.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = yearMonthDay34.getValue(286);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 286");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868385623,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=34,MILLISECOND=396,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight3 = localDate1.toDateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withYearOfEra(98);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        int int7 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) (short) 1, 266, (int) (byte) 100);
        int int12 = calendar6.getWeeksInWeekYear();
        java.util.Date date18 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date18.setMonth((int) (short) 1);
        calendar6.setTime(date18);
        boolean boolean22 = dateMidnight5.equals((java.lang.Object) calendar6);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.add(287, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1731754200019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=19,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=19,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod28.setYears(53);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime1.add(durationFieldType42, (int) (byte) 10);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int26 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone27 = calendar0.getTimeZone();
        java.util.TimeZone.setDefault(timeZone27);
        boolean boolean29 = timeZone27.observesDaylightTime();
        timeZone27.setID("20:42:14.750");
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868385524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=34,MILLISECOND=476,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514014457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=34,MILLISECOND=457,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusMonths(79315175);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.set(9);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.minuteOfDay();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType35 = periodType34.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.LocalDate localDate47 = localDate41.withDayOfMonth(13);
        org.joda.time.DateTime dateTime48 = localDate41.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology49 = localDate41.getChronology();
        mutablePeriod37.add((long) '4', chronology49);
        org.joda.time.Period period51 = new org.joda.time.Period((-1L), 1L, periodType35, chronology49);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.centuries();
        int int55 = periodType52.indexOf(durationFieldType54);
        boolean boolean56 = periodType35.isSupported(durationFieldType54);
        org.joda.time.Period period57 = new org.joda.time.Period((long) 32770, periodType35);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadablePeriod) period57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Period period60 = period57.plus(readablePeriod59);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period57);
        int int62 = period57.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period64 = period57.plusWeeks(2083);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868385501,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=34,MILLISECOND=499,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 26);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.Interval interval16 = interval15.toInterval();
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 1961, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType7.getField(chronology17);
        boolean boolean20 = dateTimeFieldType6.isSupported(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.dayOfMonth();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 12, periodType5, chronology17);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime26 = localTime24.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime28 = localTime26.plusSeconds(10);
        org.joda.time.LocalTime localTime30 = localTime26.minusSeconds(100);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period(1043940000L, (long) (byte) 10, periodType5, chronology31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 999, 56460000L, periodType5);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property42.addWrapFieldToCopy(36023888);
        java.lang.String str45 = property42.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[monthOfYear]" + "'", str45, "Property[monthOfYear]");
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(139980267L, chronology8);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0");
        org.joda.time.LocalTime localTime3 = localTime1.plusMillis(34);
        java.lang.Object obj4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(obj4);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.LocalTime localTime8 = localTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 79315175);
        org.joda.time.LocalTime localTime10 = localTime3.minusMinutes(292278993);
        org.joda.time.LocalTime.Property property11 = localTime3.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property11.setCopy((-14));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.plusMinutes(4);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        int int6 = localTime5.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = localTime5.withHourOfDay(36000000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 34 + "'", int2 == 34);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfMonth();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval11 = property8.toInterval();
        org.joda.time.Interval interval12 = interval11.toInterval();
        org.joda.time.Chronology chronology13 = interval11.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 1961, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType3.getField(chronology13);
        java.lang.String str16 = chronology13.toString();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 933, chronology13);
        org.joda.time.Period period18 = new org.joda.time.Period((long) 36694555, (long) 2332, chronology13);
        org.joda.time.MutablePeriod mutablePeriod20 = org.joda.time.MutablePeriod.parse("PT0S");
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType25, chronology27);
        org.joda.time.PeriodType periodType29 = periodType25.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 'x', periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusMonths((int) (byte) 10);
        int int39 = dateMidnight36.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 10);
        int int42 = mutablePeriod41.getSeconds();
        mutablePeriod41.setSeconds((int) '#');
        org.joda.time.Period period45 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType47 = periodType46.withSecondsRemoved();
        org.joda.time.Period period48 = period45.withPeriodType(periodType46);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight36.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int51 = mutablePeriod41.getYears();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        int int53 = mutablePeriod41.get(durationFieldType52);
        boolean boolean54 = periodType31.isSupported(durationFieldType52);
        int int55 = mutablePeriod20.indexOf(durationFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period57 = period18.withFieldAdded(durationFieldType52, 72716537);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[+38:53]" + "'", str16, "ISOChronology[+38:53]");
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1961 + "'", int39 == 1961);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfFloorCopy();
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusDays(17);
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight31 = dateTime28.toDateMidnight();
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.Period period37 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate38 = localDate32.minus((org.joda.time.ReadablePeriod) period37);
        boolean boolean39 = interval21.equals((java.lang.Object) period37);
        boolean boolean40 = interval12.isBefore((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localDate46.isSupported(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = localDate46.getChronology();
        org.joda.time.LocalDate localDate52 = localDate46.minusDays(100);
        int int53 = localDate52.getDayOfYear();
        int int54 = localDate52.size();
        org.joda.time.LocalDate.Property property55 = localDate52.centuryOfEra();
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtMidnight();
        org.joda.time.Interval interval57 = interval21.withStart((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology58 = dateTime56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology58.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate65, (org.joda.time.ReadablePartial) localDate68);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = null;
        boolean boolean71 = localDate68.isSupported(dateTimeFieldType70);
        int int72 = localDate68.getWeekyear();
        org.joda.time.Chronology chronology73 = localDate68.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 267, chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.weekyear();
        mutableDateTime1.setChronology(chronology73);
        mutableDateTime1.addDays(187);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 267 + "'", int53 == 267);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        int int2 = mutablePeriod1.getHours();
        mutablePeriod1.addDays(36694555);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        int int3 = dateMidnight2.getYearOfCentury();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period36 = duration17.toPeriod();
        org.joda.time.Period period38 = period36.withMinutes(25728);
        org.joda.time.Period period40 = period38.withDays(2022);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay48.toDateMidnight(dateTimeZone54);
        org.joda.time.YearMonthDay.Property property56 = yearMonthDay48.dayOfMonth();
        int int57 = property56.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DurationField durationField62 = property61.getDurationField();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = property61.getAsText(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.lang.String str66 = locale63.getDisplayName(locale65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(chronology67);
        org.joda.time.DateTimeField dateTimeField70 = localDate68.getField(1);
        java.lang.String str71 = dateTimeField70.getName();
        boolean boolean72 = dateTimeField70.isLenient();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) 'a', dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 'a', dateTimeZone77);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate75, (org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = localDate78.isSupported(dateTimeFieldType80);
        int int82 = localDate78.getWeekyear();
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = dateTimeField70.getAsShortText((org.joda.time.ReadablePartial) localDate78, locale84);
        java.lang.String str86 = locale63.getDisplayScript(locale84);
        java.lang.String str87 = locale63.getLanguage();
        java.util.Set<java.lang.Character> charSet88 = locale63.getExtensionKeys();
        java.util.Locale locale89 = java.util.Locale.GERMANY;
        java.lang.String str90 = locale63.getDisplayLanguage(locale89);
        int int91 = property56.getMaximumTextLength(locale63);
        org.joda.time.DateTimeField dateTimeField92 = property56.getField();
        org.joda.time.YearMonthDay yearMonthDay93 = property56.withMaximumValue();
        boolean boolean94 = period40.equals((java.lang.Object) property56);
        org.joda.time.YearMonthDay yearMonthDay95 = property56.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 28 + "'", int57 == 28);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2" + "'", str64, "2");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Deutsch (Deutschland)" + "'", str66, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "monthOfYear" + "'", str71, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\uc6d4" + "'", str85, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertNotNull(charSet88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Deutsch" + "'", str90, "Deutsch");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(yearMonthDay95);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusMillis(256);
        int int11 = timeOfDay6.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = timeOfDay6.withSecondOfMinute(79491963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79491963 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property14 = dateTime10.secondOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) 10, (int) '#', 1961, (int) (short) -1, (int) '4', 100, 0, (int) (byte) 1);
        org.joda.time.Period period25 = period23.minusYears((int) '4');
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType28, chronology30);
        org.joda.time.PeriodType periodType32 = periodType28.withMillisRemoved();
        org.joda.time.Period period33 = period25.normalizedStandard(periodType28);
        org.joda.time.DateTime dateTime34 = dateTime10.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (byte) 10);
        int int42 = dateMidnight39.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.withDayOfMonth(22);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusWeeks(1969);
        boolean boolean47 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1961 + "'", int42 == 1961);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        int int5 = periodType2.indexOf(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        int int7 = periodType2.indexOf(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 293, (long) 162, periodType2);
        mutablePeriod9.addDays(79320);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        java.util.Date date5 = new java.util.Date(79315, 100, 1915, (int) 'x', 976);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((java.lang.Object) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Tue Aug 01 16:16:00 GMT+00:00 81228");
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withSecondOfMinute(20);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(126);
        int int16 = dateTime15.getSecondOfDay();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3660 + "'", int16 == 3660);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.addHours((int) (short) 0);
        mutablePeriod1.clear();
        org.joda.time.Period period6 = new org.joda.time.Period();
        org.joda.time.Period period8 = period6.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean10 = period8.isSupported(durationFieldType9);
        java.lang.String str11 = durationFieldType9.toString();
        int int12 = mutablePeriod1.get(durationFieldType9);
        int int13 = mutablePeriod1.getMillis();
        int int14 = mutablePeriod1.getYears();
        int int15 = mutablePeriod1.getHours();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone24.isLocalDateTimeGap(localDateTime26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(52, 11, 16, dateTimeZone24);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.Duration duration42 = period36.toDurationTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Instant instant43 = instant29.minus((org.joda.time.ReadableDuration) duration42);
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) instant43);
        org.joda.time.LocalDate localDate45 = dateMidnight28.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) localDate45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyears" + "'", str11, "weekyears");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(localDate45);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtMidnight();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime15.set(dateTimeFieldType18, 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Instant instant38 = instant24.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime41 = dateTime13.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime44 = dateTime13.withDurationAdded(86400000L, 79315175);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        int int54 = localDate50.getWeekyear();
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.DurationField durationField59 = dateTimeField58.getDurationField();
        int int60 = dateTime13.get(dateTimeField58);
        java.lang.String str61 = dateTimeField58.toString();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 51 + "'", int60 == 51);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DateTimeField[dayOfYear]" + "'", str61, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.minusMonths(53);
        org.joda.time.Period period4 = period0.plusSeconds(9);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.Days days7 = period4.toStandardDays();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology28 = localDate20.getChronology();
        mutablePeriod16.add((long) '4', chronology28);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str35 = dateTimeZone33.getNameKey((long) 451);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone33);
        mutableDateTime9.setZone(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) period4, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(4320000000L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusYears((int) 'a');
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate13 = localDate1.withWeekOfWeekyear(13);
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category15);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDate13.toString("halfdays", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: l");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        long long6 = dateTimeZone2.convertLocalToUTC((long) (byte) 10, false, (long) 657);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        boolean boolean9 = dateTimeZone2.isStandardOffset((long) 143);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = property17.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField20 = property17.getField();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale23);
        java.lang.String str25 = locale22.getDisplayCountry(locale23);
        java.lang.String str26 = dateTimeField20.getAsShortText(126, locale22);
        int int27 = property13.getMaximumShortTextLength(locale22);
        java.lang.String str28 = locale22.getISO3Language();
        java.lang.String str29 = dateTimeZone2.getName((long) 36023888, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-139979990L) + "'", long6 == (-139979990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "126" + "'", str26, "126");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+38:53" + "'", str29, "+38:53");
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder4.setDate(28, 10, 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = property12.getAsText(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        java.lang.String str22 = dateTimeField21.getName();
        boolean boolean23 = dateTimeField21.isLenient();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        int int33 = localDate29.getWeekyear();
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDate29, locale35);
        java.lang.String str37 = locale14.getDisplayScript(locale35);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale35);
        java.util.TimeZone timeZone39 = calendar38.getTimeZone();
        java.util.Calendar.Builder builder40 = builder8.setTimeZone(timeZone39);
        java.util.TimeZone.setDefault(timeZone39);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Deutsch (Deutschland)" + "'", str17, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc6d4" + "'", str36, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645514015150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=35,MILLISECOND=150,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval7 = property4.toInterval();
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 1961, chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(551);
        org.joda.time.LocalTime localTime16 = localTime12.minusMinutes(3277017);
        org.joda.time.LocalTime localTime18 = localTime12.minusSeconds(15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localTime12.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int24 = localDateTime22.indexOf(dateTimeFieldType23);
        boolean boolean25 = dateTime9.isSupported(dateTimeFieldType23);
        int int26 = dateTime9.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 352 + "'", int26 == 352);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay2 = property1.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(139980000);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight8 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.set(9);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.minuteOfDay();
        int int17 = property7.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.addHours(79381);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = property20.add((long) 79315175);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds(1);
        int int14 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property15.getLocalDateTime();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider19);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = localDate26.getField(1);
        java.lang.String str29 = dateTimeField28.getName();
        boolean boolean30 = dateTimeField28.isLenient();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate33, (org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDate36.isSupported(dateTimeFieldType38);
        int int40 = localDate36.getWeekyear();
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDate36, locale42);
        java.lang.String str44 = locale22.getDisplayVariant(locale42);
        java.lang.String str47 = nameProvider19.getShortName(locale42, "25-2ven", "22");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = localDateTime17.toString("yearOfEra", locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Taiwan" + "'", str24, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "monthOfYear" + "'", str29, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc6d4" + "'", str43, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(287);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusMillis(16);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.weekyear();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(3974417000L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(266);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 266 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = localTime3.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds(10);
        org.joda.time.LocalTime localTime9 = localTime5.minusSeconds(100);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.DurationField durationField11 = durationFieldType2.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period(31395219679L, periodType1, chronology10);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        int int3 = dateMidnight2.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDayOfYear(4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks(399);
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withEra(349);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 349 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalTime.Property property10 = localTime7.property(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType20 = periodType19.withSecondsRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableInstant) dateMidnight16, periodType20);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withMillisRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '4', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = localTime27.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime31 = localTime29.plusSeconds(10);
        org.joda.time.LocalTime localTime33 = localTime29.minusSeconds(100);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DurationField durationField35 = durationFieldType26.getField(chronology34);
        int int36 = period25.indexOf(durationFieldType26);
        org.joda.time.Period period38 = period21.withFieldAdded(durationFieldType26, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime40 = localTime7.withFieldAdded(durationFieldType26, 292);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'days' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(17);
        org.joda.time.DateTime dateTime13 = dateMidnight12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate23 = localDate17.minus((org.joda.time.ReadablePeriod) period22);
        boolean boolean24 = interval6.equals((java.lang.Object) period22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime57.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        long long67 = dateTimeZone65.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour(38);
        int int77 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime74);
        mutableDateTime57.setZone(dateTimeZone65);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean86 = interval82.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str87 = interval82.toString();
        boolean boolean88 = interval79.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval89 = interval6.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Interval interval91 = interval79.withEndMillis((long) 79318959);
        org.joda.time.PeriodType periodType92 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType93 = periodType92.withSecondsRemoved();
        org.joda.time.PeriodType periodType94 = periodType93.withSecondsRemoved();
        org.joda.time.Period period95 = interval79.toPeriod(periodType94);
        long long96 = interval79.toDurationMillis();
        long long97 = interval79.getEndMillis();
        org.joda.time.Chronology chronology98 = interval79.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 139980000 + "'", int77 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str87, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 15960017L + "'", long97 == 15960017L);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 100);
        int int39 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay36.plusHours(38);
        org.joda.time.LocalTime localTime42 = timeOfDay36.toLocalTime();
        int int43 = timeOfDay36.getMinuteOfHour();
        org.joda.time.Chronology chronology44 = timeOfDay36.getChronology();
        long long48 = chronology44.add(0L, 31535199679L, (-32));
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(26);
        org.joda.time.format.DateTimePrinter dateTimePrinter54 = dateTimeFormatter51.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1009126389728L) + "'", long48 == (-1009126389728L));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(dateTimePrinter54);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = property7.getAsText(locale9);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale14);
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale9, locale14, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.String[] strArray24 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        boolean boolean32 = strSet25.remove((java.lang.Object) readableDuration30);
        java.util.stream.Stream<java.lang.String> strStream33 = strSet25.parallelStream();
        java.lang.String[] strArray36 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        boolean boolean44 = strSet37.remove((java.lang.Object) readableDuration42);
        int int45 = strSet37.size();
        boolean boolean46 = strSet25.addAll((java.util.Collection<java.lang.String>) strSet37);
        strSet25.clear();
        boolean boolean49 = strSet25.add("10:02:14.181");
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet25);
        int int51 = strSet25.size();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet25.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutsch (Deutschland)" + "'", str12, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Taiwan" + "'", str16, "Taiwan");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Instant instant32 = instant18.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Interval interval33 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 10);
        int int37 = mutablePeriod36.getWeeks();
        mutablePeriod36.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod36.setYears(53);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime9.toMutableDateTime(dateTimeZone51);
        org.joda.time.Period period57 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime9.centuryOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(0L, (long) 1915);
        long long3 = interval2.getStartMillis();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime1.setDate((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.DateTime dateTime13 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology14 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
        long long24 = dateTimeZone21.nextTransition((long) 1);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 13, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        int int31 = period30.size();
        java.lang.String str32 = period30.toString();
        org.joda.time.Period period34 = period30.plusMonths(11);
        boolean boolean35 = dateTime25.equals((java.lang.Object) period34);
        int[] intArray38 = chronology14.get((org.joda.time.ReadablePeriod) period34, (long) 7, (long) ' ');
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period41 = org.joda.time.Period.weeks(1322);
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 10);
        int int49 = mutablePeriod48.getSeconds();
        mutablePeriod48.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType52 = mutablePeriod48.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 431, (long) 14, periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period(2678400000L, (long) 454, periodType52);
        org.joda.time.Period period55 = period41.withPeriodType(periodType52);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period55, 399);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfMonth();
        org.joda.time.DateTime dateTime3 = dateTime0.plusMillis(365);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeField dateTimeField5 = localDate3.getField(1);
        java.lang.String str6 = dateTimeField5.getName();
        boolean boolean7 = dateTimeField5.isLenient();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        int int17 = localDate13.getWeekyear();
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDate13, locale19);
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localDate13.getFields();
        int int22 = localDate13.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 10);
        int int26 = mutablePeriod25.getWeeks();
        int int27 = mutablePeriod25.size();
        org.joda.time.Period period32 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period33 = new org.joda.time.Period();
        org.joda.time.Period period35 = period33.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean37 = period35.isSupported(durationFieldType36);
        org.joda.time.Period period39 = period32.withFieldAdded(durationFieldType36, 0);
        org.joda.time.Seconds seconds40 = period39.toStandardSeconds();
        int int41 = period39.getMinutes();
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDate localDate44 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, 126);
        org.joda.time.LocalDate.Property property45 = localDate44.yearOfEra();
        org.joda.time.LocalDate localDate47 = property45.addToCopy(262);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "monthOfYear" + "'", str6, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc6d4" + "'", str20, "\uc6d4");
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime23 = property21.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = property31.setCopy(8);
        org.joda.time.LocalDateTime localDateTime35 = property31.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime36 = property31.roundFloorCopy();
        java.util.Date date37 = localDateTime36.toDate();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minus(readableDuration38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean50 = localDateTime48.isSupported(dateTimeFieldType49);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime39.withFields((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, readableDuration56);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = property59.setCopy(8);
        org.joda.time.LocalDateTime localDateTime63 = property59.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime64 = property59.withMaximumValue();
        int int65 = property59.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property59.getFieldType();
        org.joda.time.LocalDateTime.Property property67 = localDateTime48.property(dateTimeFieldType66);
        int int68 = localDateTime23.get(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 99 + "'", int65 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 17 + "'", int68 == 17);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime6.isSupported(durationFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.minusMillis(79321);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.minusMinutes(923);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusHours(936);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(17);
        org.joda.time.DateMidnight.Property property14 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.plusMonths(5);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight10.withMillis((long) 139980000);
        long long19 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight10.toMutableDateTime();
        mutableDateTime20.setMillisOfDay(151);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1499L + "'", long19 == 1499L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(17);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight47, periodType51);
        org.joda.time.DateTime dateTime53 = dateMidnight47.toDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.year();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        calendar0.set((int) 'u', 46, 231, 17, 0);
        java.util.TimeZone timeZone31 = calendar0.getTimeZone();
        int int32 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=117,MONTH=46,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=231,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=17,MINUTE=0,SECOND=36,MILLISECOND=291,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514016291,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=36,MILLISECOND=291,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType6 = periodType5.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        org.joda.time.Period period22 = new org.joda.time.Period((-1L), 1L, periodType6, chronology20);
        int int23 = periodType6.size();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        org.joda.time.DateMidnight dateMidnight29 = property27.roundHalfFloorCopy();
        org.joda.time.Interval interval30 = property27.toInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.minusDays(17);
        org.joda.time.DateTime dateTime37 = dateMidnight36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight40 = dateTime37.toDateMidnight();
        org.joda.time.LocalDate localDate41 = dateTime37.toLocalDate();
        org.joda.time.Period period46 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate47 = localDate41.minus((org.joda.time.ReadablePeriod) period46);
        boolean boolean48 = interval30.equals((java.lang.Object) period46);
        boolean boolean49 = periodType6.equals((java.lang.Object) boolean48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate localDate58 = localDate52.withDayOfMonth(13);
        org.joda.time.DateTime dateTime59 = localDate52.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology60 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = dateMidnight66.getZone();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone67);
        long long70 = dateTimeZone67.nextTransition((long) 1);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 13, dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        int int77 = period76.size();
        java.lang.String str78 = period76.toString();
        org.joda.time.Period period80 = period76.plusMonths(11);
        boolean boolean81 = dateTime71.equals((java.lang.Object) period80);
        int[] intArray84 = chronology60.get((org.joda.time.ReadablePeriod) period80, (long) 7, (long) ' ');
        org.joda.time.DateTimeField dateTimeField85 = chronology60.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(100L, (long) 79321, periodType6, chronology60);
        org.joda.time.PeriodType periodType87 = periodType6.withMinutesRemoved();
        org.joda.time.PeriodType periodType88 = periodType6.withMinutesRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((long) (-14), periodType88);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0S" + "'", str78, "PT0S");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType88);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfMonth((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime11.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = property6.getDateTime();
        org.joda.time.DateTime dateTime9 = property6.addWrapFieldToCopy(139980000);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfWeek();
        java.lang.String str13 = dateTimeField11.getAsShortText((long) 1971);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ven" + "'", str13, "ven");
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay8.toDateMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((-2208988799880L), dateTimeZone14);
        org.joda.time.DateTime.Property property17 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.withYear(36161901);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.setTime((long) 17);
        mutableDateTime1.add((-3786619980000L));
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.yearOfEra();
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale29);
        java.lang.String str31 = locale29.getLanguage();
        org.joda.time.MutableDateTime mutableDateTime32 = property27.set("79321170", locale29);
        org.joda.time.Instant instant33 = mutableDateTime32.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("millisOfSecond");
        calendar0.setTimeZone(timeZone9);
        java.lang.String str11 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=36,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=36,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str11, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=36,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(504);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.Period period3 = period0.withPeriodType(periodType1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime5.addMinutes(266);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Instant instant22 = instant8.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration36);
        boolean boolean38 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration36);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration40 = period0.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime5.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setDateTime(25728, 79416419, 115, 26, 92, (int) '4', 15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        int int18 = period16.get(durationFieldType17);
        org.joda.time.MutablePeriod mutablePeriod19 = period16.toMutablePeriod();
        mutablePeriod19.setPeriod((long) 3);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, 35);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateMidnight23);
        org.joda.time.Interval interval25 = dateMidnight23.toInterval();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int27 = calendar26.getMinimalDaysInFirstWeek();
        calendar26.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay32 = org.joda.time.YearMonthDay.fromCalendarFields(calendar26);
        org.joda.time.Period period37 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period38 = new org.joda.time.Period();
        org.joda.time.Period period40 = period38.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean42 = period40.isSupported(durationFieldType41);
        org.joda.time.Period period44 = period37.withFieldAdded(durationFieldType41, 0);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay32.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 12);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight23.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 30);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=-61427868383398,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=36,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateMidnight48);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.minusHours(54);
        int int9 = timeOfDay8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        java.lang.String str62 = interval57.toString();
        boolean boolean63 = interval54.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Interval interval64 = interval57.toInterval();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = interval57.withEnd(readableInstant65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.Interval interval68 = interval66.toInterval();
        org.joda.time.DateTime dateTime69 = interval68.getStart();
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfCentury();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str62, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Instant instant52 = instant38.minus((org.joda.time.ReadableDuration) duration51);
        boolean boolean53 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        boolean boolean62 = interval6.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology63 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        mutableDateTime3.setChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField68 = chronology63.year();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property21 = localDate18.year();
        int int22 = localDate18.getYear();
        int int23 = localDate18.getCenturyOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 10);
        int int26 = mutablePeriod25.getSeconds();
        mutablePeriod25.setSeconds((int) '#');
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = period29.withPeriodType(periodType30);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period35 = period32.withMinutes(287);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 4, periodType38);
        org.joda.time.Period period40 = period32.normalizedStandard(periodType38);
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.LocalDate localDate42 = localDate18.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate localDate44 = localDate18.minusDays(1159);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfHalfday();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight62.getZone();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(dateTimeZone63);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = dateMidnight70.getZone();
        org.joda.time.DateMidnight dateMidnight72 = yearMonthDay65.toDateMidnight(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay65.toDateMidnight();
        org.joda.time.Period period74 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay65.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone81 = dateMidnight80.getZone();
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(dateTimeZone81);
        org.joda.time.YearMonthDay yearMonthDay83 = new org.joda.time.YearMonthDay(dateTimeZone81);
        java.lang.String str84 = dateTimeZone81.getID();
        long long87 = dateTimeZone81.adjustOffset((long) 32769, true);
        org.joda.time.DateTime dateTime88 = yearMonthDay75.toDateTimeAtMidnight(dateTimeZone81);
        boolean boolean89 = dateTimeZone81.isFixed();
        int int91 = dateTimeZone81.getStandardOffset((long) 476);
        org.joda.time.DateMidnight dateMidnight92 = org.joda.time.DateMidnight.now(dateTimeZone81);
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight(dateTimeZone81);
        org.joda.time.Interval interval94 = yearMonthDay57.toInterval(dateTimeZone81);
        org.joda.time.LocalDate localDate95 = localDate18.withFields((org.joda.time.ReadablePartial) yearMonthDay57);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+38:53" + "'", str84, "+38:53");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 32769L + "'", long87 == 32769L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 139980000 + "'", int91 == 139980000);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(localDate95);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        int int5 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property4.setCopy(287);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusHours(23);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay7.secondOfMinute();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableInstant) dateMidnight18, periodType22);
        int int24 = dateMidnight18.getMillisOfSecond();
        int int25 = dateMidnight18.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.LocalDate localDate34 = localDate28.withDayOfMonth(13);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.withFields((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight41 = property39.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField42 = property39.getField();
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale45);
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.lang.String str48 = dateTimeField42.getAsShortText(126, locale44);
        java.util.Calendar calendar49 = dateMidnight18.toCalendar(locale44);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale51);
        java.lang.String str53 = locale50.getDisplayCountry(locale51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = localDate55.getField(1);
        java.lang.String str58 = dateTimeField57.getName();
        boolean boolean59 = dateTimeField57.isLenient();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = localDate65.isSupported(dateTimeFieldType67);
        int int69 = localDate65.getWeekyear();
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = dateTimeField57.getAsShortText((org.joda.time.ReadablePartial) localDate65, locale71);
        java.lang.String str73 = locale51.getDisplayVariant(locale71);
        java.lang.String str74 = locale44.getDisplayVariant(locale71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay75 = property10.setCopy("", locale71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999 + "'", int5 == 999);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 70 + "'", int25 == 70);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "126" + "'", str48, "126");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-53580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Taiwan" + "'", str53, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "monthOfYear" + "'", str58, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc6d4" + "'", str72, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        int int6 = period4.get(durationFieldType5);
        org.joda.time.MutablePeriod mutablePeriod7 = period4.toMutablePeriod();
        int int8 = period4.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.Period period16 = period4.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime19 = instant18.toMutableDateTime();
        mutableDateTime19.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime19.set(dateTimeFieldType22, 1);
        int int25 = mutableDateTime19.getYearOfEra();
        org.joda.time.Period period27 = org.joda.time.Period.years(231);
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period27, 52);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        int int35 = period34.size();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        int int38 = period34.get(durationFieldType37);
        int int39 = period16.indexOf(durationFieldType37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.Period period41 = period16.withFields(readablePeriod40);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(1961);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = localDate17.getChronology();
        org.joda.time.LocalDate.Property property22 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        boolean boolean24 = localDate8.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationFieldType25);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.joda.time.Period period1 = org.joda.time.Period.years(79308922);
        org.joda.time.Period period3 = period1.withWeeks(139980000);
        org.joda.time.Period period5 = period1.withDays(38);
        org.joda.time.Period period7 = period1.plusMillis(19721);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = localDate13.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        int int21 = durationField19.getValue((long) 231);
        org.joda.time.DurationFieldType durationFieldType22 = durationField19.getType();
        boolean boolean23 = period7.isSupported(durationFieldType22);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsShortText(locale14);
        org.joda.time.LocalDateTime localDateTime16 = property13.withMinimumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate5 = localDate1.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.LocalDate localDate17 = localDate11.minusDays(100);
        org.joda.time.LocalDate.Property property18 = localDate11.dayOfMonth();
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.LocalDateTime localDateTime29 = null;
        boolean boolean30 = dateTimeZone27.isLocalDateTimeGap(localDateTime29);
        java.util.TimeZone timeZone31 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 22, dateTimeZone27);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(0L, dateTimeZone27);
        org.joda.time.DateTime dateTime34 = dateTime19.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime35 = localDate5.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.LocalDate.Property property36 = localDate5.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean8 = interval4.contains((org.joda.time.ReadableInterval) interval7);
        java.lang.String str9 = interval4.toString();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean16 = interval12.contains((org.joda.time.ReadableInterval) interval15);
        boolean boolean17 = interval4.isBefore((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology28 = localDate20.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay37.toDateMidnight(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay37.toDateMidnight();
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay37.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateMidnight dateMidnight48 = yearMonthDay37.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay37.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay37.minusMonths(1970);
        long long54 = chronology28.set((org.joda.time.ReadablePartial) yearMonthDay52, (long) 79321);
        org.joda.time.Interval interval55 = interval12.withChronology(chronology28);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType58, chronology60);
        org.joda.time.PeriodType periodType62 = period61.getPeriodType();
        org.joda.time.Period period63 = interval55.toPeriod(periodType62);
        org.joda.time.Period period64 = new org.joda.time.Period(1000L, (long) 693, periodType62);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str9, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3535142320679L) + "'", long54 == (-3535142320679L));
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        java.util.Date date5 = new java.util.Date(61200000, 3, 31, 1001, 53);
        java.lang.String str6 = date5.toGMTString();
        int int7 = date5.getMonth();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 11 17:53:00 GMT+00:00 61201900");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "11 Jun 61201900 17:53:00 GMT" + "'", str6, "11 Jun 61201900 17:53:00 GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        int int12 = dateTimeField10.getMinimumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.LocalDate localDate24 = localDate18.minusDays(100);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        long long34 = dateTimeZone31.nextTransition((long) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime37.set(dateTimeFieldType40, 1);
        org.joda.time.LocalDate.Property property43 = localDate35.property(dateTimeFieldType40);
        int int44 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate35);
        int int45 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        long long47 = dateTimeField10.roundCeiling(11423808000000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 267 + "'", int25 == 267);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 11423808000000L + "'", long47 == 11423808000000L);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property3 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate10 = localDate6.withFieldAdded(durationFieldType8, 53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localDate10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514017162,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=37,MILLISECOND=162,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54 + "'", int7 == 54);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set((int) '4', 0, 0, 0, 38);
        calendar0.setTimeInMillis(28857600266L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.set(24, 48, 504);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar0.getActualMaximum(675);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 675");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=24,MONTH=48,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=504,DAY_OF_YEAR=335,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=266,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(5, 12);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getMinimalDaysInFirstWeek();
        calendar11.setTimeInMillis((long) (byte) 1);
        java.util.Date date15 = calendar11.getTime();
        date15.setHours((int) (byte) 10);
        int int18 = date15.getMinutes();
        date15.setTime(1036800010L);
        int int21 = date15.getHours();
        int int22 = date15.getSeconds();
        calendar0.setTime(date15);
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        boolean boolean25 = calendar0.isWeekDateSupported();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property35.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        int int50 = property41.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.MutableDateTime mutableDateTime52 = property41.add(10);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.era();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = dateMidnight59.getZone();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone60);
        long long63 = dateTimeZone60.nextTransition((long) 1);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 13, dateTimeZone60);
        int int66 = dateTimeZone60.getOffsetFromLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.withYear(17);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property81 = localDateTime78.dayOfMonth();
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.lang.String str83 = property81.getAsText(locale82);
        java.lang.String str84 = dateTimeZone60.getShortName(0L, locale82);
        java.lang.String str85 = property53.getAsText(locale82);
        java.lang.String str86 = property35.getAsShortText(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap87 = calendar0.getDisplayNames(1970, 394, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1036800010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"20:42:14.750\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 13 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 139980000 + "'", int66 == 139980000);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "10" + "'", str83, "10");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+38:53" + "'", str84, "+38:53");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "dopo Cristo" + "'", str85, "dopo Cristo");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "22" + "'", str86, "22");
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        long long16 = dateTimeZone14.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(17);
        org.joda.time.DateTime dateTime23 = dateMidnight22.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(38);
        int int26 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime23.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Interval interval29 = localDate8.toInterval(dateTimeZone27);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        timeZone30.setRawOffset(364);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 139980000 + "'", int26 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean9 = interval5.contains((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval5.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.joda.time.DateMidnight dateMidnight18 = property16.roundHalfFloorCopy();
        org.joda.time.Interval interval19 = property16.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.Chronology chronology21 = interval19.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 1961, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType11.getField(chronology21);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, chronology21);
        org.joda.time.Chronology chronology25 = interval5.getChronology();
        org.joda.time.Chronology chronology26 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(119, 79423, 647, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79423 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight9 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime6.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getWeekyear();
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(0L, chronology23);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (-9054), chronology23);
        boolean boolean28 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateMidnight27);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant29 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (short) -1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        mutableDateTime31.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime31.set(dateTimeFieldType34, 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant29, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime58 = instant29.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int69 = localDateTime66.get(dateTimeFieldType68);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime58.set(dateTimeFieldType68, 79592934);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79592934 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        java.util.Locale locale8 = new java.util.Locale("Sun Dec 28 00:00:00 UTC 6611203");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = property6.getAsShortText(locale8);
        org.joda.time.LocalTime localTime11 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals(locale8.toString(), "sun dec 28 00:00:00 utc 6611203");
        org.junit.Assert.assertNotNull(strSet9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "47" + "'", str10, "47");
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(79334, 445, 933, 75901554);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79334 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        long long20 = dateTimeZone17.nextTransition((long) 1);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 13, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        int int27 = period26.size();
        java.lang.String str28 = period26.toString();
        org.joda.time.Period period30 = period26.plusMonths(11);
        boolean boolean31 = dateTime21.equals((java.lang.Object) period30);
        int[] intArray34 = chronology10.get((org.joda.time.ReadablePeriod) period30, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology10);
        org.joda.time.DateTimeField dateTimeField36 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology10.dayOfYear();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = property6.getDateTime();
        org.joda.time.DateTime dateTime8 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Instant instant52 = instant38.minus((org.joda.time.ReadableDuration) duration51);
        boolean boolean53 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        boolean boolean62 = interval6.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology63 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(chronology63);
        mutableDateTime3.setChronology(chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.secondOfMinute();
        org.joda.time.DurationField durationField67 = dateTimeField66.getRangeDurationField();
        boolean boolean68 = dateTimeField66.isSupported();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime3.set(dateTimeFieldType6, 1);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology22 = localDate14.getChronology();
        mutablePeriod10.add((long) '4', chronology22);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology25 = mutableDateTime3.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) 1, chronology25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513997222L, chronology25);
        mutablePeriod27.addYears(1915);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period8 = period4.plusMonths(11);
        org.joda.time.Period period10 = period8.withHours((int) (byte) 100);
        org.joda.time.PeriodType periodType11 = period8.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = period8.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(551);
        org.joda.time.LocalTime localTime9 = localTime7.plusMillis(70);
        org.joda.time.LocalTime localTime11 = localTime7.plusMillis(3);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds(32820000);
        boolean boolean15 = localTime11.equals((java.lang.Object) dateTime12);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((-1L), 1L, periodType3, chronology17);
        int int20 = periodType3.size();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property24.toInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(17);
        org.joda.time.DateTime dateTime34 = dateMidnight33.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight37 = dateTime34.toDateMidnight();
        org.joda.time.LocalDate localDate38 = dateTime34.toLocalDate();
        org.joda.time.Period period43 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate44 = localDate38.minus((org.joda.time.ReadablePeriod) period43);
        boolean boolean45 = interval27.equals((java.lang.Object) period43);
        boolean boolean46 = periodType3.equals((java.lang.Object) boolean45);
        org.joda.time.PeriodType periodType47 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType48 = periodType3.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((java.lang.Object) periodType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(17);
        org.joda.time.DateTime dateTime13 = dateMidnight12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate23 = localDate17.minus((org.joda.time.ReadablePeriod) period22);
        boolean boolean24 = interval6.equals((java.lang.Object) period22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime57.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        long long67 = dateTimeZone65.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour(38);
        int int77 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime74);
        mutableDateTime57.setZone(dateTimeZone65);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean86 = interval82.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str87 = interval82.toString();
        boolean boolean88 = interval79.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval89 = interval6.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.ReadableInstant readableInstant90 = null;
        boolean boolean91 = interval79.contains(readableInstant90);
        org.joda.time.Interval interval92 = interval79.toInterval();
        boolean boolean94 = interval92.isBefore((long) 513);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 139980000 + "'", int77 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str87, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((-1L), 1L, periodType3, chronology17);
        int int20 = periodType3.size();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property24.toInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(17);
        org.joda.time.DateTime dateTime34 = dateMidnight33.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight37 = dateTime34.toDateMidnight();
        org.joda.time.LocalDate localDate38 = dateTime34.toLocalDate();
        org.joda.time.Period period43 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate44 = localDate38.minus((org.joda.time.ReadablePeriod) period43);
        boolean boolean45 = interval27.equals((java.lang.Object) period43);
        boolean boolean46 = periodType3.equals((java.lang.Object) boolean45);
        org.joda.time.PeriodType periodType47 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType48 = periodType3.withMonthsRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withMillisRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        int int18 = dateTimeField16.getMinimumValue(1035522776L);
        long long21 = dateTimeField16.add(1645434420000L, 5L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1803200820000L + "'", long21 == 1803200820000L);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        mutableDateTime24.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime24.set(dateTimeFieldType27, 1);
        org.joda.time.LocalDate.Property property30 = localDate22.property(dateTimeFieldType27);
        int int31 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtMidnight();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Instant instant47 = instant33.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        org.joda.time.Duration duration60 = period54.toDurationTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Instant instant62 = instant47.withDurationAdded((org.joda.time.ReadableDuration) duration60, (int) (short) -1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime64 = instant63.toMutableDateTime();
        mutableDateTime64.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime64.set(dateTimeFieldType67, 1);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate76, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1L, dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight83, readableDuration84);
        org.joda.time.Duration duration86 = period80.toDurationTo((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.Instant instant87 = instant73.minus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Interval interval88 = interval72.withDurationAfterStart((org.joda.time.ReadableDuration) duration86);
        mutableDateTime64.add((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant62, (org.joda.time.ReadableDuration) duration86);
        org.joda.time.PeriodType periodType91 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType92 = periodType91.withDaysRemoved();
        org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration86, periodType92);
        org.joda.time.DateTime.Property property94 = dateTime32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField95 = property94.getField();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(79476);
        org.joda.time.LocalDate.Property property4 = localDate1.monthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.DateTime dateTime17 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = localDate10.getChronology();
        mutablePeriod6.add((long) '4', chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period((-1L), 1L, periodType4, chronology18);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        int int24 = periodType21.indexOf(durationFieldType23);
        boolean boolean25 = periodType4.isSupported(durationFieldType23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 32770, periodType4);
        java.lang.String str27 = periodType4.toString();
        org.joda.time.Period period29 = org.joda.time.Period.years(231);
        int int30 = period29.getMinutes();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = localDate37.isSupported(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = localDate37.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DurationField durationField43 = chronology41.weekyears();
        org.joda.time.DurationField durationField44 = durationFieldType31.getField(chronology41);
        int int45 = period29.get(durationFieldType31);
        boolean boolean46 = periodType4.isSupported(durationFieldType31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = localDate53.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DurationField durationField59 = chronology57.weekyears();
        org.joda.time.Period period60 = new org.joda.time.Period(0L, chronology57);
        org.joda.time.DurationField durationField61 = durationFieldType31.getField(chronology57);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DurationField durationField63 = chronology57.weekyears();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Millis]" + "'", str27, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        int int3 = mutablePeriod1.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter4 = null;
        java.lang.String str5 = mutablePeriod1.toString(periodFormatter4);
        org.joda.time.Period period7 = org.joda.time.Period.minutes((int) ' ');
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Weeks weeks9 = period7.toStandardWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period7.getFieldTypes();
        org.joda.time.Period period12 = period7.multipliedBy(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.010S" + "'", str5, "PT0.010S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.LocalDate.Property property14 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundFloorCopy();
        java.lang.String str16 = localDate15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1900-01-01" + "'", str16, "1900-01-01");
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withSecondOfMinute(20);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(126);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime17, readableDuration18, periodType19);
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime17.withMillisOfSecond(494);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime13.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        long long23 = dateTimeZone21.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(38);
        int int33 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime30);
        mutableDateTime13.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime35 = localDate11.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.LocalDate localDate37 = localDate11.minusWeeks(44);
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths(75841);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = localDate39.withYearOfCentury(79561);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79561 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 139980000 + "'", int33 == 139980000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate2.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone11);
        java.lang.String str15 = dateTimeZone11.getNameKey((-36000000L));
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        java.util.Date date8 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date8.setMonth((int) (short) 1);
        java.util.Date date16 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date16.setMonth((int) (short) 1);
        boolean boolean19 = date8.before(date16);
        int int20 = date8.getHours();
        date8.setYear(1969);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = localDate29.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.minutes();
        org.joda.time.DurationField durationField35 = chronology33.weekyears();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone37 = chronology33.getZone();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay23.withChronologyRetainFields(chronology33);
        java.lang.String str39 = chronology33.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((-800321), 10, 38243164, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38243164 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date8.toString(), "Mon Feb 15 13:10:00 GMT 3869");
        org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-96608), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        int int8 = date5.getTimezoneOffset();
        int int9 = date5.getHours();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(26, 0, 23, 70);
        org.joda.time.LocalTime localTime17 = localTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 38);
        org.joda.time.LocalTime localTime19 = localTime17.minusMillis(287);
        org.joda.time.LocalTime.Property property20 = localTime17.hourOfDay();
        org.joda.time.LocalTime.Property property21 = localTime17.millisOfSecond();
        int int22 = localTime17.getMinuteOfHour();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 13 + "'", int9 == 13);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod28.setYears(53);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology42 = mutableDateTime1.getChronology();
        mutableDateTime1.setWeekOfWeekyear(34);
        org.joda.time.Instant instant45 = mutableDateTime1.toInstant();
        int int46 = mutableDateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 24 + "'", int46 == 24);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period8 = period4.plusMonths(11);
        org.joda.time.Period period10 = period8.withHours((int) (byte) 100);
        org.joda.time.Period period11 = period8.normalizedStandard();
        org.joda.time.Period period13 = period8.minusYears(32770);
        org.joda.time.Period period15 = period8.minusDays(1001);
        org.joda.time.Period period16 = period15.negated();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10);
        int int19 = mutablePeriod18.getSeconds();
        mutablePeriod18.addSeconds(79358169);
        org.joda.time.Period period22 = period16.withFields((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Period period24 = period16.withMinutes(7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay1.getFieldType(79590);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 79590");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getSecondOfDay();
        int int16 = dateMidnight13.getDayOfMonth();
        boolean boolean18 = dateMidnight13.isEqual(139980000L);
        int int19 = dateMidnight13.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = mutablePeriod44.toDurationFrom(readableInstant45);
        org.joda.time.Period period47 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = period47.withPeriodType(periodType48);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime52.addMinutes(266);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, readableDuration66);
        org.joda.time.Duration duration68 = period62.toDurationTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Instant instant69 = instant55.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate73, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight80, readableDuration81);
        org.joda.time.Duration duration83 = period77.toDurationTo((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Instant instant84 = instant70.minus((org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration83);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration87 = period47.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime52.minuteOfHour();
        org.joda.time.Duration duration89 = mutablePeriod44.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        int int90 = mutableDateTime52.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime52.copy();
        org.joda.time.DateTime dateTime92 = mutableDateTime91.toDateTime();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 69540017 + "'", int90 == 69540017);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.LocalDate localDate6 = property3.setCopy(1961);
        org.joda.time.LocalDate localDate7 = property3.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property3.setCopy("20:36:06.978");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"20:36:06.978\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        int int24 = period22.get(durationFieldType23);
        org.joda.time.Days days25 = period22.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period28 = period22.withFieldAdded(durationFieldType26, 0);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 79315);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        java.lang.String str32 = property31.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay34 = property31.addWrapFieldToCopy(0);
        org.joda.time.YearMonthDay yearMonthDay36 = property31.addWrapFieldToCopy(587);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology39);
        int int41 = timeOfDay40.getMinuteOfHour();
        int int43 = timeOfDay40.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = property31.compareTo((org.joda.time.ReadablePartial) timeOfDay40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23" + "'", str32, "23");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        org.joda.time.YearMonthDay yearMonthDay35 = property33.addToCopy(17);
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.getDefault(category37);
        org.joda.time.YearMonthDay yearMonthDay39 = property33.setCopy("10", locale38);
        org.joda.time.YearMonthDay yearMonthDay41 = property33.setCopy((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay42 = property33.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868381202,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=39,MILLISECOND=162,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + category37 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category37.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean57 = interval53.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = interval2.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DurationField durationField63 = property62.getDurationField();
        org.joda.time.DateMidnight dateMidnight64 = property62.roundHalfFloorCopy();
        org.joda.time.Interval interval65 = property62.toInterval();
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Interval interval68 = interval66.withPeriodAfterStart(readablePeriod67);
        boolean boolean69 = interval56.isBefore((org.joda.time.ReadableInterval) interval68);
        boolean boolean70 = interval56.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateMidnight.Property property74 = dateMidnight73.dayOfMonth();
        org.joda.time.DurationField durationField75 = property74.getDurationField();
        org.joda.time.DateMidnight dateMidnight76 = property74.roundHalfFloorCopy();
        org.joda.time.Interval interval77 = property74.toInterval();
        org.joda.time.Interval interval78 = interval77.toInterval();
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Interval interval80 = interval78.withPeriodAfterStart(readablePeriod79);
        org.joda.time.ReadableInterval readableInterval81 = null;
        boolean boolean82 = interval80.contains(readableInterval81);
        org.joda.time.Interval interval83 = interval80.toInterval();
        boolean boolean84 = interval56.abuts((org.joda.time.ReadableInterval) interval83);
        org.joda.time.MutableInterval mutableInterval85 = interval56.toMutableInterval();
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(mutableInterval85);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 22);
        org.joda.time.Instant instant3 = instant1.withMillis((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime5 = instant3.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setSecondOfMinute(79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalDate localDate18 = yearMonthDay7.toLocalDate();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        boolean boolean30 = localDate20.isEqual((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate32 = localDate28.minusMonths((int) 'x');
        org.joda.time.LocalDate localDate34 = localDate28.minusDays(9);
        boolean boolean35 = yearMonthDay7.isAfter((org.joda.time.ReadablePartial) localDate28);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(81, 79315175, 831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79315175 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod28.setYears(53);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.addYears(287);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.dayOfWeek();
        mutablePeriod28.add(10886400000L, chronology54);
        org.joda.time.DurationField durationField57 = chronology54.millis();
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(chronology54);
        org.joda.time.DurationField durationField59 = chronology54.months();
        boolean boolean60 = durationField59.isPrecise();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate3 = property1.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.DateTimeField dateTimeField5 = property1.getField();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.plusMonths(336);
        org.joda.time.LocalDate.Property property22 = localDate21.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set(9);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.getMutableDateTime();
        boolean boolean14 = dateMidnight6.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight6.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property24.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 1961, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType19.getField(chronology29);
        boolean boolean32 = dateTimeFieldType18.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField35 = dateTimeField34.getLeapDurationField();
        mutableDateTime17.setRounding(dateTimeField34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime17.monthOfYear();
        java.lang.Object obj38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(obj38);
        mutablePeriod39.setWeeks(266);
        int int42 = mutablePeriod39.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod39, 75841097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 20173731802 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        java.lang.String str10 = dateTimeZone5.getID();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+38:53" + "'", str10, "+38:53");
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plus((long) 1961);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(11);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        java.lang.String str23 = duration22.toString();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration22, periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(36024000L, periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withMillisRemoved();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0S" + "'", str23, "PT0S");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        int int19 = property10.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime mutableDateTime21 = property10.add(10);
        org.joda.time.Chronology chronology22 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.DateTime dateTime24 = localDate7.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(79514722, 0, 551, 79429672, 30, 685, 53580, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79429672 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder13 = builder0.setTimeOfDay(5, 2022, 1961, (int) (short) 1);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder14.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder22 = builder18.setDate(28, 10, 0);
        java.util.Locale locale23 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder24 = builder22.setLocale(locale23);
        java.util.Calendar.Builder builder25 = builder13.setLocale(locale23);
        java.util.Calendar.Builder builder29 = builder13.setTimeOfDay(61, 17, 32770);
        java.util.Calendar.Builder builder34 = builder13.setTimeOfDay(722, 38309225, 16, 75841);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(399, (int) ' ', 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfMonth();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = property8.getAsText(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale10.getDisplayName(locale12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = localDate15.getField(1);
        java.lang.String str18 = dateTimeField17.getName();
        boolean boolean19 = dateTimeField17.isLenient();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = null;
        boolean boolean28 = localDate25.isSupported(dateTimeFieldType27);
        int int29 = localDate25.getWeekyear();
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDate25, locale31);
        java.lang.String str33 = locale10.getDisplayScript(locale31);
        java.lang.String str34 = locale10.getLanguage();
        java.util.Set<java.lang.Character> charSet35 = locale10.getExtensionKeys();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale10.getDisplayLanguage(locale36);
        java.util.Locale locale38 = locale36.stripExtensions();
        java.lang.String str39 = locale38.getISO3Country();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate48 = localDate42.withDayOfMonth(13);
        org.joda.time.LocalDate.Property property49 = localDate48.dayOfMonth();
        java.lang.String str50 = localDate48.toString();
        org.joda.time.LocalDate localDate52 = localDate48.minusDays(79308922);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean54 = localDate52.isSupported(dateTimeFieldType53);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.lang.String str60 = localDate52.toString("1", locale57);
        java.lang.String str61 = locale38.getDisplayScript(locale57);
        java.util.Calendar.Builder builder62 = builder0.setLocale(locale38);
        java.util.Calendar.Builder builder66 = builder0.setDate(70, 2280, 162);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2" + "'", str11, "2");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Deutsch (Deutschland)" + "'", str13, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "monthOfYear" + "'", str18, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc6d4" + "'", str32, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "de" + "'", str34, "de");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Deutsch" + "'", str37, "Deutsch");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DEU" + "'", str39, "DEU");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-13" + "'", str50, "1970-01-13");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Taiwan" + "'", str59, "Taiwan");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1961);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        java.lang.String[] strArray2 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8);
        boolean boolean10 = strSet3.remove((java.lang.Object) readableDuration8);
        java.util.Set<java.lang.String> strSet11 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean18 = interval14.contains((org.joda.time.ReadableInterval) interval17);
        java.lang.String str19 = interval14.toString();
        boolean boolean20 = strSet11.remove((java.lang.Object) str19);
        boolean boolean21 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor22 = strSet3.iterator();
        java.util.Iterator<java.lang.String> strItor23 = strSet3.iterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str19, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strItor23);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        int int3 = dateMidnight2.getYearOfCentury();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period36 = duration17.toPeriod();
        int int37 = period36.getMillis();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.LocalDate localDate46 = localDate40.withDayOfMonth(13);
        org.joda.time.DateTime dateTime47 = localDate40.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime49 = dateTime47.plusYears(893);
        org.joda.time.Duration duration50 = period36.toDurationTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDate localDate51 = dateTime49.toLocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.plusWeeks(541);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) 541);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(20);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(1961);
        org.joda.time.LocalTime localTime13 = localTime9.minusSeconds(454);
        org.joda.time.Period period18 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period19 = new org.joda.time.Period();
        org.joda.time.Period period21 = period19.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean23 = period21.isSupported(durationFieldType22);
        org.joda.time.Period period25 = period18.withFieldAdded(durationFieldType22, 0);
        org.joda.time.Period period27 = period25.withMinutes((int) (short) 0);
        int int28 = period25.getHours();
        org.joda.time.LocalTime localTime29 = localTime9.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period31 = period25.minusMillis(0);
        java.lang.String str32 = period31.toString();
        org.joda.time.Period period34 = period31.minusMillis(119);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT35M52.008S" + "'", str32, "PT35M52.008S");
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder12 = builder8.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder14 = builder8.setLocale(locale13);
        java.util.Calendar.Builder builder18 = builder8.setTimeOfDay(14, (-1), 17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = property22.getAsText(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.util.Locale locale27 = locale24.stripExtensions();
        java.util.Calendar.Builder builder28 = builder18.setLocale(locale24);
        java.lang.Object obj29 = locale24.clone();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "de_DE");
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        int int14 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYear(2);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfCeilingCopy();
        int int19 = localDateTime18.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withWeekOfWeekyear(55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalDateTime localDateTime9 = null;
        boolean boolean10 = dateTimeZone7.isLocalDateTimeGap(localDateTime9);
        java.util.TimeZone timeZone11 = dateTimeZone7.toTimeZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 2, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(dateTimeZone7);
        java.util.TimeZone timeZone14 = dateTimeZone7.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 292278993, dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((java.lang.Object) dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 7, 79368);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime9.setMillisOfSecond((int) '4');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(17);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate24.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = localDate24.getChronology();
        org.joda.time.LocalDate localDate30 = localDate24.minusDays(100);
        int int31 = localDate24.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight32 = localDate24.toDateMidnight();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        org.joda.time.Duration duration46 = period40.toDurationTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.Instant instant47 = instant33.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight32.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = null;
        boolean boolean60 = localDate57.isSupported(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = localDate57.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.minutes();
        org.joda.time.DurationField durationField63 = chronology61.weekyears();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology61);
        mutablePeriod49.setPeriod((long) (-1), (long) '4', chronology61);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.dayOfYear();
        mutableDateTime9.setChronology(chronology61);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) 52, chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.plusYears((int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay73 = dateMidnight70.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay73.withMonthOfYear(5);
        long long77 = chronology61.set((org.joda.time.ReadablePartial) yearMonthDay73, (long) (byte) 1);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight6.withChronology(chronology61);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(chronology61);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 86400001L + "'", long77 == 86400001L);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType1.withWeeksRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = localDate27.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType8.getField(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter4.withChronology(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter4.withPivotYear(0);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = dateTimeFormatter35.parseMillis("\ubaa9");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Instant instant32 = instant18.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Interval interval33 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 10);
        int int37 = mutablePeriod36.getWeeks();
        mutablePeriod36.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod36.setYears(53);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime9.toMutableDateTime(dateTimeZone51);
        org.joda.time.Period period57 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundHalfFloor();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property42.addWrapFieldToCopy(36023888);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.minusMonths(25728);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minusYears((int) 'x');
        org.joda.time.DateTime dateTime49 = yearMonthDay48.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime51 = dateTime49.minusSeconds(79437);
        int int52 = dateTime49.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1902 + "'", int52 == 1902);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate2.withMonthOfYear(11);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 10);
        int int41 = mutablePeriod40.getWeeks();
        mutablePeriod40.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod40.setYears(53);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod40);
        boolean boolean54 = localDate2.equals((java.lang.Object) mutableDateTime13);
        org.joda.time.DateTime dateTime55 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology56 = localDate2.getChronology();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(126);
        org.joda.time.Period period15 = org.joda.time.Period.millis(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 34);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property18.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = property18.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 79582);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusMinutes((int) (byte) 100);
        int int5 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay2.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMillis(0);
        int int10 = timeOfDay0.compareTo((org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay0.hourOfDay();
        int int12 = property11.getMinimumValueOverall();
        int int13 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category5, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        java.util.Locale locale11 = dateTimeFormatter10.getLocale();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTimeFormatter10.parseDateTime("T22:04:01.013");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(17);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight47, periodType51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Period period54 = period52.withFields(readablePeriod53);
        org.joda.time.Period period56 = period54.plusYears(46);
        int int57 = period56.getSeconds();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.property(dateTimeFieldType5);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval11 = interval9.withEndMillis((long) 38);
        org.joda.time.Duration duration12 = interval11.toDuration();
        org.joda.time.Duration duration13 = duration12.toDuration();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant14, (org.joda.time.ReadableInstant) instant15);
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.Period period20 = period17.withPeriodType(periodType18);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime22.addMinutes(266);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = period17.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant15, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.minusDays(17);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateMidnight61, periodType65);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime68 = instant67.toMutableDateTime();
        mutableDateTime68.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime68.set(dateTimeFieldType71, 1);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 'a', dateTimeZone81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate79, (org.joda.time.ReadablePartial) localDate82);
        org.joda.time.LocalDate localDate85 = localDate79.withDayOfMonth(13);
        org.joda.time.DateTime dateTime86 = localDate79.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology87 = localDate79.getChronology();
        mutablePeriod75.add((long) '4', chronology87);
        mutableDateTime68.add((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        mutableDateTime68.set(dateTimeFieldType90, 38);
        org.joda.time.DateMidnight.Property property93 = dateMidnight61.property(dateTimeFieldType90);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight61.withWeekyear(15);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateMidnight95);
        org.joda.time.DateMidnight dateMidnight97 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateMidnight dateMidnight99 = dateMidnight2.plusMonths((-19));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(dateMidnight97);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.LocalDate.Property property3 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate5 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(79594342, 1030, 151, 36300000, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36300000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays(6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(541);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withSecondOfMinute(816);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 816 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.withFields((org.joda.time.ReadablePartial) timeOfDay7);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay7.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1L);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        java.lang.Object obj4 = mutableDateTime3.clone();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "2022-02-22T07:13:40.272Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "2022-02-22T07:13:40.272Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "2022-02-22T07:13:40.272Z");
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((-1L), 1L, periodType3, chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        long long7 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(17);
        org.joda.time.DateTime dateTime14 = dateMidnight13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(38);
        int int17 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime14.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 139980000 + "'", int17 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withFieldAdded(durationFieldType14, 2008);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "years" + "'", str15, "years");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = localTime7.toString("+10:00", locale10);
        java.lang.String str12 = locale10.getISO3Language();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+10:00" + "'", str11, "+10:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fra" + "'", str12, "fra");
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        java.lang.String str16 = dateTimeField15.toString();
        long long19 = dateTimeField15.addWrapField((long) 399, 476);
        long long21 = dateTimeField15.roundCeiling((long) ' ');
        org.joda.time.DurationField durationField22 = dateTimeField15.getDurationField();
        java.lang.String str23 = dateTimeField15.getName();
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[millisOfDay]" + "'", str16, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 875L + "'", long19 == 875L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32L + "'", long21 == 32L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "millisOfDay" + "'", str23, "millisOfDay");
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property21 = localDate18.centuryOfEra();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(122);
        org.joda.time.Interval interval24 = localDate23.toInterval();
        int int25 = localDate23.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2032 + "'", int25 == 2032);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(126, 0, 893, 0, 16, 231, 2332, 11);
        int int9 = mutablePeriod8.getWeeks();
        int[] intArray10 = mutablePeriod8.getValues();
        mutablePeriod8.setPeriod((long) 51, (long) 12);
        mutablePeriod8.setDays(2083);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 893 + "'", int9 == 893);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[126, 0, 893, 0, 16, 231, 2332, 11]");
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(80, 1640995120, 0, 292278993, 1634400000, 56502, 79381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getWeekyear();
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.joda.time.Period period19 = new org.joda.time.Period(1010016000000L, (long) 35, chronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) 1);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 13, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay38.toDateMidnight(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime30.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) 1010016000000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter4.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter4.withPivotYear(454);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime56.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone64 = dateMidnight63.getZone();
        long long66 = dateTimeZone64.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.DateMidnight.Property property70 = dateMidnight69.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight69.minusDays(17);
        org.joda.time.DateTime dateTime73 = dateMidnight72.toDateTimeISO();
        org.joda.time.DateTime dateTime75 = dateTime73.withMinuteOfHour(38);
        int int76 = dateTimeZone64.getOffset((org.joda.time.ReadableInstant) dateTime73);
        mutableDateTime56.setZone(dateTimeZone64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter4.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(31525804749601L, dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+38:53" + "'", str47, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 139980000 + "'", int76 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime7.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        long long17 = dateTimeZone15.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusDays(17);
        org.joda.time.DateTime dateTime24 = dateMidnight23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour(38);
        int int27 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime24);
        mutableDateTime7.setZone(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(dateTimeZone15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(36000000, 1, 122, 13, 75901554, 79315, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75901554 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 139980000 + "'", int27 == 139980000);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        int int14 = mutablePeriod13.getSeconds();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod13, (int) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.withYearOfCentury(0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DateTimeField[millisOfDay]");
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = property10.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField13 = property10.getField();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        java.lang.String str19 = dateTimeField13.getAsShortText(126, locale15);
        int int20 = property6.getMaximumShortTextLength(locale15);
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone1.getDisplayName(true, 75841, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 75841");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "126" + "'", str19, "126");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(0L);
        int int2 = mutableDateTime1.getDayOfYear();
        int int3 = mutableDateTime1.getEra();
        mutableDateTime1.setYear(38123073);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.Duration duration21 = period15.toDurationTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Period period22 = duration21.toPeriod();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration21, 13);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone34);
        long long37 = dateTimeZone34.nextTransition((long) 1);
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(dateTimeZone34);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) 53);
        org.joda.time.Interval interval41 = localDate26.toInterval(dateTimeZone34);
        java.lang.String str43 = dateTimeZone34.getNameKey((long) (-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) duration21, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds(35213769);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withMillisOfSecond(0);
        org.joda.time.Period period13 = org.joda.time.Period.weeks(815);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalTime localTime15 = timeOfDay9.toLocalTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = timeZone30.getDisplayName(false, 79372413);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 79372413");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514020717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=81,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("millisOfSecond");
        calendar0.setTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusSeconds((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withMillisOfSecond(126);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(10);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        boolean boolean26 = calendar0.after((java.lang.Object) localTime25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        calendar0.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder34 = builder30.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder38 = builder34.setDate(28, 10, 0);
        java.util.Locale locale39 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder40 = builder38.setLocale(locale39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        java.time.ZoneId zoneId48 = timeZone47.toZoneId();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone47);
        java.util.Calendar.Builder builder50 = builder38.setTimeZone(timeZone47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        boolean boolean52 = timeZone27.hasSameRules(timeZone47);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=102,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514020738,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=40,MILLISECOND=738,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval7 = property4.toInterval();
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 1961, chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int14 = localTime12.indexOf(dateTimeFieldType13);
        org.joda.time.LocalTime localTime16 = localTime12.minusMillis(54);
        org.joda.time.LocalTime localTime18 = localTime12.minusHours(292269054);
        org.joda.time.LocalTime localTime20 = localTime12.minusMillis((-1));
        org.joda.time.LocalTime localTime22 = localTime12.plusMinutes(79436);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime13.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        long long23 = dateTimeZone21.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(38);
        int int33 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime30);
        mutableDateTime13.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime35 = localDate11.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        org.joda.time.Period period42 = period40.minusMillis(13);
        org.joda.time.Period period44 = period40.minusDays(0);
        org.joda.time.LocalDate localDate45 = localDate11.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime46 = localDate11.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime46.withDate(36694555, 79368, 39065265);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79368 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 139980000 + "'", int33 == 139980000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.joda.time.Period period1 = org.joda.time.Period.hours(245);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.DateTime dateTime10 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology11 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 13, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        int int28 = period27.size();
        java.lang.String str29 = period27.toString();
        org.joda.time.Period period31 = period27.plusMonths(11);
        boolean boolean32 = dateTime22.equals((java.lang.Object) period31);
        int[] intArray35 = chronology11.get((org.joda.time.ReadablePeriod) period31, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.DateTimeField dateTimeField37 = chronology11.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 5, chronology11);
        java.lang.Object obj39 = mutablePeriod38.clone();
        mutablePeriod38.setYears(82);
        java.lang.Object obj42 = mutablePeriod38.clone();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance();
        int int44 = calendar43.getMinimalDaysInFirstWeek();
        calendar43.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromCalendarFields(calendar43);
        org.joda.time.Period period54 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period55 = new org.joda.time.Period();
        org.joda.time.Period period57 = period55.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean59 = period57.isSupported(durationFieldType58);
        org.joda.time.Period period61 = period54.withFieldAdded(durationFieldType58, 0);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay49.withPeriodAdded((org.joda.time.ReadablePeriod) period54, 12);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.LocalDate localDate73 = localDate67.withDayOfMonth(13);
        org.joda.time.DateTime dateTime74 = localDate67.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology75 = localDate67.getChronology();
        org.joda.time.DurationField durationField76 = durationFieldType64.getField(chronology75);
        boolean boolean77 = period54.isSupported(durationFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod38.set(durationFieldType64, 1326);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "P82YT0.005S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "P82YT0.005S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "P82YT0.005S");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "P82YT0.005S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "P82YT0.005S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "P82YT0.005S");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-61427868379042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=322,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period5 = new org.joda.time.Period();
        org.joda.time.Period period7 = period5.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.Period period11 = period4.withFieldAdded(durationFieldType8, 0);
        org.joda.time.Seconds seconds12 = period11.toStandardSeconds();
        int int13 = period11.size();
        int int14 = period11.getSeconds();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime13.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        long long23 = dateTimeZone21.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(38);
        int int33 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime30);
        mutableDateTime13.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime35 = localDate11.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        org.joda.time.Period period42 = period40.minusMillis(13);
        org.joda.time.Period period44 = period40.minusDays(0);
        org.joda.time.LocalDate localDate45 = localDate11.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period47 = period40.withDays(936);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 139980000 + "'", int33 == 139980000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfCeilingCopy();
        int int10 = property7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay15.toDateMidnight(dateTimeZone21);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay15.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay25 = property23.addToCopy((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfMonth();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = property29.getAsText(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale31.getDisplayName(locale33);
        java.lang.String str35 = property23.getAsShortText(locale31);
        java.lang.String str36 = locale31.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withLocale(locale31);
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter37.getParser();
        java.lang.Integer int39 = dateTimeFormatter37.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2" + "'", str32, "2");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch (Deutschland)" + "'", str34, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "23" + "'", str35, "23");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DE" + "'", str36, "DE");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(5);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.minusWeeks(7);
        int int11 = dateMidnight10.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval12 = new org.joda.time.Interval((java.lang.Object) dateMidnight10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateMidnight");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str13 = dateTimeZone11.getNameKey((-1L));
        java.lang.String str14 = dateTimeZone11.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 2922789, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.minuteOfHour();
        long long19 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime();
        org.joda.time.Instant instant21 = mutableDateTime17.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDayOfWeek(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+38:53" + "'", str14, "+38:53");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setTimeInMillis((long) (byte) 1);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(647);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        int int9 = property8.get();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=365,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 13 + "'", int9 == 13);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.withYear(266);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = null;
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = localDate28.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.Period period35 = new org.joda.time.Period(0L, chronology32);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType21, chronology32);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay17.withChronologyRetainFields(chronology32);
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(chronology32);
        int int39 = dateMidnight38.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay7.toDateMidnight();
        org.joda.time.Interval interval19 = yearMonthDay7.toInterval();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        int int33 = property24.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime mutableDateTime35 = property24.add(10);
        org.joda.time.Chronology chronology36 = mutableDateTime35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.hours();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 231, chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay7, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.Chronology chronology14 = localDate11.getChronology();
        org.joda.time.LocalDate.Property property15 = localDate11.era();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DurationField durationField3 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay5 = property1.addToCopy(22);
        int int6 = property1.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category10, locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale12);
        int int17 = calendar16.getWeekYear();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getMinimalDaysInFirstWeek();
        calendar18.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        java.time.ZoneId zoneId31 = timeZone30.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        java.time.ZoneId zoneId39 = timeZone38.toZoneId();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        boolean boolean41 = timeZone30.hasSameRules(timeZone38);
        calendar18.setTimeZone(timeZone38);
        calendar16.setTimeZone(timeZone38);
        java.time.Instant instant44 = calendar16.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar16.setWeekDate(39005863, 30, 25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514021315,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=315,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=679,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514021315,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=41,MILLISECOND=315,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(instant44);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("PT9S");
        java.util.Locale.Builder builder4 = builder2.setVariant("years");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusDays(17);
        org.joda.time.DateTime dateTime11 = dateMidnight10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = localDate17.getChronology();
        org.joda.time.LocalDate localDate23 = localDate17.minusDays(100);
        int int24 = localDate17.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight25 = localDate17.toDateMidnight();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight25.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DurationField durationField56 = chronology54.weekyears();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology54);
        mutablePeriod42.setPeriod((long) (-1), (long) '4', chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.dayOfYear();
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale62 = java.util.Locale.getDefault(category61);
        java.lang.String str63 = dateTimeField59.getAsText(34, locale62);
        java.util.Locale.Builder builder64 = builder2.setLocale(locale62);
        java.util.Locale.Builder builder66 = builder64.removeUnicodeLocaleAttribute("PT9S");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder68 = builder66.setRegion("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "34" + "'", str63, "34");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime10.minusDays(657);
        int int16 = dateTime10.getYear();
        int int17 = dateTime10.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 893 + "'", int17 == 893);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getWeekyear();
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.secondOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(139980000L, chronology11);
        int[] intArray17 = localDate16.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = new org.joda.time.Interval((java.lang.Object) localDate16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[1970, 1, 2]");
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale6, locale12, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.String[] strArray33 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        strSet34.clear();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfMonth();
        org.joda.time.DurationField durationField51 = property50.getDurationField();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = property50.getAsText(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale52.getDisplayName(locale54);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale46, locale52, locale57, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap66);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch (Deutschland)" + "'", str15, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2" + "'", str53, "2");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Deutsch (Deutschland)" + "'", str55, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Taiwan" + "'", str59, "Taiwan");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.joda.time.Interval interval6 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.Duration duration20 = period14.toDurationTo((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant21 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Instant instant37 = instant23.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.Duration duration51 = period45.toDurationTo((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Instant instant52 = instant38.minus((org.joda.time.ReadableDuration) duration51);
        boolean boolean53 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Interval interval54 = interval6.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        boolean boolean62 = interval6.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology63 = interval6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((int) (byte) 10, 542, 722, 69, chronology63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 542 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds((int) '4');
        int int10 = timeOfDay9.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusHours(79321);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay9.withMillisOfSecond(20);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay9.minusHours(79484867);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(0, (-9054), 868, 79429672, 100, 923, 933);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79429672 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime7 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime8 = property5.withMinimumValue();
        org.joda.time.DateTime dateTime10 = property5.addWrapFieldToCopy(159);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay6.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtCurrentTime(dateTimeZone24);
        int int26 = dateTime25.getCenturyOfEra();
        org.joda.time.DateTime.Property property27 = dateTime25.secondOfMinute();
        org.joda.time.DateTime.Property property28 = dateTime25.millisOfSecond();
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.Period period31 = period29.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean33 = period31.isSupported(durationFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime25.withFieldAdded(durationFieldType32, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay6.withFieldAdded(durationFieldType32, (-799676));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868378142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=42,MILLISECOND=222,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        java.lang.String str2 = timeOfDay1.toString();
        int int3 = timeOfDay1.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.withMillisOfSecond(61200000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61200000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "T14:53:00.010" + "'", str2, "T14:53:00.010");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14 + "'", int3 == 14);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        int int5 = periodType2.indexOf(durationFieldType4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        int int7 = periodType2.indexOf(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.PeriodType periodType9 = periodType2.withHoursRemoved();
        java.lang.String str10 = periodType9.getName();
        java.lang.String str11 = periodType9.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = localDate13.getField(1);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        boolean boolean23 = localDate13.isEqual((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.Chronology chronology24 = localDate13.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.centuries();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 18, 1645513964013L, periodType9, chronology24);
        org.joda.time.PeriodType periodType27 = periodType9.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "StandardNoHours" + "'", str10, "StandardNoHours");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PeriodType[StandardNoHours]" + "'", str11, "PeriodType[StandardNoHours]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.DateTime dateTime24 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone32);
        long long35 = dateTimeZone32.nextTransition((long) 1);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 13, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        int int42 = period41.size();
        java.lang.String str43 = period41.toString();
        org.joda.time.Period period45 = period41.plusMonths(11);
        boolean boolean46 = dateTime36.equals((java.lang.Object) period45);
        int[] intArray49 = chronology25.get((org.joda.time.ReadablePeriod) period45, (long) 7, (long) ' ');
        int int50 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate12, intArray49);
        java.lang.String str51 = dateTimeField10.getName();
        org.joda.time.DurationField durationField52 = dateTimeField10.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54 + "'", int13 == 54);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0S" + "'", str43, "PT0S");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "dayOfWeek" + "'", str51, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        boolean boolean5 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 6609303);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYear(17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter6.withChronology(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.parse("P126Y893WT35213785H231M2332.011S", dateTimeFormatter6);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.Chronology chronology7 = interval2.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfMonth();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfFloorCopy();
        org.joda.time.Interval interval16 = property13.toInterval();
        org.joda.time.Interval interval17 = interval16.toInterval();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 1961, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType8.getField(chronology18);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((java.lang.Object) interval2, chronology18);
        org.joda.time.Chronology chronology22 = interval2.getChronology();
        org.joda.time.DateTime dateTime23 = interval2.getStart();
        long long24 = interval2.getEndMillis();
        long long25 = interval2.getEndMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-5820L));
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        mutableDateTime1.setDate((long) 266);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.DurationField durationField15 = property14.getDurationField();
        org.joda.time.DateMidnight dateMidnight16 = property14.roundHalfFloorCopy();
        java.lang.String str17 = property14.getAsString();
        org.joda.time.DateMidnight dateMidnight18 = property14.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight19 = property14.withMinimumValue();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withWeekyear(0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2" + "'", str17, "2");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds(1);
        int int14 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy(32770);
        int int18 = localDateTime17.getSecondOfMinute();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType23, 1);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(17);
        org.joda.time.DateTime dateTime46 = dateMidnight45.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.withMinuteOfHour(38);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.DateTime dateTime60 = dateTime48.withField(dateTimeFieldType56, 11);
        boolean boolean61 = localDateTime39.isSupported(dateTimeFieldType56);
        mutableDateTime20.set(dateTimeFieldType56, (int) (byte) 1);
        int int64 = localDateTime17.get(dateTimeFieldType56);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = localDateTime17.getValue(79446224);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 79446224");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3277017 + "'", int64 == 3277017);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.joda.time.Period period8 = new org.joda.time.Period(40, 8, 31, 0, 256, 256, 2083, 25728);
        int int9 = period8.getWeeks();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate5.toDateTime(readableInstant11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property14.addWrapFieldToCopy(35213769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property14.setCopy(79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1326 + "'", int13 == 1326);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period8 = period4.plusMonths(11);
        int int9 = period4.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        int int16 = period14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = period14.toMutablePeriod();
        int int18 = period14.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.Period period26 = period14.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = period4.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period26.minusWeeks(70);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay27.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay27.plusMonths((-292275054));
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay27.minusDays(28);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = localDate45.getChronology();
        org.joda.time.LocalDate.Property property50 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property50.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay39.withField(dateTimeFieldType51, 566);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 566 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868377490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=42,MILLISECOND=874,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(287);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths(722);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Period period25 = period23.minusMillis(13);
        org.joda.time.Period period27 = period23.minusDays(0);
        int int28 = period27.size();
        java.lang.String str29 = period27.toString();
        org.joda.time.Period period30 = period27.normalizedStandard();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime17.plus((org.joda.time.ReadablePeriod) period27);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT-119M", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("74");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean57 = interval53.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = interval2.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DurationField durationField63 = property62.getDurationField();
        org.joda.time.DateMidnight dateMidnight64 = property62.roundHalfFloorCopy();
        org.joda.time.Interval interval65 = property62.toInterval();
        org.joda.time.Interval interval66 = interval65.toInterval();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Interval interval68 = interval66.withPeriodAfterStart(readablePeriod67);
        boolean boolean69 = interval56.isBefore((org.joda.time.ReadableInterval) interval68);
        org.joda.time.MutableInterval mutableInterval70 = interval56.toMutableInterval();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime74 = property73.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime76 = property73.set(9);
        org.joda.time.MutableDateTime mutableDateTime77 = property73.getMutableDateTime();
        mutableDateTime77.addMillis(11);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime77.add(durationFieldType80, 31);
        boolean boolean83 = interval56.isBefore((org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime77.setYear(7);
        org.joda.time.Chronology chronology86 = mutableDateTime77.getChronology();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(chronology86);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mutableInterval70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod1.setYears(53);
        mutablePeriod1.setMinutes(54);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay23.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay23.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay23.withYear(266);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = localDate44.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DurationField durationField50 = chronology48.weekyears();
        org.joda.time.Period period51 = new org.joda.time.Period(0L, chronology48);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType37, chronology48);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay33.withChronologyRetainFields(chronology48);
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology48);
        boolean boolean55 = mutablePeriod1.equals((java.lang.Object) dateMidnight54);
        mutablePeriod1.setPeriod(36694555, 23, 266, 32759, (-292275054), 0, 9, 1634400000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.isStandardOffset(373247999860021969L);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekOfWeekyear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = property21.addToCopy(34);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDateTime23);
        boolean boolean25 = dateTimeZone1.isLocalDateTimeGap(localDateTime23);
        java.lang.String str26 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+38:53" + "'", str26, "+38:53");
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay7.dayOfMonth();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = property20.getAsText(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = localDate27.getField(1);
        java.lang.String str30 = dateTimeField29.getName();
        boolean boolean31 = dateTimeField29.isLenient();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = localDate37.isSupported(dateTimeFieldType39);
        int int41 = localDate37.getWeekyear();
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDate37, locale43);
        java.lang.String str45 = locale22.getDisplayScript(locale43);
        java.lang.String str46 = locale22.getLanguage();
        java.util.Set<java.lang.Character> charSet47 = locale22.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = locale22.getDisplayLanguage(locale48);
        int int50 = property15.getMaximumTextLength(locale22);
        org.joda.time.DateTimeField dateTimeField51 = property15.getField();
        int int53 = dateTimeField51.get((long) '#');
        long long55 = dateTimeField51.roundHalfEven(2822689140017L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 28 + "'", int16 == 28);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Deutsch (Deutschland)" + "'", str25, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "monthOfYear" + "'", str30, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc6d4" + "'", str44, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "de" + "'", str46, "de");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Deutsch" + "'", str49, "Deutsch");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2822688000000L + "'", long55 == 2822688000000L);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.era();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay13 = property12.getTimeOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int16 = dateTimeField14.get((long) (byte) 100);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale18.toLanguageTag();
        java.lang.String str21 = dateTimeField14.getAsText(256, locale18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (byte) 10);
        int int29 = dateMidnight26.getYearOfEra();
        org.joda.time.DateTime dateTime30 = dateMidnight26.toDateTime();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds(10);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight26.withFields((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.LocalTime localTime38 = localTime35.minusMinutes(12);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale39.getDisplayCountry(locale40);
        java.lang.String str43 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localTime35, locale40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight44 = property8.setCopy("zho", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"zho\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ko-KR" + "'", str20, "ko-KR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "256" + "'", str21, "256");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1961 + "'", int29 == 1961);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Taiwan" + "'", str42, "Taiwan");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "6" + "'", str43, "6");
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight40.getZone();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(dateTimeZone41);
        long long44 = dateTimeZone41.nextTransition((long) 1);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 13, dateTimeZone41);
        org.joda.time.DateTime dateTime47 = dateTime45.withMillis((long) 38);
        org.joda.time.DateTime dateTime48 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime50 = dateTime45.minusDays(657);
        int int51 = dateTime45.getYear();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        int int63 = property54.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.MutableDateTime mutableDateTime65 = property54.add(10);
        org.joda.time.Chronology chronology66 = mutableDateTime65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology66.getZone();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime45.toDateTime(dateTimeZone67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeFormatter34.print((org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.LocalTime localTime7 = timeOfDay1.toLocalTime();
        int int8 = timeOfDay1.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.plusMinutes(183);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.minuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("millisOfSecond");
        calendar0.setTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusSeconds((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withMillisOfSecond(126);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(10);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        boolean boolean26 = calendar0.after((java.lang.Object) localTime25);
        java.util.TimeZone timeZone27 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = timeZone27.getOffset(2022, 28, 36, (-96608), 79540050, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=43,MILLISECOND=218,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(20);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.LocalTime localTime12 = localTime9.withMinuteOfHour(53);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(22);
        org.joda.time.LocalTime localTime16 = localTime12.plusSeconds(840);
        org.joda.time.LocalTime localTime18 = localTime12.plusSeconds(1961);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = localTime18.withSecondOfMinute(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "20:38:52.880" + "'", str10, "20:38:52.880");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        int int6 = dateTime5.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        int int19 = localDate12.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = localDate12.toDateMidnight();
        org.joda.time.Interval interval21 = dateMidnight20.toInterval();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        int int29 = periodType24.indexOf(durationFieldType28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(periodType24);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 293, (long) 162, periodType24);
        org.joda.time.PeriodType periodType32 = periodType24.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 'a', dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate38, (org.joda.time.ReadablePartial) localDate41);
        org.joda.time.LocalDate localDate44 = localDate38.withDayOfMonth(13);
        org.joda.time.DateTime dateTime45 = localDate38.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology46 = localDate38.getChronology();
        mutablePeriod34.add((long) '4', chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight51, readableDuration52);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.centuries();
        int int55 = period53.get(durationFieldType54);
        int[] intArray58 = chronology46.get((org.joda.time.ReadablePeriod) period53, (long) 79308922, (long) 22);
        org.joda.time.Period period60 = org.joda.time.Period.seconds(293);
        long long63 = chronology46.add((org.joda.time.ReadablePeriod) period60, 139980000L, 98);
        java.lang.String str64 = period60.toString();
        int int65 = period60.getMinutes();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.hours();
        int int67 = period60.get(durationFieldType66);
        boolean boolean68 = periodType24.isSupported(durationFieldType66);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, -22, -1, -48, -900]");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 168694000L + "'", long63 == 168694000L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT293S" + "'", str64, "PT293S");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        int int6 = mutableDateTime5.getRoundingMode();
        mutableDateTime5.setYear(3277017);
        java.lang.Object obj9 = mutableDateTime5.clone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "3277017-02-23T22:06:01.975+38:53");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "3277017-02-23T22:06:01.975+38:53");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "3277017-02-23T22:06:01.975+38:53");
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        java.util.Calendar.Builder builder16 = builder0.setTimeZone(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getMinimalDaysInFirstWeek();
        calendar17.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay23 = org.joda.time.YearMonthDay.fromCalendarFields(calendar17);
        int int24 = calendar17.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone25 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder26 = builder0.setTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = property32.getAsText(locale34);
        java.lang.String str36 = locale34.getISO3Language();
        java.util.Locale.setDefault(locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = timeZone25.getDisplayName(false, 1030, locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1030");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-61427868377007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=43,MILLISECOND=357,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2" + "'", str35, "2");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "deu" + "'", str36, "deu");
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight5.withDayOfYear((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant13, (org.joda.time.ReadableInstant) instant14);
        org.joda.time.Period period16 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.Period period19 = period16.withPeriodType(periodType17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime21.addMinutes(266);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Instant instant38 = instant24.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        boolean boolean54 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration52);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = period16.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant14, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.minusDays(17);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateMidnight60, periodType64);
        org.joda.time.DateTime dateTime66 = dateMidnight60.toDateTime();
        int int67 = dateMidnight12.compareTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight70 = dateMidnight12.withField(dateTimeFieldType68, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-50399));
        org.joda.time.Interval interval4 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfMonth();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateMidnight dateMidnight10 = property8.roundHalfFloorCopy();
        org.joda.time.Interval interval11 = property8.toInterval();
        boolean boolean12 = interval4.isAfter((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Duration duration13 = interval11.toDuration();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.minusDays(17);
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTimeISO();
        org.joda.time.DateTime dateTime30 = dateTime28.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight31 = dateTime28.toDateMidnight();
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.Period period37 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate38 = localDate32.minus((org.joda.time.ReadablePeriod) period37);
        boolean boolean39 = interval21.equals((java.lang.Object) period37);
        java.lang.Object obj41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        int int51 = localDate47.getWeekyear();
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        java.lang.String str53 = chronology52.toString();
        org.joda.time.DurationField durationField54 = chronology52.weeks();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(obj41, chronology52);
        org.joda.time.DateTimeField dateTimeField56 = chronology52.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(1641600000L, chronology52);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval62 = interval60.withEndMillis((long) 38);
        org.joda.time.Duration duration63 = interval62.toDuration();
        org.joda.time.Duration duration64 = duration63.toDuration();
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration63, 1159);
        org.joda.time.Interval interval67 = interval21.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Interval interval68 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval68);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        mutableDateTime6.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime6.set(dateTimeFieldType9, 1);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime6.year();
        mutableDateTime6.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, (org.joda.time.ReadableInstant) dateMidnight41, periodType45);
        int int47 = dateMidnight41.getMillisOfSecond();
        boolean boolean48 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight41.plusDays(150);
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight41.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(11, 0, (-9054), 799, 30, dateTimeZone51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 799 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        java.lang.String str17 = duration16.toString();
        org.joda.time.Period period19 = org.joda.time.Period.months(36023888);
        org.joda.time.PeriodType periodType20 = period19.getPeriodType();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration16, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, readableInstant23);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.addCopy((long) 100);
        org.joda.time.LocalTime localTime12 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        int[] intArray17 = chronology13.get((org.joda.time.ReadablePartial) localTime15, (long) 287);
        org.joda.time.DurationField durationField18 = chronology13.years();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 287]");
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(82);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = property15.addToCopy((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (byte) 10);
        int int25 = dateMidnight22.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth(22);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusWeeks(1969);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusWeeks(12);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        int int44 = localDate40.getWeekyear();
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight50.getZone();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = dateMidnight58.getZone();
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay53.toDateMidnight(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = yearMonthDay53.toDateMidnight();
        java.lang.String[] strArray64 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight69, readableDuration70);
        boolean boolean72 = strSet65.remove((java.lang.Object) readableDuration70);
        java.util.stream.Stream<java.lang.String> strStream73 = strSet65.parallelStream();
        boolean boolean74 = yearMonthDay53.equals((java.lang.Object) strSet65);
        boolean boolean75 = localDate40.equals((java.lang.Object) yearMonthDay53);
        java.lang.String str76 = yearMonthDay53.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = yearMonthDay53.getFieldType(0);
        org.joda.time.DateMidnight.Property property79 = dateMidnight34.property(dateTimeFieldType78);
        org.joda.time.DateMidnight.Property property80 = dateMidnight29.property(dateTimeFieldType78);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay17.withField(dateTimeFieldType78, 2035);
        java.lang.String str83 = dateTimeFieldType78.getName();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1961 + "'", int25 == 1961);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-23" + "'", str76, "2022-02-23");
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "year" + "'", str83, "year");
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(126);
        org.joda.time.Period period15 = org.joda.time.Period.millis(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 34);
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.DurationField durationField21 = dateTimeField20.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime.Property property6 = localTime4.secondOfMinute();
        java.util.Locale locale8 = new java.util.Locale("Sun Dec 28 00:00:00 UTC 6611203");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = property6.getAsShortText(locale8);
        java.lang.String str11 = locale8.getDisplayCountry();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals(locale8.toString(), "sun dec 28 00:00:00 utc 6611203");
        org.junit.Assert.assertNotNull(strSet9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "53" + "'", str10, "53");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.plusDays(537);
        org.joda.time.LocalDate.Property property14 = localDate10.dayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale15.getDisplayCountry(locale16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = localDate20.getField(1);
        java.lang.String str23 = dateTimeField22.getName();
        boolean boolean24 = dateTimeField22.isLenient();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = localDate30.isSupported(dateTimeFieldType32);
        int int34 = localDate30.getWeekyear();
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDate30, locale36);
        java.lang.String str38 = locale16.getDisplayVariant(locale36);
        int int39 = property14.getMaximumShortTextLength(locale36);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Taiwan" + "'", str18, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "monthOfYear" + "'", str23, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc6d4" + "'", str37, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property7.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        java.lang.String str15 = locale12.getDisplayCountry(locale13);
        java.lang.String str16 = dateTimeField10.getAsShortText(126, locale12);
        int int17 = property3.getMaximumShortTextLength(locale12);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfMonth();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = property23.getAsText(locale25);
        java.lang.String str27 = locale25.getISO3Language();
        java.lang.String str28 = locale25.getDisplayLanguage();
        java.lang.String str29 = locale18.getDisplayScript(locale25);
        java.lang.String str30 = locale12.getDisplayScript(locale18);
        java.util.Set<java.lang.String> strSet31 = locale18.getUnicodeLocaleKeys();
        java.lang.String str34 = nameProvider0.getShortName(locale18, "0017-01-10T00:17:00.000", "monthOfYear");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale38 = new java.util.Locale("Sun Dec 28 00:00:00 UTC 6611203");
        java.lang.String str41 = nameProvider0.getName(locale38, "10:04:11.122", "Property[dayOfMonth]");
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet42.isEmpty();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Taiwan" + "'", str15, "Taiwan");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "126" + "'", str16, "126");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2" + "'", str26, "2");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deu" + "'", str27, "deu");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tedesco" + "'", str28, "tedesco");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals(locale38.toString(), "sun dec 28 00:00:00 utc 6611203");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        int int8 = yearMonthDay7.getDayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonthDay7.getFieldTypes();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfEra();
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) ' ');
        org.joda.time.Instant instant21 = instant19.withMillis((long) (byte) -1);
        org.joda.time.Instant instant23 = instant21.minus((long) (byte) 1);
        int int24 = property17.getDifference((org.joda.time.ReadableInstant) instant23);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay27.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay27.plusMonths((-292275054));
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay27.minusDays(28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType41 = yearMonthDay39.getFieldType(685);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 685");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868376377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=364,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=43,MILLISECOND=987,ZONE_OFFSET=364,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        long long16 = dateTimeZone14.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.minusDays(17);
        org.joda.time.DateTime dateTime23 = dateMidnight22.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.withMinuteOfHour(38);
        int int26 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime23.getZone();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Interval interval29 = localDate8.toInterval(dateTimeZone27);
        java.util.TimeZone timeZone30 = dateTimeZone27.toTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        java.lang.String str32 = timeZone30.getID();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 139980000 + "'", int26 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GMT" + "'", str32, "GMT");
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        int int14 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYear(2);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime10.getValue(2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2022");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(4320000000L, chronology17);
        org.joda.time.DurationField durationField20 = chronology17.millis();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology17.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(28, 1324, 75841, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1324 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.DurationField durationField12 = property10.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = localTime15.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime19 = localTime17.plusSeconds(10);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.LocalTime localTime22 = property20.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        org.joda.time.LocalTime localTime24 = property20.roundCeilingCopy();
        org.joda.time.LocalTime localTime26 = property20.addCopy((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = property14.compareTo((org.joda.time.ReadablePartial) localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.Interval interval9 = property6.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 1961, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType1.getField(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(4320000000L, chronology11);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) '#');
        org.joda.time.LocalTime localTime18 = localTime14.minusSeconds(126);
        org.joda.time.LocalTime localTime20 = localTime14.plusSeconds(647);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((-1L), 1L, periodType3, chronology17);
        org.joda.time.PeriodType periodType20 = periodType3.withWeeksRemoved();
        boolean boolean22 = periodType3.equals((java.lang.Object) 1645513919179L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("year");
        boolean boolean2 = timeZone1.observesDaylightTime();
        boolean boolean3 = timeZone1.observesDaylightTime();
        timeZone1.setRawOffset(537);
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.secondOfMinute();
        long long19 = dateTimeField16.getDifferenceAsLong(246L, (long) 16);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.year();
        mutableDateTime1.setMillis((-259200000L));
        int int31 = mutableDateTime1.getMinuteOfDay();
        mutableDateTime1.addYears(32770);
        mutableDateTime1.setMillis((long) 79315175);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setMillis(0L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 893 + "'", int31 == 893);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        java.lang.String str1 = periodType0.getName();
        int int2 = periodType0.size();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType0);
        java.lang.String str4 = periodType0.getName();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Hours" + "'", str1, "Hours");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Hours" + "'", str4, "Hours");
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(5, 12);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getMinimalDaysInFirstWeek();
        calendar11.setTimeInMillis((long) (byte) 1);
        java.util.Date date15 = calendar11.getTime();
        date15.setHours((int) (byte) 10);
        int int18 = date15.getMinutes();
        date15.setTime(1036800010L);
        int int21 = date15.getHours();
        int int22 = date15.getSeconds();
        calendar0.setTime(date15);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        int int25 = calendar24.getMinimalDaysInFirstWeek();
        calendar24.set((int) (short) 1, 266, (int) (byte) 100);
        int int30 = calendar24.getMinimalDaysInFirstWeek();
        java.util.Date date36 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date36.setMonth((int) (short) 1);
        java.util.Date date44 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date44.setMonth((int) (short) 1);
        java.util.Date date52 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date52.setMonth((int) (short) 1);
        boolean boolean55 = date44.before(date52);
        int int56 = date44.getHours();
        boolean boolean57 = date36.before(date44);
        date36.setMinutes(231);
        calendar24.setTime(date36);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.fromDateFields(date36);
        boolean boolean62 = date15.before(date36);
        java.lang.Object obj63 = date36.clone();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1036800010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 13 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1731740940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=51,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 15 16:51:00 GMT 1915");
        org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertEquals(date52.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 13 + "'", int56 == 13);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "Mon Feb 15 16:51:00 GMT 1915");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "Mon Feb 15 16:51:00 GMT 1915");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "Mon Feb 15 16:51:00 GMT 1915");
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(8);
        int int16 = localDateTime13.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean57 = interval53.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = interval2.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Chronology chronology59 = interval2.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        int int62 = localDate61.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate61.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateTime dateTime66 = dateTime64.plus((long) 1961);
        org.joda.time.DateTime dateTime68 = dateTime64.minusHours(657);
        boolean boolean69 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate73, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        boolean boolean79 = localDate76.isSupported(dateTimeFieldType78);
        int int80 = localDate76.getWeekyear();
        org.joda.time.Chronology chronology81 = localDate76.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.weekOfWeekyear();
        org.joda.time.DurationField durationField83 = chronology81.halfdays();
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 183, chronology81);
        boolean boolean85 = interval2.isAfter((org.joda.time.ReadableInstant) mutableDateTime84);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 54 + "'", int62 == 54);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(8L, periodType2);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        int int7 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.Period period17 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period18 = new org.joda.time.Period();
        org.joda.time.Period period20 = period18.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean22 = period20.isSupported(durationFieldType21);
        org.joda.time.Period period24 = period17.withFieldAdded(durationFieldType21, 0);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 12);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.YearMonthDay yearMonthDay29 = property27.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate35.isSupported(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = localDate35.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.minutes();
        org.joda.time.DurationField durationField41 = chronology39.weekyears();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay29.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight52 = dateTime49.toDateMidnight();
        org.joda.time.LocalDate localDate53 = dateTime49.toLocalDate();
        org.joda.time.Period period58 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate59 = localDate53.minus((org.joda.time.ReadablePeriod) period58);
        int[] intArray61 = chronology39.get((org.joda.time.ReadablePartial) localDate53, (long) (-292275054));
        mutablePeriod3.setPeriod((long) 5, (long) (-292275054), chronology39);
        org.joda.time.DateTimeField dateTimeField63 = chronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = chronology39.year();
        long long66 = dateTimeField64.roundFloor(86400001L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61427868375851,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=44,MILLISECOND=149,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[1969, 12, 28]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(868);
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        java.lang.Object obj18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(obj18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant(obj18);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime16.withChronology(chronology21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusDays(17);
        org.joda.time.DateTime dateTime20 = dateMidnight19.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(38);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.DateTime dateTime34 = dateTime22.withField(dateTimeFieldType30, 11);
        boolean boolean35 = localDateTime13.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property36 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(657);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(267);
        int int41 = localDateTime38.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime38.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period49 = org.joda.time.Period.years(79308922);
        org.joda.time.Period period51 = period49.withWeeks(139980000);
        org.joda.time.Period period53 = period49.withDays(38);
        org.joda.time.Period period55 = period49.plusMillis(19721);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime47.plus((org.joda.time.ReadablePeriod) period55);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        java.lang.String str6 = property3.toString();
        org.joda.time.DateMidnight dateMidnight7 = property3.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfMonth]" + "'", str6, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(38);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis(587);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear(17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.dayOfMonth();
        int int25 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYear(2);
        org.joda.time.LocalDateTime.Property property28 = localDateTime21.yearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime8.withFields((org.joda.time.ReadablePartial) localDateTime21);
        int int30 = dateTime29.getMonthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.addMinutes(13);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean44 = interval40.contains((org.joda.time.ReadableInterval) interval43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime57 = property54.set(9);
        org.joda.time.MutableDateTime mutableDateTime58 = property54.getMutableDateTime();
        boolean boolean59 = dateMidnight51.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        boolean boolean60 = interval43.isBefore((org.joda.time.ReadableInstant) dateMidnight51);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight51.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = dateMidnight51.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateTime dateTime8 = dateMidnight4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(399);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime.Property property12 = dateTime10.millisOfSecond();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property21 = localDate18.centuryOfEra();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(122);
        int int24 = localDate18.getEra();
        org.joda.time.LocalDate localDate26 = localDate18.withYear(38243164);
        org.joda.time.LocalDate.Property property27 = localDate18.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("T22:02:14.318");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t22:02:14.318");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        int int15 = localDate11.getWeekyear();
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.joda.time.Period period18 = new org.joda.time.Period(1010016000000L, (long) 35, chronology16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
        long long28 = dateTimeZone25.nextTransition((long) 1);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 13, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay37.toDateMidnight(dateTimeZone43);
        java.lang.String str46 = dateTimeZone43.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = dateTime29.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1010016000000L, dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone43);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter50.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withOffsetParsed();
        java.io.Writer writer53 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = null;
        boolean boolean62 = localDate59.isSupported(dateTimeFieldType61);
        int int63 = localDate59.getWeekyear();
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate59.toDateTime(readableInstant65);
        int int67 = dateTime66.getMinuteOfDay();
        org.joda.time.DateTime.Property property68 = dateTime66.dayOfWeek();
        org.joda.time.DateTime dateTime70 = property68.addToCopy(86400000L);
        org.joda.time.DateTime dateTime71 = property68.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime72 = property68.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter52.printTo(writer53, (org.joda.time.ReadableInstant) dateTime72);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+38:53" + "'", str46, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(dateTimePrinter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1326 + "'", int67 == 1326);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) 1961);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(11);
        org.joda.time.DateTime dateTime10 = dateTime4.minusMinutes((int) '4');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtCurrentTime(dateTimeZone13);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfMinute();
        boolean boolean17 = dateTime10.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property18 = dateTime10.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        java.lang.Object obj2 = mutablePeriod1.clone();
        mutablePeriod1.setMonths((int) 'u');
        mutablePeriod1.add(893, 79334, 25728, 266, (int) (byte) 100, 10, 0, 35);
        mutablePeriod1.add((long) 99);
        mutablePeriod1.setPeriod((long) 79516, (long) 1326);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "PT-1M-18.190S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "PT-1M-18.190S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "PT-1M-18.190S");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(17);
        org.joda.time.DateTime dateTime22 = dateMidnight21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.LocalDate localDate26 = dateTime22.toLocalDate();
        org.joda.time.Period period31 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate32 = localDate26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = interval15.equals((java.lang.Object) period31);
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime35 = interval15.getStart();
        org.joda.time.Period period36 = interval15.toPeriod();
        org.joda.time.Period period38 = period36.withSeconds(79516);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DurationField durationField44 = property43.getDurationField();
        org.joda.time.DateMidnight dateMidnight45 = property43.roundHalfFloorCopy();
        org.joda.time.Interval interval46 = property43.toInterval();
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.Chronology chronology48 = interval46.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 1961, chronology48);
        org.joda.time.LocalTime.Property property50 = localTime49.secondOfMinute();
        org.joda.time.LocalTime localTime51 = property50.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int53 = localTime51.indexOf(dateTimeFieldType52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.withMillis((long) 31);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight56.minus((long) (short) 100);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 10);
        int int65 = mutablePeriod64.getSeconds();
        mutablePeriod64.addHours((int) (short) 0);
        mutablePeriod64.clear();
        org.joda.time.Period period69 = new org.joda.time.Period();
        org.joda.time.Period period71 = period69.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean73 = period71.isSupported(durationFieldType72);
        java.lang.String str74 = durationFieldType72.toString();
        int int75 = mutablePeriod64.get(durationFieldType72);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight62.withFieldAdded(durationFieldType72, 53);
        boolean boolean78 = localTime51.isSupported(durationFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period80 = period36.withFieldAdded(durationFieldType72, 79437);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "weekyears" + "'", str74, "weekyears");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate5.toDateTime(readableInstant11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.DateTime dateTime18 = property16.withMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1326 + "'", int13 == 1326);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMonths(11);
        int int12 = localDateTime9.size();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setDate((int) '4', 13, 10);
        java.util.Calendar calendar18 = builder13.build();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields(calendar18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime9, (org.joda.time.ReadablePartial) yearMonthDay19, periodType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-60491318400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(periodType20);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category10, locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale12);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        calendar16.setMinimalDaysInFirstWeek(36161901);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514024822,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=36161901,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=44,MILLISECOND=822,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) 10, (int) '#', 1961, (int) (short) -1, (int) '4', 100, 0, (int) (byte) 1);
        org.joda.time.Period period10 = period8.minusYears((int) '4');
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType13, chronology15);
        org.joda.time.PeriodType periodType17 = periodType13.withMillisRemoved();
        org.joda.time.Period period18 = period10.normalizedStandard(periodType13);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        long long27 = dateTimeZone25.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.minusDays(17);
        org.joda.time.DateTime dateTime34 = dateMidnight33.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = dateTime34.withMinuteOfHour(38);
        int int37 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime34.getZone();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1000, dateTimeZone38);
        boolean boolean43 = periodType13.equals((java.lang.Object) dateTimeZone38);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 139980000 + "'", int37 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.joda.time.Chronology chronology0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now(chronology0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Chronology must not be null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set(9);
        org.joda.time.MutableDateTime mutableDateTime6 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundHalfFloor();
        org.joda.time.DateTimeField dateTimeField8 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.roundFloor();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set((int) '4', 0, 0, 0, 38);
        int int7 = calendar0.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getGreatestMinimum(19721);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19721");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60526480875040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=51,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=38,SECOND=44,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone17);
        long long20 = dateTimeZone17.nextTransition((long) 1);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 13, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        int int27 = period26.size();
        java.lang.String str28 = period26.toString();
        org.joda.time.Period period30 = period26.plusMonths(11);
        boolean boolean31 = dateTime21.equals((java.lang.Object) period30);
        int[] intArray34 = chronology10.get((org.joda.time.ReadablePeriod) period30, (long) 7, (long) ' ');
        org.joda.time.DateTimeField dateTimeField35 = chronology10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology10.getZone();
        java.lang.String str37 = dateTimeZone36.toString();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT0S" + "'", str28, "PT0S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFieldAdded(durationFieldType11, 4);
        int int14 = localDateTime10.getYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusSeconds(79334);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.withHourOfDay(8);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYear(17);
        int[] intArray30 = localDateTime29.getValues();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds(1);
        int int33 = localDateTime29.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime36 = property34.setCopy(32770);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMinuteOfHour(14);
        int int39 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        int int40 = localDateTime10.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 17 + "'", int33 == 17);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate17 = localDate11.withDayOfMonth(13);
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology19 = localDate11.getChronology();
        mutablePeriod7.add((long) '4', chronology19);
        org.joda.time.Period period21 = new org.joda.time.Period((-1L), 1L, periodType5, chronology19);
        int int22 = periodType5.size();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfMonth();
        org.joda.time.DurationField durationField27 = property26.getDurationField();
        org.joda.time.DateMidnight dateMidnight28 = property26.roundHalfFloorCopy();
        org.joda.time.Interval interval29 = property26.toInterval();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(17);
        org.joda.time.DateTime dateTime36 = dateMidnight35.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight39 = dateTime36.toDateMidnight();
        org.joda.time.LocalDate localDate40 = dateTime36.toLocalDate();
        org.joda.time.Period period45 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate46 = localDate40.minus((org.joda.time.ReadablePeriod) period45);
        boolean boolean47 = interval29.equals((java.lang.Object) period45);
        boolean boolean48 = periodType5.equals((java.lang.Object) boolean47);
        org.joda.time.PeriodType periodType49 = periodType5.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate localDate58 = localDate52.withDayOfMonth(13);
        org.joda.time.DateTime dateTime59 = localDate52.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology60 = localDate52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = dateMidnight66.getZone();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone67);
        long long70 = dateTimeZone67.nextTransition((long) 1);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 13, dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        int int77 = period76.size();
        java.lang.String str78 = period76.toString();
        org.joda.time.Period period80 = period76.plusMonths(11);
        boolean boolean81 = dateTime71.equals((java.lang.Object) period80);
        int[] intArray84 = chronology60.get((org.joda.time.ReadablePeriod) period80, (long) 7, (long) ' ');
        org.joda.time.DateTimeField dateTimeField85 = chronology60.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 293, 2506789555200000L, periodType5, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2506789555199707");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0S" + "'", str78, "PT0S");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime6.plusSeconds(4);
        org.joda.time.DateTime dateTime12 = dateTime6.minusMonths(169);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getWeekyear();
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate18.toDateTime(readableInstant24);
        int int26 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTime.Property property27 = dateTime25.dayOfWeek();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField30.getType();
        org.joda.time.DateTime.Property property32 = dateTime12.property(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1326 + "'", int26 == 1326);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 38123073, 139980587L);
        int int3 = period2.getSeconds();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 37 + "'", int3 == 37);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundHalfFloorCopy();
        org.joda.time.Interval interval14 = property11.toInterval();
        org.joda.time.Interval interval15 = interval14.toInterval();
        boolean boolean16 = interval7.overlaps((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Interval interval17 = interval7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.minusDays(17);
        org.joda.time.DateTime dateTime24 = dateMidnight23.toDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime24.withMinuteOfHour(38);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(587);
        org.joda.time.DateTime dateTime30 = dateTime26.plusWeeks(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Instant instant45 = instant31.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime mutableDateTime46 = instant45.toMutableDateTimeISO();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plus((long) 1961);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(11);
        org.joda.time.DateTime dateTime57 = dateTime51.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime59 = dateTime51.withYear(999);
        org.joda.time.DateTime dateTime61 = dateTime51.withWeekyear(31);
        mutableDateTime46.setDate((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime65 = dateTime30.withYearOfEra(79476);
        boolean boolean66 = interval17.equals((java.lang.Object) dateTime65);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 54 + "'", int49 == 54);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.withYearOfEra(1322);
        org.joda.time.DateTime dateTime9 = dateTime7.withHourOfDay(10);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMinutes(21);
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(34);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(2008);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        int int5 = property4.getMaximumValue();
        org.joda.time.DurationField durationField6 = property4.getDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property4.getFieldType();
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.set(1645513879000L, 17259926);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17259926 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999 + "'", int5 == 999);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        int int12 = dateTimeField10.getMinimumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.LocalDate localDate24 = localDate18.minusDays(100);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        long long34 = dateTimeZone31.nextTransition((long) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime37.set(dateTimeFieldType40, 1);
        org.joda.time.LocalDate.Property property43 = localDate35.property(dateTimeFieldType40);
        int int44 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate35);
        int int45 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        int int46 = localDate24.getDayOfYear();
        org.joda.time.LocalDate localDate48 = localDate24.plusDays(82);
        int int49 = localDate48.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 267 + "'", int25 == 267);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 267 + "'", int46 == 267);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 51 + "'", int49 == 51);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        int int34 = property33.get();
        org.joda.time.YearMonthDay yearMonthDay36 = property33.addToCopy(10);
        int int37 = property33.get();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = property33.setCopy("dayOfYear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfYear\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868374585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=45,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 23 + "'", int34 == 23);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        boolean boolean56 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) instant55);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime32.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime32.secondOfDay();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusWeeks(12);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        mutableDateTime6.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime6.set(dateTimeFieldType9, 1);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight4.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.year();
        org.joda.time.DateMidnight dateMidnight35 = property33.setCopy("8");
        org.joda.time.DateMidnight dateMidnight36 = property33.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight37 = property33.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight37);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        int int3 = dateMidnight2.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDayOfYear(4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withYear(999);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        mutablePeriod9.add((long) '4', chronology21);
        mutablePeriod9.setHours(231);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight5.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = dateMidnight5.withDayOfMonth(79594342);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79594342 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeeksInWeekYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        long long17 = dateTimeZone14.nextTransition((long) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType23, 1);
        org.joda.time.LocalDate.Property property26 = localDate18.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate27 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate29 = localDate27.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property30 = localDate27.year();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 10);
        int int33 = mutablePeriod32.getWeeks();
        mutablePeriod32.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod32.setYears(53);
        mutablePeriod32.setYears(292269054);
        org.joda.time.LocalDate localDate47 = localDate27.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        boolean boolean48 = calendar0.before((java.lang.Object) localDate27);
        org.joda.time.LocalDate.Property property49 = localDate27.year();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868374439,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=45,MILLISECOND=561,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("PT0.034S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0.034S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration14 = duration12.toDuration();
        org.joda.time.Duration duration15 = duration12.toDuration();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone22);
        long long25 = dateTimeZone22.nextTransition((long) 1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 13, dateTimeZone22);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime26);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("0266-02-23");
        java.lang.String str31 = dateTime26.toString("58", locale30);
        java.lang.String str32 = dateTime26.toString();
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "58" + "'", str31, "58");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-02T14:53:00.013+38:53" + "'", str32, "1970-01-02T14:53:00.013+38:53");
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("24");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFieldAdded(durationFieldType11, 4);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property16.set(9);
        org.joda.time.MutableDateTime mutableDateTime20 = property16.getMutableDateTime();
        boolean boolean21 = localDateTime13.equals((java.lang.Object) property16);
        int int22 = localDateTime13.size();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.plusMonths(79436);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        int int26 = calendar25.getMinimalDaysInFirstWeek();
        calendar25.setTimeInMillis((long) (byte) 1);
        java.util.Date date29 = calendar25.getTime();
        date29.setHours((int) (byte) 10);
        date29.setMinutes(8);
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromDateFields(date29);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = localDateTime24.compareTo((org.joda.time.ReadablePartial) yearMonthDay34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 10:08:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(1172, 933, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1172 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        long long11 = dateTimeZone9.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(17);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(38);
        int int21 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime1.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 139980000 + "'", int21 == 139980000);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        long long12 = dateTimeZone9.nextTransition((long) 1);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone9);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) 53);
        org.joda.time.Interval interval16 = localDate1.toInterval(dateTimeZone9);
        int int17 = localDate1.getDayOfYear();
        org.joda.time.LocalDate localDate19 = localDate1.minusYears(504);
        int int20 = localDate1.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 54 + "'", int17 == 54);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.centuries();
        int int3 = periodType0.indexOf(durationFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        int int5 = periodType0.indexOf(durationFieldType4);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType7 = periodType0.withHoursRemoved();
        java.lang.String str8 = periodType0.getName();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Standard" + "'", str8, "Standard");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minus(readableDuration14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean26 = localDateTime24.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes(53);
        int int30 = localDateTime29.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(345600000L);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        int int12 = localDateTime11.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withField(dateTimeFieldType13, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localDateTime15.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 957 + "'", int12 == 957);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime7.set(dateTimeFieldType10, 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology26 = localDate18.getChronology();
        mutablePeriod14.add((long) '4', chronology26);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutableDateTime7.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.add((int) (byte) 100);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        mutableDateTime35.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime35.set(dateTimeFieldType38, 1);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, readableDuration55);
        org.joda.time.Duration duration57 = period51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Instant instant58 = instant44.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval59 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration57);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 10);
        int int63 = mutablePeriod62.getWeeks();
        mutablePeriod62.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod62.setYears(53);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime35.toMutableDateTime(dateTimeZone77);
        org.joda.time.Period period83 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period83);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime33.millisOfDay();
        java.util.Locale locale87 = java.util.Locale.ROOT;
        int int88 = property86.getMaximumTextLength(locale87);
        java.util.Set<java.lang.Character> charSet89 = locale87.getExtensionKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter3.withLocale(locale87);
        java.lang.Appendable appendable91 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable91, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        boolean boolean5 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 6609303);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("Italy", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        java.util.Locale locale0 = java.util.Locale.PRC;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        long long10 = durationField7.getDifferenceAsLong(100L, (long) 100);
        long long12 = durationField7.getValueAsLong(0L);
        long long15 = durationField7.getMillis(347, (long) 24);
        boolean boolean16 = strSet2.remove((java.lang.Object) durationField7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 29980800000L + "'", long15 == 29980800000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder12 = builder8.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder14 = builder8.setLocale(locale13);
        java.util.Calendar calendar15 = builder14.build();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar15);
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        calendar15.setTimeInMillis(1645513830609L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645513830609,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=30,MILLISECOND=609,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        boolean boolean31 = timeZone30.observesDaylightTime();
        java.lang.Object obj32 = timeZone30.clone();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514026135,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=46,MILLISECOND=135,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(957137340003L);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        int int10 = mutablePeriod9.getSeconds();
        mutablePeriod9.setSeconds((int) '#');
        org.joda.time.Period period13 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Period period16 = period13.withPeriodType(periodType14);
        mutablePeriod9.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight4.plus((org.joda.time.ReadablePeriod) mutablePeriod9);
        int int19 = mutablePeriod9.getYears();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        int int21 = mutablePeriod9.get(durationFieldType20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        long long38 = dateTimeZone35.nextTransition((long) 1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime41 = instant40.toMutableDateTime();
        mutableDateTime41.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime41.set(dateTimeFieldType44, 1);
        org.joda.time.LocalDate.Property property47 = localDate39.property(dateTimeFieldType44);
        boolean boolean48 = localDate25.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        int int51 = localDate50.getDayOfYear();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.months();
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType44.getField(chronology52);
        org.joda.time.Period period55 = new org.joda.time.Period((-8639999983L), chronology52);
        boolean boolean56 = durationFieldType20.isSupported(chronology52);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        int int59 = localDate57.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 54 + "'", int51 == 54);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        int int6 = period4.get(durationFieldType5);
        org.joda.time.Days days7 = period4.toStandardDays();
        org.joda.time.Period period9 = period4.minusMinutes((-292275054));
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property6 = dateTime3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(79320);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        int int11 = dateTime10.getMonthOfYear();
        int int12 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) (short) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 22);
        org.joda.time.Instant instant19 = instant17.withMillis((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTimeISO();
        org.joda.time.Instant instant23 = instant19.withDurationAdded((long) 8, 2022);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) instant19);
        java.lang.String str25 = instant19.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.100Z" + "'", str25, "1970-01-01T00:00:00.100Z");
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 79429672, (long) 657, periodType2);
        java.lang.String str4 = period3.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P0D" + "'", str4, "P0D");
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.secondOfMinute();
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.joda.time.Period period4 = new org.joda.time.Period(366, 79429672, (-799676), 0);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(17);
        org.joda.time.DateTime dateTime13 = dateMidnight12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate23 = localDate17.minus((org.joda.time.ReadablePeriod) period22);
        boolean boolean24 = interval6.equals((java.lang.Object) period22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime57.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        long long67 = dateTimeZone65.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour(38);
        int int77 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime74);
        mutableDateTime57.setZone(dateTimeZone65);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean86 = interval82.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str87 = interval82.toString();
        boolean boolean88 = interval79.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval89 = interval6.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.MutableInterval mutableInterval90 = interval6.toMutableInterval();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 139980000 + "'", int77 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str87, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(mutableInterval90);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property21 = localDate18.year();
        int int22 = localDate18.getYear();
        int int23 = localDate18.getCenturyOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 10);
        int int26 = mutablePeriod25.getSeconds();
        mutablePeriod25.setSeconds((int) '#');
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = period29.withPeriodType(periodType30);
        mutablePeriod25.add((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period35 = period32.withMinutes(287);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType38 = periodType37.withSecondsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 4, periodType38);
        org.joda.time.Period period40 = period32.normalizedStandard(periodType38);
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.LocalDate localDate42 = localDate18.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.LocalDate localDate44 = localDate18.minusDays(1159);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withCenturyOfEra(1970);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType52, chronology54);
        org.joda.time.Period period57 = period55.minusHours(1);
        int int58 = period57.getSeconds();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight49.withPeriodAdded((org.joda.time.ReadablePeriod) period57, (int) (short) 1);
        org.joda.time.Period period61 = period57.normalizedStandard();
        org.joda.time.LocalDate localDate62 = localDate44.plus((org.joda.time.ReadablePeriod) period57);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDate62);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Duration duration46 = mutablePeriod44.toDurationFrom(readableInstant45);
        org.joda.time.Period period47 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.Period period50 = period47.withPeriodType(periodType48);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime52.addMinutes(266);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, readableDuration66);
        org.joda.time.Duration duration68 = period62.toDurationTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Instant instant69 = instant55.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) 'a', dateTimeZone75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate73, (org.joda.time.ReadablePartial) localDate76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight80, readableDuration81);
        org.joda.time.Duration duration83 = period77.toDurationTo((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Instant instant84 = instant70.minus((org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration68.isLongerThan((org.joda.time.ReadableDuration) duration83);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration87 = period47.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime52.minuteOfHour();
        org.joda.time.Duration duration89 = mutablePeriod44.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime52);
        int int90 = mutableDateTime52.getMillisOfDay();
        mutableDateTime52.setSecondOfDay(0);
        org.joda.time.DateTimeField dateTimeField93 = mutableDateTime52.getRoundingField();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 69540017 + "'", int90 == 69540017);
        org.junit.Assert.assertNull(dateTimeField93);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        long long17 = dateTimeZone14.nextTransition((long) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType23, 1);
        org.joda.time.LocalDate.Property property26 = localDate18.property(dateTimeFieldType23);
        boolean boolean27 = localDate4.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        int int30 = localDate29.getDayOfYear();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.months();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType23.getField(chronology31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) 1322, chronology31);
        int int35 = period34.getYears();
        org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) period34);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 54 + "'", int30 == 54);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        org.joda.time.LocalTime localTime15 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) '4');
        int int16 = localTime15.getMillisOfDay();
        org.joda.time.Period period18 = org.joda.time.Period.weeks(139980000);
        org.joda.time.LocalTime localTime19 = localTime15.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period21 = period18.minusDays(53);
        org.joda.time.Period period23 = period21.withMonths(162);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 79606669 + "'", int16 == 79606669);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod1.setYears(53);
        mutablePeriod1.setMinutes(54);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.DateMidnight dateMidnight30 = yearMonthDay23.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay23.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay23.withYear(266);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 'a', dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate41, (org.joda.time.ReadablePartial) localDate44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        org.joda.time.Chronology chronology48 = localDate44.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.minutes();
        org.joda.time.DurationField durationField50 = chronology48.weekyears();
        org.joda.time.Period period51 = new org.joda.time.Period(0L, chronology48);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType37, chronology48);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay33.withChronologyRetainFields(chronology48);
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology48);
        boolean boolean55 = mutablePeriod1.equals((java.lang.Object) dateMidnight54);
        mutablePeriod1.setYears(868);
        mutablePeriod1.addYears(79318959);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.TimeOfDay timeOfDay3 = property1.withMinimumValue();
        org.joda.time.DurationField durationField4 = property1.getDurationField();
        org.joda.time.DurationFieldType durationFieldType5 = durationField4.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) durationFieldType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(11, (int) 'a');
        calendar0.roll(0, false);
        boolean boolean8 = calendar0.isWeekDateSupported();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis((int) 'a');
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 10);
        int int41 = mutablePeriod40.getWeeks();
        mutablePeriod40.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod40.setYears(53);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutableDateTime13.setWeekOfWeekyear(7);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime13.weekyear();
        mutableDateTime13.addHours((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime13.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime62 = localTime11.withField(dateTimeFieldType60, 292278993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-125940437173232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=57,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=13,SECOND=46,MILLISECOND=768,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        mutableDateTime1.addDays(31);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        mutableDateTime1.add(durationFieldType11, 14);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        int int23 = localDate19.getWeekyear();
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.LocalDate localDate26 = localDate19.minusWeeks(489);
        org.joda.time.DateMidnight dateMidnight27 = localDate26.toDateMidnight();
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.year();
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) 'x');
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 32770);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period30);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime1.toMutableDateTime();
        java.lang.String str35 = mutableDateTime34.toString();
        java.lang.Object obj36 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        int int46 = localDate42.getWeekyear();
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        java.lang.String str48 = chronology47.toString();
        org.joda.time.DurationField durationField49 = chronology47.weeks();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(obj36, chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.hourOfHalfday();
        mutableDateTime34.setChronology(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0001-03-25T11:08:01.787+38:53" + "'", str35, "0001-03-25T11:08:01.787+38:53");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[UTC]" + "'", str48, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        java.lang.String str15 = dateTimeField9.getAsShortText(126, locale11);
        int int16 = property2.getMaximumShortTextLength(locale11);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = property22.getAsText(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale17.getDisplayScript(locale24);
        java.lang.String str29 = locale11.getDisplayScript(locale17);
        java.util.Set<java.lang.String> strSet30 = locale17.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.stream();
        java.lang.String[] strArray39 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        java.util.Iterator<java.lang.String> strItor42 = strSet40.iterator();
        strSet40.clear();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet40.spliterator();
        java.util.stream.Stream<java.lang.String> strStream45 = strSet40.stream();
        java.util.Iterator<java.lang.String> strItor46 = strSet40.iterator();
        boolean boolean47 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = strSet30.add("126");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Taiwan" + "'", str14, "Taiwan");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "126" + "'", str15, "126");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tedesco" + "'", str27, "tedesco");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.dayOfWeek();
        int int8 = dateMidnight4.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight4.toDateTime(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight4.plusYears(83);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withDayOfWeek(3);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.plusDays(12);
        org.joda.time.Instant instant17 = dateMidnight12.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("0266-02-23");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0266-02-23\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set(9);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.getMutableDateTime();
        boolean boolean14 = dateMidnight6.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight6.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property24.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 1961, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType19.getField(chronology29);
        boolean boolean32 = dateTimeFieldType18.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField35 = dateTimeField34.getLeapDurationField();
        mutableDateTime17.setRounding(dateTimeField34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime17.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDayOfYear(79436);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79436 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval7 = property4.toInterval();
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 1961, chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        int int14 = localTime12.indexOf(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withMillis((long) 31);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight17.minus((long) (short) 100);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 10);
        int int26 = mutablePeriod25.getSeconds();
        mutablePeriod25.addHours((int) (short) 0);
        mutablePeriod25.clear();
        org.joda.time.Period period30 = new org.joda.time.Period();
        org.joda.time.Period period32 = period30.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean34 = period32.isSupported(durationFieldType33);
        java.lang.String str35 = durationFieldType33.toString();
        int int36 = mutablePeriod25.get(durationFieldType33);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight23.withFieldAdded(durationFieldType33, 53);
        boolean boolean39 = localTime12.isSupported(durationFieldType33);
        int int40 = localTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "weekyears" + "'", str35, "weekyears");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53580961 + "'", int40 == 53580961);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod28.setYears(53);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology42 = mutableDateTime1.getChronology();
        mutableDateTime1.addHours(668);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        calendar0.set(100, 287, 9, 0, 12, 1961);
        java.util.Date date18 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date18.setMonth((int) (short) 1);
        java.util.Date date26 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date26.setMonth((int) (short) 1);
        java.util.Date date34 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date34.setMonth((int) (short) 1);
        boolean boolean37 = date26.before(date34);
        int int38 = date26.getHours();
        boolean boolean39 = date18.before(date26);
        calendar0.setTime(date18);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = calendar0.get(150);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 150");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1731754200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) 53);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone20.isLocalDateTimeGap(localDateTime22);
        java.util.TimeZone timeZone24 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 22, dateTimeZone20);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(0L, dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.DateTime dateTime28 = dateTime12.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = property29.setCopy("gio");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"gio\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.addMinutes(13);
        mutableDateTime1.setDayOfYear(5);
        mutableDateTime1.addDays(139980000);
        org.joda.time.Period period42 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = period42.withPeriodType(periodType43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime47.addMinutes(266);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        org.joda.time.Duration duration63 = period57.toDurationTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Instant instant64 = instant50.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76);
        org.joda.time.Duration duration78 = period72.toDurationTo((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Instant instant79 = instant65.minus((org.joda.time.ReadableDuration) duration78);
        boolean boolean80 = duration63.isLongerThan((org.joda.time.ReadableDuration) duration78);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration82 = period42.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration82);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfDay((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeeksInWeekYear();
        java.util.Date date9 = calendar0.getTime();
        calendar0.roll(79321, 0);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder21 = builder13.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder25 = builder21.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder27 = builder21.setLocale(locale26);
        java.util.Calendar calendar28 = builder27.build();
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        java.util.TimeZone timeZone30 = calendar28.getTimeZone();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields(calendar28);
        int int32 = calendar0.compareTo(calendar28);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868373009,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=46,MILLISECOND=991,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Jun 08 07:13:46 GMT 23");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-61850995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=10,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.DateTime dateTime10 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology11 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay20.toDateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight28 = yearMonthDay20.toDateMidnight();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay20.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay20.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay20.minusMonths(1970);
        long long37 = chronology11.set((org.joda.time.ReadablePartial) yearMonthDay35, (long) 79321);
        org.joda.time.Period period38 = new org.joda.time.Period((long) 286, chronology11);
        org.joda.time.Period period40 = period38.minusDays(79452840);
        org.joda.time.Period period42 = period40.withYears(79716);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-3535142320679L) + "'", long37 == (-3535142320679L));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder5.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder13 = builder9.setDate(28, 10, 0);
        java.util.Locale locale14 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder15 = builder13.setLocale(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22);
        java.util.Calendar.Builder builder25 = builder13.setTimeZone(timeZone22);
        java.util.Calendar.Builder builder26 = builder4.setTimeZone(timeZone22);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514027027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=47,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minusMonths(0);
        int int17 = dateMidnight13.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay7.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay7.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay7.minusMonths(1970);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime24.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        long long34 = dateTimeZone32.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays(17);
        org.joda.time.DateTime dateTime41 = dateMidnight40.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.withMinuteOfHour(38);
        int int44 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime24.setZone(dateTimeZone32);
        boolean boolean46 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime47 = yearMonthDay22.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        int int50 = localDate49.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plus((long) 1961);
        org.joda.time.DateTime dateTime56 = dateTime52.withYear(11);
        org.joda.time.DateTime dateTime58 = dateTime52.minusMinutes((int) '4');
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTimeAtCurrentTime(dateTimeZone61);
        int int63 = dateTime62.getCenturyOfEra();
        org.joda.time.DateTime.Property property64 = dateTime62.secondOfMinute();
        boolean boolean65 = dateTime58.isEqual((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime66 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight72.getZone();
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(dateTimeZone73);
        long long76 = dateTimeZone73.nextTransition((long) 1);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 13, dateTimeZone73);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(1L, dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight80.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone83 = dateMidnight82.getZone();
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(dateTimeZone83);
        org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay(dateTimeZone83);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(1L, dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone91 = dateMidnight90.getZone();
        org.joda.time.DateMidnight dateMidnight92 = yearMonthDay85.toDateMidnight(dateTimeZone91);
        java.lang.String str94 = dateTimeZone91.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime95 = org.joda.time.MutableDateTime.now(dateTimeZone91);
        org.joda.time.DateTime dateTime96 = dateTime77.withZone(dateTimeZone91);
        org.joda.time.DateTime dateTime97 = dateTime66.toDateTime(dateTimeZone91);
        org.joda.time.Interval interval98 = yearMonthDay22.toInterval(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 139980000 + "'", int44 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 54 + "'", int50 == 54);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+38:53" + "'", str94, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime10 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths(3277017);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getWeekyear();
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.joda.time.Period period19 = new org.joda.time.Period(1010016000000L, (long) 35, chronology17);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) 1);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 13, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight45 = yearMonthDay38.toDateMidnight(dateTimeZone44);
        java.lang.String str47 = dateTimeZone44.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = dateTime30.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) 1010016000000L, dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(186, 185, 868, 79315, 1970, dateTimeZone44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79315 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+38:53" + "'", str47, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone24);
        long long27 = dateTimeZone24.nextTransition((long) 1);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 13, dateTimeZone24);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 10);
        int int32 = mutablePeriod31.getWeeks();
        mutablePeriod31.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval54 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        mutablePeriod31.add((org.joda.time.ReadableDuration) duration52);
        mutablePeriod31.addSeconds(70);
        org.joda.time.DateTime dateTime59 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.DateTime dateTime62 = dateTime59.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate11.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(1L, dateTimeZone76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight77, readableDuration78);
        org.joda.time.Duration duration80 = period74.toDurationTo((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Instant instant81 = instant67.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Interval interval82 = interval66.withDurationAfterStart((org.joda.time.ReadableDuration) duration80);
        org.joda.time.DateTime dateTime83 = dateTime63.minus((org.joda.time.ReadableDuration) duration80);
        int int84 = dateTime63.getEra();
        org.joda.time.Instant instant85 = dateTime63.toInstant();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(instant85);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        long long14 = dateTimeField11.add((long) 999, (long) 1961);
        long long16 = dateTimeField11.roundHalfFloor((long) 693);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 169430400999L + "'", long14 == 169430400999L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        calendar0.set(100, 287, 9, 0, 12, 1961);
        java.util.Date date18 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date18.setMonth((int) (short) 1);
        java.util.Date date26 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date26.setMonth((int) (short) 1);
        java.util.Date date34 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date34.setMonth((int) (short) 1);
        boolean boolean37 = date26.before(date34);
        int int38 = date26.getHours();
        boolean boolean39 = date18.before(date26);
        calendar0.setTime(date18);
        date18.setMonth(79315);
        java.util.Date date49 = new java.util.Date(32770, 2022, 32770, 13, 20, 20);
        boolean boolean50 = date18.before(date49);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1731754200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Aug 15 13:10:00 GMT 8524");
        org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Mar 20 13:20:20 GMT 34928");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        int int17 = period15.get(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod18 = period15.toMutablePeriod();
        int int19 = period15.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.Period period27 = period15.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period15.withMonths(34);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.secondOfDay();
        mutableDateTime1.addSeconds(932);
        int int34 = mutableDateTime1.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 72 + "'", int34 == 72);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusMonths(79315175);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period30);
        int int32 = yearMonthDay20.getMonthOfYear();
        java.lang.Object obj33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(obj33);
        mutablePeriod34.setWeeks(266);
        mutablePeriod34.setWeeks(86399999);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime40.set(dateTimeFieldType43, 1);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, readableDuration60);
        org.joda.time.Duration duration62 = period56.toDurationTo((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Instant instant63 = instant49.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Interval interval64 = interval48.withDurationAfterStart((org.joda.time.ReadableDuration) duration62);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime40.dayOfMonth();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime40.year();
        mutableDateTime40.setMillis((-259200000L));
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime40.millisOfDay();
        org.joda.time.Period period71 = new org.joda.time.Period();
        org.joda.time.Period period73 = period71.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean75 = period73.isSupported(durationFieldType74);
        mutableDateTime40.add(durationFieldType74, (int) (short) 100);
        boolean boolean78 = mutablePeriod34.isSupported(durationFieldType74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay20.withFieldAdded(durationFieldType74, 939);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868372583,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=47,MILLISECOND=417,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.plusSeconds(6609303);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localTime7.getFields();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.Period period3 = period0.withPeriodType(periodType1);
        org.joda.time.Period period5 = period0.minusYears((int) 'a');
        int int6 = period5.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds7 = period5.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 489);
        org.joda.time.DateTime dateTime2 = dateTime1.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.Period period2 = period0.plusMillis((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone20);
        long long23 = dateTimeZone20.nextTransition((long) 1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 13, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        int int30 = period29.size();
        java.lang.String str31 = period29.toString();
        org.joda.time.Period period33 = period29.plusMonths(11);
        boolean boolean34 = dateTime24.equals((java.lang.Object) period33);
        int[] intArray37 = chronology13.get((org.joda.time.ReadablePeriod) period33, (long) 7, (long) ' ');
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.centuries();
        int int44 = period42.get(durationFieldType43);
        int int45 = period33.indexOf(durationFieldType43);
        int int46 = period0.get(durationFieldType43);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime48.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight53.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = dateMidnight55.getZone();
        long long58 = dateTimeZone56.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.minusDays(17);
        org.joda.time.DateTime dateTime65 = dateMidnight64.toDateTimeISO();
        org.joda.time.DateTime dateTime67 = dateTime65.withMinuteOfHour(38);
        int int68 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) dateTime65);
        mutableDateTime48.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime48.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime48.property(dateTimeFieldType71);
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getDurationType();
        org.joda.time.Period period75 = period0.withField(durationFieldType73, (int) (short) 0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0S" + "'", str31, "PT0S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 139980000 + "'", int68 == 139980000);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(647);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate5.toDateTime(readableInstant11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField17.set((-9L), "15 Feb 1915 13:11:10 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"15 Feb 1915 13:11:10 GMT\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1326 + "'", int13 == 1326);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int8 = calendar0.getActualMinimum((int) (byte) 0);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property14.setCopy(0);
        org.joda.time.LocalTime localTime17 = property14.withMinimumValue();
        boolean boolean18 = calendar0.before((java.lang.Object) localTime17);
        long long19 = calendar0.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868372377,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=47,MILLISECOND=623,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61427868372377L) + "'", long19 == (-61427868372377L));
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.year();
        mutableDateTime1.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36, periodType40);
        int int42 = dateMidnight36.getMillisOfSecond();
        boolean boolean43 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight36);
        mutableDateTime1.setMillis(0L);
        java.lang.String str46 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-02T14:53:00.000+38:53" + "'", str46, "1970-01-02T14:53:00.000+38:53");
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        long long11 = dateTimeZone9.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(17);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(38);
        int int21 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime1.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(32);
        java.lang.Object obj26 = mutableDateTime25.clone();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 139980000 + "'", int21 == 139980000);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "2002-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "2002-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "2002-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.withYear(266);
        org.joda.time.Interval interval18 = yearMonthDay7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate localDate29 = localDate23.withDayOfMonth(13);
        org.joda.time.DateTime dateTime30 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology31 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight37.getZone();
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(dateTimeZone38);
        long long41 = dateTimeZone38.nextTransition((long) 1);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 13, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, readableDuration46);
        int int48 = period47.size();
        java.lang.String str49 = period47.toString();
        org.joda.time.Period period51 = period47.plusMonths(11);
        boolean boolean52 = dateTime42.equals((java.lang.Object) period51);
        int[] intArray55 = chronology31.get((org.joda.time.ReadablePeriod) period51, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay(chronology31);
        org.joda.time.DateTimeField dateTimeField57 = chronology31.clockhourOfHalfday();
        org.joda.time.DurationField durationField58 = chronology31.days();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) 266, 2022L, chronology31);
        org.joda.time.Interval interval60 = interval18.withChronology(chronology31);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate64, (org.joda.time.ReadablePartial) localDate67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = localDate67.isSupported(dateTimeFieldType69);
        int int71 = localDate67.getWeekyear();
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.weekOfWeekyear();
        org.joda.time.DurationField durationField74 = chronology72.halfdays();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology72);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (short) 1, chronology72);
        org.joda.time.Interval interval77 = interval60.withStart((org.joda.time.ReadableInstant) mutableDateTime76);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0S" + "'", str49, "PT0S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(54);
        org.joda.time.LocalTime localTime13 = localTime9.withMillisOfDay(722);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localTime13.isSupported(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        boolean boolean31 = calendar29.isWeekDateSupported();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514027893,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=47,MILLISECOND=893,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        java.lang.String str62 = interval57.toString();
        boolean boolean63 = interval54.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        org.joda.time.Duration duration77 = period71.toDurationTo((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Instant instant78 = instant64.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 'a', dateTimeZone81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((long) 'a', dateTimeZone84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate82, (org.joda.time.ReadablePartial) localDate85);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(1L, dateTimeZone88);
        org.joda.time.ReadableDuration readableDuration90 = null;
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight89, readableDuration90);
        org.joda.time.Duration duration92 = period86.toDurationTo((org.joda.time.ReadableInstant) dateMidnight89);
        org.joda.time.Instant instant93 = instant79.minus((org.joda.time.ReadableDuration) duration92);
        boolean boolean94 = duration77.isLongerThan((org.joda.time.ReadableDuration) duration92);
        org.joda.time.Interval interval95 = interval57.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration92);
        org.joda.time.PeriodType periodType96 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) interval57, periodType96);
        java.lang.String str98 = period97.toString();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str62, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(periodType96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "P0D" + "'", str98, "P0D");
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set((int) '4', 0, 0, 0, 38);
        int int7 = calendar0.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate((int) ' ', 39065265, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=38,SECOND=47,MILLISECOND=957,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        int int6 = periodType3.indexOf(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weekyears();
        int int8 = periodType3.indexOf(durationFieldType7);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 293, (long) 162, periodType3);
        org.joda.time.PeriodType periodType11 = periodType3.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.DateTime dateTime24 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = localDate17.getChronology();
        mutablePeriod13.add((long) '4', chronology25);
        org.joda.time.DurationField durationField27 = chronology25.days();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1009411199972L), periodType3, chronology25);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '0' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set((int) '4', 0, 0, 0, 38);
        calendar0.setTimeInMillis(28857600266L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfMonth(685);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 685 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=28857600266,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=49,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=266,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.MutableInterval mutableInterval7 = interval2.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundHalfFloorCopy();
        org.joda.time.Interval interval14 = property11.toInterval();
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.Chronology chronology16 = interval14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        org.joda.time.DateMidnight dateMidnight22 = property20.roundHalfFloorCopy();
        org.joda.time.Interval interval23 = property20.toInterval();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight33 = dateTime30.toDateMidnight();
        org.joda.time.LocalDate localDate34 = dateTime30.toLocalDate();
        org.joda.time.Period period39 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate40 = localDate34.minus((org.joda.time.ReadablePeriod) period39);
        boolean boolean41 = interval23.equals((java.lang.Object) period39);
        boolean boolean42 = interval14.isBefore((org.joda.time.ReadableInterval) interval23);
        boolean boolean43 = interval2.isAfter((org.joda.time.ReadableInterval) interval23);
        boolean boolean44 = interval2.containsNow();
        org.joda.time.Period period45 = interval2.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withFields(readablePartial16);
        int int18 = dateTime15.getYearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = localDate1.indexOf(dateTimeFieldType4);
        org.joda.time.DateMidnight dateMidnight6 = localDate1.toDateMidnight();
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType10, chronology12);
        org.joda.time.Period period15 = period13.minusHours(1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plus(2833920000000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withDayOfMonth(47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.LocalDate.Property property21 = localDate18.year();
        int int22 = localDate18.getYear();
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime25 = dateTime23.minus((-1731754200000L));
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime27 = instant26.toMutableDateTime();
        mutableDateTime27.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime27.set(dateTimeFieldType30, 1);
        int int33 = mutableDateTime27.getYearOfEra();
        org.joda.time.Period period35 = org.joda.time.Period.years(231);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period35, 52);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        int int43 = period42.size();
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period46 = period42.plusYears((-39686206));
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plus((long) 1961);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(11);
        org.joda.time.DateTime dateTime57 = dateTime55.plusHours(0);
        org.joda.time.Duration duration58 = period46.toDurationFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime25.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period61 = period46.plusMonths(647);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.minusDays(17);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusMonths(53);
        org.joda.time.DateMidnight.Property property70 = dateMidnight69.year();
        org.joda.time.DateMidnight dateMidnight71 = property70.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.plusYears(3);
        org.joda.time.DateMidnight.Property property74 = dateMidnight73.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period61, (org.joda.time.ReadableInstant) dateMidnight73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 54 + "'", int49 == 54);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        boolean boolean11 = localDate1.isEqual((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTime dateTime12 = localDate1.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekOfWeekyear(19);
        org.joda.time.DateMidnight dateMidnight14 = localDate10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusDays(79321);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((long) 79459491);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        boolean boolean16 = date5.before(date13);
        java.util.Date date22 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date22.setMonth((int) (short) 1);
        int int25 = date22.getTimezoneOffset();
        int int26 = date22.getHours();
        boolean boolean27 = date5.before(date22);
        long long28 = date22.getTime();
        int int29 = date22.getTimezoneOffset();
        int int30 = date22.getDay();
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 13 + "'", int26 == 13);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1731754200000L) + "'", long28 == (-1731754200000L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        int int8 = date5.getTimezoneOffset();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate2.withMonthOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.joda.time.Period period13 = new org.joda.time.Period();
        org.joda.time.Period period15 = period13.minusMonths(53);
        org.joda.time.Period period17 = period13.plusSeconds(9);
        int int18 = period17.getYears();
        org.joda.time.Period period19 = new org.joda.time.Period();
        org.joda.time.Period period21 = period19.minusMonths(53);
        org.joda.time.Period period23 = period19.plusSeconds(9);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period25 = period23.normalizedStandard(periodType24);
        org.joda.time.Period period26 = period17.withPeriodType(periodType24);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.LocalDate localDate28 = localDate11.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.LocalDate.Property property29 = localDate11.monthOfYear();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10);
        int int18 = mutablePeriod17.getWeeks();
        mutablePeriod17.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval40 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.addSeconds(70);
        org.joda.time.DateTime dateTime45 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (byte) 10);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTime dateTime48 = property46.addToCopy(0L);
        org.joda.time.DateTime dateTime49 = property46.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField50 = property46.getDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        mutableDateTime1.setTime((long) 46);
        mutableDateTime1.setMillis(1035522775L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(36000000, 741, 402, 1962, 1952, (int) (byte) 100, 79433644);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1962 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(chronology15);
        int int17 = dateTime4.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime4.minusYears(10);
        org.joda.time.DateTime.Property property20 = dateTime4.centuryOfEra();
        int int21 = dateTime4.getMinuteOfHour();
        int int22 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime4.plusMinutes(969);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays(17);
        org.joda.time.DateTime dateTime31 = dateMidnight30.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour(38);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.minutes();
        org.joda.time.DurationField durationField45 = chronology43.weekyears();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(chronology43);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1036800010L);
        long long52 = chronology43.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 999, 32770);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime31.toMutableDateTime(chronology43);
        boolean boolean54 = dateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 54 + "'", int22 == 54);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 33975936328699L + "'", long52 == 33975936328699L);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.withField(dateTimeFieldType10, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) 52, chronology15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusYears((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.minusMonths(10);
        org.joda.time.Period period22 = org.joda.time.Period.millis(2022);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight16.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        int int27 = localDate26.getDayOfYear();
        org.joda.time.Chronology chronology28 = localDate26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology28);
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.minusDays(17);
        org.joda.time.DateMidnight.Property property38 = dateMidnight34.dayOfMonth();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.Interval interval40 = interval31.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration41 = interval31.toDuration();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54 + "'", int27 == 54);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getDisplayScript();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale0);
        java.util.Date date8 = calendar7.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.clear(72716537);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 72716537");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514028559,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=48,MILLISECOND=559,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:13:48 GMT 2022");
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = property6.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale11.getDisplayCountry(locale12);
        java.lang.String str15 = dateTimeField9.getAsShortText(126, locale11);
        int int16 = property2.getMaximumShortTextLength(locale11);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = property22.getAsText(locale24);
        java.lang.String str26 = locale24.getISO3Language();
        java.lang.String str27 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale17.getDisplayScript(locale24);
        java.lang.String str29 = locale11.getDisplayScript(locale17);
        java.util.Set<java.lang.String> strSet30 = locale17.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.stream();
        java.util.Iterator<java.lang.String> strItor32 = strSet30.iterator();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Taiwan" + "'", str14, "Taiwan");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "126" + "'", str15, "126");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tedesco" + "'", str27, "tedesco");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strItor32);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        java.util.Date date6 = new java.util.Date(32770, 2022, 32770, 13, 20, 20);
        int int7 = date6.getSeconds();
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        java.util.Date date21 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date21.setMonth((int) (short) 1);
        boolean boolean24 = date13.before(date21);
        boolean boolean25 = date6.after(date13);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromDateFields(date13);
        date13.setSeconds(969);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 20 13:20:20 GMT 34928");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:26:09 GMT 1915");
        org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(17);
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight30 = dateTime27.toDateMidnight();
        org.joda.time.LocalDate localDate31 = dateTime27.toLocalDate();
        int int32 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateMidnight dateMidnight33 = localDate31.toDateMidnight();
        org.joda.time.LocalDate localDate35 = localDate31.minusDays(28);
        org.joda.time.LocalDate.Property property36 = localDate31.yearOfEra();
        org.joda.time.LocalDate localDate37 = property36.getLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withFieldAdded(durationFieldType14, 2008);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minusHours(53581961);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "years" + "'", str15, "years");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfSecond(431);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfMonth();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = property17.getAsText(locale19);
        java.lang.String str21 = locale19.getISO3Language();
        java.lang.String str22 = locale19.getDisplayLanguage();
        java.lang.String str23 = localDateTime10.toString("\uc6d4", locale19);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime10.plusDays(2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tedesco" + "'", str22, "tedesco");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc6d4" + "'", str23, "\uc6d4");
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        java.lang.String str15 = localDateTime12.toString();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-01-01T00:00:00.000" + "'", str15, "2022-01-01T00:00:00.000");
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.Duration duration36 = period30.toDurationTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration36);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = dateTimeZone5.getName((long) 923, locale8);
        java.lang.String str10 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+38:53" + "'", str9, "+38:53");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getWeekyear();
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 267, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Instant instant35 = instant21.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Interval interval36 = interval20.withDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Instant instant51 = instant37.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight62, readableDuration63);
        org.joda.time.Duration duration65 = period59.toDurationTo((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Instant instant66 = instant52.minus((org.joda.time.ReadableDuration) duration65);
        boolean boolean67 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval68 = interval20.withDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean75 = interval71.contains((org.joda.time.ReadableInterval) interval74);
        boolean boolean76 = interval20.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Chronology chronology77 = interval20.getChronology();
        org.joda.time.Period period79 = org.joda.time.Period.days(52);
        int int80 = period79.getHours();
        int[] intArray83 = chronology77.get((org.joda.time.ReadablePeriod) period79, (long) (byte) 1, 70L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField15.addWrapField(readablePartial16, 21, intArray83, 336);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 0, 0, 69]");
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay27.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay27.plusMonths((-292275054));
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay37.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay37.withMonthOfYear(79358169);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79358169 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868370814,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=49,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate5.toDateTime(readableInstant11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.DateTime.Property property14 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime16 = dateTime12.minusMillis(1322);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime18.set(dateTimeFieldType21, 1);
        int int24 = mutableDateTime18.getYearOfEra();
        org.joda.time.Period period26 = org.joda.time.Period.years(231);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period26, 52);
        org.joda.time.DateTime dateTime30 = dateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 143);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        int int32 = gregorianCalendar31.getWeeksInWeekYear();
        gregorianCalendar31.set(47400000, 698, 1325, 552, 4, 563);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1326 + "'", int13 == 1326);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFieldAdded(durationFieldType11, 4);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = property14.setCopy(61);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        int int19 = localDateTime17.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1020000 + "'", int19 == 1020000);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(840);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay11.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay11.toDateMidnight();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getID();
        long long33 = dateTimeZone27.adjustOffset((long) 32769, true);
        org.joda.time.DateTime dateTime34 = yearMonthDay21.toDateTimeAtMidnight(dateTimeZone27);
        boolean boolean35 = localDate3.equals((java.lang.Object) yearMonthDay21);
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter38.withZoneUTC();
        boolean boolean40 = dateTimeFormatter38.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter38.withDefaultYear(79334);
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter38.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter38.withPivotYear(969);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = localDate3.toString(dateTimeFormatter38);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:13:49 GMT 2022");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+38:53" + "'", str30, "+38:53");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32769L + "'", long33 == 32769L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(dateTimeParser43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ko_KR\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        java.lang.String str5 = localTime4.toString();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1036800010L);
        boolean boolean8 = localTime4.equals((java.lang.Object) 1036800010L);
        org.joda.time.DateTime dateTime9 = localTime4.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10:06:59.335" + "'", str5, "10:06:59.335");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate2.withMonthOfYear(11);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval21.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 10);
        int int41 = mutablePeriod40.getWeeks();
        mutablePeriod40.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod40.setYears(53);
        mutableDateTime13.add((org.joda.time.ReadablePeriod) mutablePeriod40);
        boolean boolean54 = localDate2.equals((java.lang.Object) mutableDateTime13);
        java.util.GregorianCalendar gregorianCalendar55 = mutableDateTime13.toGregorianCalendar();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar55);
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar55);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance();
        int int59 = calendar58.getMinimalDaysInFirstWeek();
        calendar58.set((int) (short) 1, 266, (int) (byte) 100);
        int int64 = calendar58.getMinimalDaysInFirstWeek();
        int int65 = calendar58.getMinimalDaysInFirstWeek();
        calendar58.set(5, 12);
        org.joda.time.YearMonthDay yearMonthDay69 = org.joda.time.YearMonthDay.fromCalendarFields(calendar58);
        java.time.Instant instant70 = calendar58.toInstant();
        calendar58.setTimeInMillis((long) 698);
        int int73 = gregorianCalendar55.compareTo(calendar58);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=698,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime1.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay(1961);
        boolean boolean11 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Instant instant12 = dateTime10.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime20 = dateMidnight5.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime22.addMinutes(266);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        int int28 = periodType25.indexOf(durationFieldType27);
        mutableDateTime22.add(durationFieldType27, 2);
        java.lang.String str31 = mutableDateTime22.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = mutableDateTime22.getZone();
        long long34 = dateTimeZone16.getMillisKeepLocal(dateTimeZone32, 2678340000L);
        long long38 = dateTimeZone32.convertLocalToUTC(31535199679L, true, 1056L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+38:53" + "'", str19, "+38:53");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2170-01-02T19:19:00.017+38:53" + "'", str31, "2170-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2678340000L + "'", long34 == 2678340000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 31395219679L + "'", long38 == 31395219679L);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) ' ');
        org.joda.time.Instant instant3 = instant1.withMillis((long) (byte) -1);
        org.joda.time.Instant instant5 = instant3.minus((long) (byte) 1);
        org.joda.time.Instant instant7 = instant5.withMillis(7200019L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(54);
        org.joda.time.LocalTime localTime13 = localTime9.plusMillis(9);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(57);
        int int16 = localTime13.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime13.withSecondOfMinute(327);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 327 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) 1961);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(11);
        org.joda.time.DateTime dateTime10 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(999);
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(31);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime16.setDate((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundHalfFloorCopy();
        org.joda.time.Interval interval25 = property22.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Interval interval28 = interval26.withPeriodAfterStart(readablePeriod27);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration29);
        int int31 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.setMillis((long) 8);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.weekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property5.getLocalTime();
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateTime dateTime8 = dateMidnight4.toDateTime();
        org.joda.time.DateMidnight.Property property9 = dateMidnight4.dayOfYear();
        int int10 = dateMidnight4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 13, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay30.toDateMidnight(dateTimeZone36);
        java.lang.String str39 = dateTimeZone36.getName(1L);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime41 = dateTime22.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 79592934, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight4.withZoneRetainFields(dateTimeZone36);
        int int44 = dateMidnight4.getYearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+38:53" + "'", str39, "+38:53");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1961 + "'", int44 == 1961);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime13.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        long long23 = dateTimeZone21.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withMinuteOfHour(38);
        int int33 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime30);
        mutableDateTime13.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime35 = localDate11.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.clockhourOfHalfday();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        int int40 = calendar39.getMinimalDaysInFirstWeek();
        calendar39.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay45 = org.joda.time.YearMonthDay.fromCalendarFields(calendar39);
        org.joda.time.Period period50 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period51 = new org.joda.time.Period();
        org.joda.time.Period period53 = period51.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean55 = period53.isSupported(durationFieldType54);
        org.joda.time.Period period57 = period50.withFieldAdded(durationFieldType54, 0);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay45.withPeriodAdded((org.joda.time.ReadablePeriod) period50, 12);
        org.joda.time.DateTime dateTime60 = yearMonthDay59.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay59.minusMonths(79315175);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate65, (org.joda.time.ReadablePartial) localDate68);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay59.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.withYear(79315);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(1L, dateTimeZone75);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.dayOfMonth();
        org.joda.time.DurationField durationField78 = property77.getDurationField();
        org.joda.time.DateMidnight dateMidnight79 = property77.roundHalfFloorCopy();
        org.joda.time.Interval interval80 = property77.toInterval();
        org.joda.time.Interval interval81 = interval80.toInterval();
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType83 = periodType82.withSecondsRemoved();
        org.joda.time.Period period84 = interval81.toPeriod(periodType83);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(periodType83);
        int[] intArray86 = mutablePeriod85.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField38.set((org.joda.time.ReadablePartial) yearMonthDay70, 79378, intArray86, 286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 286 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 139980000 + "'", int33 == 139980000);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-61427868370403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=49,MILLISECOND=597,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        gregorianCalendar13.setMinimalDaysInFirstWeek(0);
        gregorianCalendar13.setMinimalDaysInFirstWeek(6);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar13.setWeekDate(45, 399, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 24");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.Period period4 = interval2.toPeriod();
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) 1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 13, dateTimeZone12);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 38);
        org.joda.time.DateTime dateTime19 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime21 = dateTime16.minusDays(657);
        org.joda.time.DateTime dateTime22 = dateTime16.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval23 = interval2.withStart((org.joda.time.ReadableInstant) dateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str3, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis(454);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusSeconds(504);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.centuryOfEra();
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight15 = property14.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight16 = property14.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths(1322);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType23, 1);
        mutableDateTime20.addHours((-1));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, readableDuration38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Period period41 = duration40.toPeriod();
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration40, 13);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfMonth();
        org.joda.time.DurationField durationField48 = property47.getDurationField();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = property47.getAsText(locale49);
        org.joda.time.DateMidnight dateMidnight51 = property47.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight52 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusMonths((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = dateMidnight55.isEqual(readableInstant58);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 10);
        int int62 = mutablePeriod61.getSeconds();
        mutablePeriod61.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType65 = mutablePeriod61.getPeriodType();
        org.joda.time.PeriodType periodType66 = periodType65.withMinutesRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableInstant58, periodType66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableDuration) duration40, periodType66);
        int int69 = dateMidnight16.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2" + "'", str50, "2");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtCurrentTime(dateTimeZone39);
        int int41 = instant36.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = localDate47.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime40.toDateTime(chronology51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40, periodType53);
        org.joda.time.DateTime dateTime56 = dateTime40.plusYears(1969);
        int int57 = dateTime40.getYearOfCentury();
        int int58 = dateTime40.getMillisOfDay();
        int int59 = dateTime40.getSecondOfMinute();
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 79609705 + "'", int58 == 79609705);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 49 + "'", int59 == 49);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        long long14 = dateTimeField12.roundFloor((long) 231);
        int int16 = dateTimeField12.getMaximumValue(29347866420000L);
        int int17 = dateTimeField12.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        org.joda.time.Period period19 = period17.minusMillis(13);
        org.joda.time.Period period20 = period19.toPeriod();
        int[] intArray22 = chronology10.get((org.joda.time.ReadablePeriod) period19, 9056880000000L);
        int int23 = period19.getSeconds();
        org.joda.time.Period period25 = period19.plusSeconds(279);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 14975, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 99);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone9.isLocalDateTimeGap(localDateTime11);
        java.util.TimeZone timeZone13 = dateTimeZone9.toTimeZone();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 2, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.now(dateTimeZone9);
        java.util.TimeZone timeZone16 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 292278993, dateTimeZone9);
        org.joda.time.DateTime dateTime18 = localTime1.toDateTimeToday(dateTimeZone9);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMillis(504);
        int int16 = localDateTime12.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set(9);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.minuteOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.DateTime dateTime24 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = localDate17.getChronology();
        mutablePeriod13.add((long) '4', chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((-1L), 1L, periodType11, chronology25);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.centuries();
        int int31 = periodType28.indexOf(durationFieldType30);
        boolean boolean32 = periodType11.isSupported(durationFieldType30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) 32770, periodType11);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period39 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period40 = new org.joda.time.Period();
        org.joda.time.Period period42 = period40.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean44 = period42.isSupported(durationFieldType43);
        org.joda.time.Period period46 = period39.withFieldAdded(durationFieldType43, 0);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period49 = period46.plusYears(0);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DurationField durationField58 = property57.getDurationField();
        org.joda.time.DateMidnight dateMidnight59 = property57.roundHalfFloorCopy();
        org.joda.time.Interval interval60 = property57.toInterval();
        org.joda.time.Interval interval61 = interval60.toInterval();
        org.joda.time.Chronology chronology62 = interval60.getChronology();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) 1961, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType52.getField(chronology62);
        boolean boolean65 = dateTimeFieldType51.isSupported(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyear();
        org.joda.time.DurationField durationField67 = dateTimeField66.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setRounding(dateTimeField66, 79517011);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 79517011");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT35M52.008S" + "'", str47, "PT35M52.008S");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNull(durationField67);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        org.joda.time.Chronology chronology13 = localDate9.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(15, 70, 399, (int) (short) 100, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        int int17 = period15.get(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod18 = period15.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 79315);
        org.joda.time.Period period22 = period15.plusYears(0);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYear(17);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withYearOfEra(53);
        int int36 = localDateTime33.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (byte) 10);
        int int44 = dateMidnight41.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 10);
        int int47 = mutablePeriod46.getSeconds();
        mutablePeriod46.setSeconds((int) '#');
        org.joda.time.Period period50 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.Period period53 = period50.withPeriodType(periodType51);
        mutablePeriod46.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight41.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withFieldAdded(durationFieldType56, 267);
        boolean boolean59 = localDateTime33.isSupported(durationFieldType56);
        boolean boolean60 = period15.isSupported(durationFieldType56);
        org.joda.time.Minutes minutes61 = period15.toStandardMinutes();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1961 + "'", int44 == 1961);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(minutes61);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 868);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType2, 2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
    }
}

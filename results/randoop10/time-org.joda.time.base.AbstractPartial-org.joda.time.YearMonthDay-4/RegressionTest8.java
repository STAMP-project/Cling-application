import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        int int3 = dateMidnight2.getDayOfMonth();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.yearOfCentury();
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.centuryOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10);
        int int18 = mutablePeriod17.getWeeks();
        mutablePeriod17.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval40 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.addSeconds(70);
        org.joda.time.DateTime dateTime45 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.DateTime dateTime48 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime50.addMinutes(266);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType54 = periodType53.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.centuries();
        int int56 = periodType53.indexOf(durationFieldType55);
        mutableDateTime50.add(durationFieldType55, 2);
        java.lang.String str59 = mutableDateTime50.toString();
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime50.getZone();
        org.joda.time.DateTime dateTime61 = dateTime45.withZoneRetainFields(dateTimeZone60);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2170-01-02T19:19:00.017+38:53" + "'", str59, "2170-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        boolean boolean29 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight21.dayOfMonth();
        int int31 = dateMidnight21.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight21.withDurationAdded((long) 35213769, 98);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.dayOfWeek();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54 + "'", int26 == 54);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.withField(dateTimeFieldType10, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        boolean boolean14 = dateTime12.isEqualNow();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 57);
        org.joda.time.LocalTime localTime17 = dateTime12.toLocalTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(7, 53);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusHours(1969);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMillis(126);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withMinuteOfHour(151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 151 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(5, 12);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getMinimalDaysInFirstWeek();
        calendar11.setTimeInMillis((long) (byte) 1);
        java.util.Date date15 = calendar11.getTime();
        date15.setHours((int) (byte) 10);
        int int18 = date15.getMinutes();
        date15.setTime(1036800010L);
        int int21 = date15.getHours();
        int int22 = date15.getSeconds();
        calendar0.setTime(date15);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        int int25 = calendar24.getMinimalDaysInFirstWeek();
        calendar24.set((int) (short) 1, 266, (int) (byte) 100);
        int int30 = calendar24.getMinimalDaysInFirstWeek();
        java.util.Date date36 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date36.setMonth((int) (short) 1);
        java.util.Date date44 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date44.setMonth((int) (short) 1);
        java.util.Date date52 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date52.setMonth((int) (short) 1);
        boolean boolean55 = date44.before(date52);
        int int56 = date44.getHours();
        boolean boolean57 = date36.before(date44);
        date36.setMinutes(231);
        calendar24.setTime(date36);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.fromDateFields(date36);
        boolean boolean62 = date15.before(date36);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.fromDateFields(date15);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1036800010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=13,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jan 13 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-1731740940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=51,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 15 16:51:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 13 + "'", int56 == 13);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate63);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.joda.time.Period period3 = org.joda.time.Period.months(36023888);
        org.joda.time.PeriodType periodType4 = period3.getPeriodType();
        org.joda.time.Period period5 = new org.joda.time.Period((-2208988799880L), (long) 21, periodType4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.Duration duration19 = period13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Instant instant20 = instant6.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        int int24 = localDate23.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plus((long) 1961);
        org.joda.time.DateTime dateTime30 = dateTime26.withYear(11);
        org.joda.time.DateTime dateTime32 = dateTime26.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime26.withYear(999);
        org.joda.time.DateTime dateTime36 = dateTime26.withWeekyear(31);
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime21.copy();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        long long47 = dateTimeZone45.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.minusDays(17);
        org.joda.time.DateTime dateTime54 = dateMidnight53.toDateTimeISO();
        org.joda.time.DateTime dateTime56 = dateTime54.withMinuteOfHour(38);
        int int57 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime54.getZone();
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(168934000L, dateTimeZone58);
        mutableDateTime21.setZone(dateTimeZone58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) period5, dateTimeZone58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 54 + "'", int24 == 54);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 139980000 + "'", int57 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(25);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withMillisOfSecond(61);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMillis(79433644);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay12.minusMillis(1640995120);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(53);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = localDateTime14.isBefore(readablePartial16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime1.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.DateTime dateTime17 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = localDate10.getChronology();
        mutablePeriod6.add((long) '4', chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime1, chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = localDate29.getChronology();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology33);
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property36 = localDate34.dayOfMonth();
        org.joda.time.LocalDate.Property property37 = localDate34.monthOfYear();
        org.joda.time.LocalDate localDate38 = property37.roundCeilingCopy();
        org.joda.time.LocalDate localDate40 = property37.addWrapFieldToCopy((int) '4');
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder45 = builder41.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder49 = builder41.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder53 = builder49.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder55 = builder49.setLocale(locale54);
        java.util.Calendar.Builder builder59 = builder49.setTimeOfDay(14, (-1), 17);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.dayOfMonth();
        org.joda.time.DurationField durationField64 = property63.getDurationField();
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.lang.String str66 = property63.getAsText(locale65);
        java.lang.String str67 = locale65.getISO3Language();
        java.util.Locale locale68 = locale65.stripExtensions();
        java.util.Calendar.Builder builder69 = builder59.setLocale(locale65);
        java.lang.String str70 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate40, locale65);
        int int71 = localDate40.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate73 = localDate40.withYearOfCentury(36694555);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36694555 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2" + "'", str66, "2");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "deu" + "'", str67, "deu");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22" + "'", str70, "22");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.joda.time.Period period1 = org.joda.time.Period.days(10);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.centuries();
        int int7 = period5.get(durationFieldType6);
        org.joda.time.MutablePeriod mutablePeriod8 = period5.toMutablePeriod();
        int int9 = period5.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Period period17 = period5.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period19 = period5.withDays((int) (byte) 100);
        org.joda.time.LocalDate localDate21 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period19, 3);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        long long7 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(17);
        org.joda.time.DateTime dateTime14 = dateMidnight13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(38);
        int int17 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime14.getZone();
        boolean boolean19 = dateTime14.isAfterNow();
        org.joda.time.DateTime dateTime21 = dateTime14.plusYears(513);
        org.joda.time.DateTime dateTime23 = dateTime14.minusHours(0);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 139980000 + "'", int17 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minus((org.joda.time.ReadablePeriod) period16);
        boolean boolean18 = dateTimeZone6.isLocalDateTimeGap(localDateTime11);
        java.lang.String str20 = dateTimeZone6.getNameKey((long) 'a');
        long long22 = dateTimeZone6.previousTransition((long) 79540050);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 79540050L + "'", long22 == 79540050L);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(5, 12);
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        java.time.Instant instant12 = calendar0.toInstant();
        calendar0.setTimeInMillis((long) 51);
        long long15 = calendar0.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.clear((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=51,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 51L + "'", long15 == 51L);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        int int5 = dateTimeField3.getMaximumValue((long) 2022);
        org.joda.time.DurationField durationField6 = dateTimeField3.getDurationField();
        int int7 = dateTimeField3.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField3.getType();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        long long17 = dateTimeZone14.nextTransition((long) 1);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        mutableDateTime20.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType23, 1);
        org.joda.time.LocalDate.Property property26 = localDate18.property(dateTimeFieldType23);
        long long27 = property26.remainder();
        org.joda.time.LocalDate localDate28 = property26.withMaximumValue();
        org.joda.time.LocalDate localDate30 = property26.setCopy(0);
        org.joda.time.LocalDate localDate32 = property26.setCopy(19);
        org.joda.time.LocalDate localDate34 = property26.setCopy(1323);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.plusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withMillisOfSecond(431);
        int[] intArray52 = localDateTime51.getValues();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.dayOfMonth();
        org.joda.time.DurationField durationField58 = property57.getDurationField();
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        java.lang.String str60 = property57.getAsText(locale59);
        java.lang.String str61 = locale59.getISO3Language();
        java.util.Locale locale62 = locale59.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = dateTimeField3.set((org.joda.time.ReadablePartial) localDate34, 291, intArray52, "yearOfEra", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfEra\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4406400000L + "'", long27 == 4406400000L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 3, 5, 79545431]");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2" + "'", str60, "2");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "deu" + "'", str61, "deu");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(50400000L);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 51 + "'", int15 == 51);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight2.getHourOfDay();
        org.joda.time.LocalDate localDate12 = dateMidnight2.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight2.withDayOfWeek(912);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 912 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.DateTime dateTime13 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology14 = localDate6.getChronology();
        mutablePeriod2.add((long) '4', chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.centuries();
        int int23 = period21.get(durationFieldType22);
        int[] intArray26 = chronology14.get((org.joda.time.ReadablePeriod) period21, (long) 79308922, (long) 22);
        boolean boolean27 = durationFieldType0.isSupported(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology14.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone44);
        long long47 = dateTimeZone44.nextTransition((long) 1);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime50 = instant49.toMutableDateTime();
        mutableDateTime50.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime50.set(dateTimeFieldType53, 1);
        org.joda.time.LocalDate.Property property56 = localDate48.property(dateTimeFieldType53);
        boolean boolean57 = localDate34.isSupported(dateTimeFieldType53);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        int int60 = localDate59.getDayOfYear();
        org.joda.time.Chronology chronology61 = localDate59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.months();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType53.getField(chronology61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) 53, (long) 1322, chronology61);
        org.joda.time.Weeks weeks65 = period64.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = chronology14.get((org.joda.time.ReadablePeriod) weeks65, (long) (-119), (-9223309849910399343L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -15250181630");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, -22, -1, -48, -900]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 54 + "'", int60 == 54);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(weeks65);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        boolean boolean5 = dateMidnight2.equals((java.lang.Object) locale4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        int int9 = dateMidnight8.getYearOfCentury();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        boolean boolean40 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration23);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        int int24 = period22.get(durationFieldType23);
        org.joda.time.Days days25 = period22.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period28 = period22.withFieldAdded(durationFieldType26, 0);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 79315);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        java.lang.String str32 = property31.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay34 = property31.setCopy("\u97d3\u56fd\u8a9e");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"???\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23" + "'", str32, "23");
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = interval7.withPeriodAfterStart(readablePeriod8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) 53);
        org.joda.time.Interval interval26 = localDate11.toInterval(dateTimeZone19);
        boolean boolean27 = interval7.contains((org.joda.time.ReadableInterval) interval26);
        boolean boolean29 = interval7.equals((java.lang.Object) "29 Dec 16 01:17:00 GMT");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.LocalDate.Property property11 = localDate10.year();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy(399);
        int int14 = localDate13.getDayOfWeek();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfCentury(21);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(454, (int) (short) 0, 19, (int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.toMutablePeriod();
        int int23 = mutablePeriod22.getSeconds();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundCeiling();
        org.joda.time.Duration duration28 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.LocalDate localDate29 = localDate13.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int30 = localDate13.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withSecondOfMinute(53);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withMillisOfSecond((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 22, dateTimeZone11);
        org.joda.time.DateTime dateTime17 = timeOfDay0.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond(367);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale6, locale12, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.lang.String[] strArray33 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        strSet34.clear();
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfMonth();
        org.joda.time.DurationField durationField51 = property50.getDurationField();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.lang.String str53 = property50.getAsText(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale52.getDisplayName(locale54);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale56.getDisplayCountry(locale57);
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale46, locale52, locale57, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.DateMidnight.Property property73 = dateMidnight72.dayOfMonth();
        org.joda.time.DurationField durationField74 = property73.getDurationField();
        java.util.Locale locale75 = java.util.Locale.GERMANY;
        java.lang.String str76 = property73.getAsText(locale75);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = locale75.getDisplayName(locale77);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale80 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale80);
        java.lang.String str82 = locale79.getDisplayCountry(locale80);
        java.util.Locale locale83 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale69, locale75, locale80, locale83 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.util.Locale>) localeList85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList87);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch (Deutschland)" + "'", str15, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2" + "'", str53, "2");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Deutsch (Deutschland)" + "'", str55, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Taiwan" + "'", str59, "Taiwan");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2" + "'", str76, "2");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Deutsch (Deutschland)" + "'", str78, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Taiwan" + "'", str82, "Taiwan");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList88);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.joda.time.Period period8 = new org.joda.time.Period(32769, 17, 53, (int) '#', (-1), 126, 10, 1961);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = period8.getFieldType(75193193);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = localDate9.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(744, 10, 39005863, 276, 451, 79358169, 0, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 276 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(57);
        int int10 = localDateTime9.getEra();
        int int11 = localDateTime9.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay27.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths(551);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withYearOfEra(551);
        int int40 = dateMidnight37.getDayOfYear();
        java.util.Date date41 = dateMidnight37.toDate();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868434006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=45,MILLISECOND=994,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 189 + "'", int40 == 189);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Jul 08 09:07:00 GMT 24");
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusMinutes(44);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("weekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtMidnight();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime15.set(dateTimeFieldType18, 1);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.Duration duration37 = period31.toDurationTo((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Instant instant38 = instant24.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval23.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime41 = dateTime13.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime44 = dateTime13.withDurationAdded(86400000L, 79315175);
        org.joda.time.DateTime dateTime46 = dateTime13.minusDays(186);
        org.joda.time.DateTime dateTime48 = dateTime46.withCenturyOfEra(0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay7.plusMonths(25728);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay17.monthOfYear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(451, 8);
        long long13 = dateTimeZone5.getMillisKeepLocal(dateTimeZone11, (long) 183);
        java.lang.String str15 = dateTimeZone5.getName((long) 347);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1484099817L) + "'", long13 == (-1484099817L));
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+38:53" + "'", str15, "+38:53");
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category5, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        java.lang.Integer int13 = dateTimeFormatter12.getPivotYear();
        java.lang.StringBuffer stringBuffer14 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear(17);
        int[] intArray26 = localDateTime25.getValues();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds(1);
        int int29 = localDateTime25.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime32 = property30.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusWeeks(75205963);
        int int35 = localDateTime34.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withWeekyear(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(stringBuffer14, (org.joda.time.ReadablePartial) localDateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 17 + "'", int29 == 17);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        java.lang.Object obj0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(obj0);
        org.joda.time.Instant instant2 = new org.joda.time.Instant(obj0);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField5 = chronology3.millisOfSecond();
        org.joda.time.Period period10 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean15 = period13.isSupported(durationFieldType14);
        org.joda.time.Period period17 = period10.withFieldAdded(durationFieldType14, 0);
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        int int19 = period17.getMinutes();
        int[] intArray21 = chronology3.get((org.joda.time.ReadablePeriod) period17, 59997L);
        org.joda.time.Period period23 = period17.plusDays(513);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0, 0, 0, 59, 997]");
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = property6.getAsText(locale8);
        java.lang.String str10 = locale8.getDisplayScript();
        java.lang.String str11 = locale8.getDisplayScript();
        org.joda.time.TimeOfDay timeOfDay12 = property1.setCopy("44", locale8);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("DEU");
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = locale15.getCountry();
        org.joda.time.TimeOfDay timeOfDay18 = property1.setCopy("22", locale15);
        org.joda.time.DurationField durationField19 = property1.getDurationField();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2" + "'", str9, "2");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "deu");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Period period18 = period16.minusMillis(13);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 266);
        org.joda.time.DateMidnight.Property property21 = dateMidnight5.centuryOfEra();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean57 = interval53.contains((org.joda.time.ReadableInterval) interval56);
        boolean boolean58 = interval2.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Chronology chronology59 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.year();
        java.lang.String str61 = dateTimeField60.toString();
        int int63 = dateTimeField60.getMinimumValue((long) (-800321));
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DateTimeField[year]" + "'", str61, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-292275054) + "'", int63 == (-292275054));
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime7.addMinutes(266);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType11 = periodType10.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.centuries();
        int int13 = periodType10.indexOf(durationFieldType12);
        mutableDateTime7.add(durationFieldType12, 2);
        java.lang.String str16 = mutableDateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime7.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(47400000, 976, 2015, 53580013, 246, 32820000, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53580013 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2170-01-02T19:19:00.017+38:53" + "'", str16, "2170-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isParser();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(locale5);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withMinuteOfHour(38);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.DateTime dateTime20 = dateTime8.withField(dateTimeFieldType16, 11);
        org.joda.time.DateTime.Property property21 = dateTime8.year();
        org.joda.time.DateTime dateTime22 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        int int24 = dateTime23.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        int int7 = mutableDateTime1.getYearOfEra();
        org.joda.time.Period period9 = org.joda.time.Period.years(231);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period9, 52);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        int int17 = period16.size();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.years();
        int int20 = period16.get(durationFieldType19);
        int int21 = period16.getDays();
        java.lang.Class<?> wildcardClass22 = period16.getClass();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        long long10 = dateTimeZone7.nextTransition((long) 1);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.LocalDate.Property property19 = localDate11.property(dateTimeFieldType16);
        org.joda.time.LocalDate localDate20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate22 = localDate20.withWeekOfWeekyear(4);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getMinimalDaysInFirstWeek();
        calendar23.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar23);
        org.joda.time.Period period30 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.Period period33 = period30.withPeriodType(periodType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) yearMonthDay29, periodType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str36 = dateTimeFieldType35.toString();
        int int37 = yearMonthDay29.indexOf(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = yearMonthDay29.getFieldTypes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) yearMonthDay29);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray45 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        boolean boolean53 = strSet46.remove((java.lang.Object) readableDuration51);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet46);
        boolean boolean56 = strSet46.add("1970");
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.dayOfMonth();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        org.joda.time.DateMidnight dateMidnight62 = property60.roundHalfFloorCopy();
        org.joda.time.Interval interval63 = property60.toInterval();
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.Period period67 = interval64.toPeriod(periodType66);
        boolean boolean68 = strSet46.contains((java.lang.Object) period67);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight72, readableDuration73);
        int int75 = period74.size();
        java.lang.String str76 = period74.toString();
        org.joda.time.Period period78 = period74.plusMonths(11);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(chronology79);
        int int81 = localDate80.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate84 = localDate80.withFieldAdded(durationFieldType82, 53);
        org.joda.time.Period period86 = period74.withFieldAdded(durationFieldType82, 0);
        boolean boolean87 = period67.isSupported(durationFieldType82);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType89 = periodType88.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.centuries();
        int int91 = periodType88.indexOf(durationFieldType90);
        java.lang.String str92 = durationFieldType90.toString();
        int int93 = period67.indexOf(durationFieldType90);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61427868433402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=46,MILLISECOND=598,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0S" + "'", str76, "PT0S");
        org.junit.Assert.assertNotNull(period78);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 54 + "'", int81 == 54);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "centuries" + "'", str92, "centuries");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod1, readableInstant15);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Instant instant34 = instant20.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.Duration duration64 = period58.toDurationTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Instant instant65 = instant51.minus((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean74 = interval70.contains((org.joda.time.ReadableInterval) interval73);
        boolean boolean75 = interval19.contains((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Interval interval76 = interval73.toInterval();
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval73);
        int int78 = mutablePeriod1.getHours();
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(25);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withSecondOfMinute(13);
        org.joda.time.LocalTime localTime13 = timeOfDay12.toLocalTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear(17);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withFieldAdded(durationFieldType37, 4);
        boolean boolean40 = localDateTime25.isSupported(durationFieldType37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime25.plusDays((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = localTime13.compareTo((org.joda.time.ReadablePartial) localDateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYear(36023888);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = localDate17.getField(1);
        java.lang.String str21 = dateTimeField19.getAsShortText((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField19.getType();
        boolean boolean23 = dateTimeField19.isLenient();
        long long25 = dateTimeField19.roundHalfCeiling((long) 5);
        int int26 = dateMidnight15.get(dateTimeField19);
        long long29 = dateTimeField19.getDifferenceAsLong((long) 79368, (long) 79358169);
        long long32 = dateTimeField19.addWrapField((-1382400000L), 431);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gen" + "'", str21, "gen");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3974400000L) + "'", long32 == (-3974400000L));
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone9);
        long long12 = dateTimeZone9.nextTransition((long) 1);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone9);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) 53);
        org.joda.time.Interval interval16 = localDate1.toInterval(dateTimeZone9);
        org.joda.time.LocalDate localDate18 = localDate1.plusDays(840);
        org.joda.time.LocalDate localDate20 = localDate18.plusYears(32770);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setExtension('x', "+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: +00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(5, 287, 162, (int) 'u', 513, 266, 47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder12 = builder8.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder14 = builder8.setLocale(locale13);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(6, 79308922, (int) ' ');
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder24 = builder14.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Calendar$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 10);
        int int5 = mutablePeriod4.getWeeks();
        int int6 = mutablePeriod4.size();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.Duration duration25 = period19.toDurationTo((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Instant instant26 = instant12.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Interval interval27 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39);
        org.joda.time.Duration duration41 = period35.toDurationTo((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Instant instant42 = instant28.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 'a', dateTimeZone48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate46, (org.joda.time.ReadablePartial) localDate49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54);
        org.joda.time.Duration duration56 = period50.toDurationTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Instant instant57 = instant43.minus((org.joda.time.ReadableDuration) duration56);
        boolean boolean58 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Interval interval59 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean66 = interval62.contains((org.joda.time.ReadableInterval) interval65);
        boolean boolean67 = interval11.contains((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology68 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay(chronology68);
        mutablePeriod4.setPeriod((-3186768014000L), 29L, chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(1322, 79514722, (int) ' ', chronology68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1322 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean61 = interval57.contains((org.joda.time.ReadableInterval) interval60);
        java.lang.String str62 = interval57.toString();
        boolean boolean63 = interval54.isAfter((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Interval interval64 = interval57.toInterval();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Interval interval66 = interval57.withEnd(readableInstant65);
        org.joda.time.MutableInterval mutableInterval67 = interval66.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.withMillis(1036800010L);
        boolean boolean77 = mutableInterval67.contains((org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight73.minusYears((-50399));
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.withYear(14);
        org.joda.time.YearMonthDay yearMonthDay82 = dateMidnight79.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay82.minusMonths(2008);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay84.minusDays(245);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str62, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutableInterval67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(yearMonthDay86);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = property24.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusWeeks(32769);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.era();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        int int33 = periodType30.indexOf(durationFieldType32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight28.withFieldAdded(durationFieldType32, 840);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone46);
        long long49 = dateTimeZone46.nextTransition((long) 1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 13, dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillis((long) 38);
        org.joda.time.DateTime dateTime53 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime55 = dateTime50.minusDays(657);
        org.joda.time.DateTime.Property property56 = dateTime50.minuteOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundFloorCopy();
        org.joda.time.Interval interval58 = interval39.withStart((org.joda.time.ReadableInstant) dateTime57);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868432982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=47,MILLISECOND=18,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval58);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        java.lang.StringBuffer stringBuffer6 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear(17);
        int[] intArray18 = localDateTime17.getValues();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds(1);
        int int21 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusHours(36300000);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(stringBuffer6, (org.joda.time.ReadablePartial) localDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime12 = property7.roundFloorCopy();
        java.util.Date date13 = localDateTime12.toDate();
        date13.setDate(0);
        java.util.Date date22 = new java.util.Date(32770, 2022, 32770, 13, 20, 20);
        int int23 = date22.getSeconds();
        java.util.Date date29 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date29.setMonth((int) (short) 1);
        java.util.Date date37 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date37.setMonth((int) (short) 1);
        boolean boolean40 = date29.before(date37);
        boolean boolean41 = date22.after(date29);
        date22.setTime((long) 5070);
        int int44 = date13.compareTo(date22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Dec 31 00:00:00 GMT 2021");
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:05 GMT 1970");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set(9);
        org.joda.time.DateTimeField dateTimeField6 = property2.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withCenturyOfEra(70);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = localDate22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 10);
        int int29 = mutablePeriod28.getWeeks();
        mutablePeriod28.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval51 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        mutablePeriod28.add((org.joda.time.ReadableDuration) duration49);
        int[] intArray54 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1036800010L);
        int[] intArray56 = dateTimeField6.set((org.joda.time.ReadablePartial) localDate9, 0, intArray54, (int) (short) 100);
        org.joda.time.DateTime dateTime57 = localDate9.toDateTimeAtMidnight();
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime59 = instant58.toMutableDateTime();
        mutableDateTime59.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.add((long) 32770);
        boolean boolean65 = dateTime57.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateTime dateTime67 = dateTime57.withWeekyear(53580013);
        org.joda.time.DateTime dateTime69 = dateTime57.withSecondOfMinute((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime71 = dateTime69.withWeekOfWeekyear(119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 119 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 1, 1, 5, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[100, 1, 1, 5, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        java.lang.String str5 = dateTimeField3.getAsShortText((long) '4');
        long long8 = dateTimeField3.add(100L, 0);
        long long11 = dateTimeField3.add((long) 'a', 0L);
        long long13 = dateTimeField3.roundHalfFloor((long) 722);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gen" + "'", str5, "gen");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 97L + "'", long11 == 97L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(115, 566, 75205963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 115 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        int int12 = dateTimeField10.getMinimumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.LocalDate localDate24 = localDate18.minusDays(100);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        long long34 = dateTimeZone31.nextTransition((long) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime37.set(dateTimeFieldType40, 1);
        org.joda.time.LocalDate.Property property43 = localDate35.property(dateTimeFieldType40);
        int int44 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate35);
        int int45 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        int int46 = localDate24.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate24.withDayOfMonth(656);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 656 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 267 + "'", int25 == 267);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 267 + "'", int46 == 267);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        int int6 = mutableDateTime5.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMonthOfYear(534);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 534 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate9.withDayOfMonth(13);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology17 = localDate9.getChronology();
        mutablePeriod5.add((long) '4', chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((-1L), 1L, periodType3, chronology17);
        org.joda.time.DurationField durationField20 = chronology17.weekyears();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology17);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.DurationField durationField12 = chronology10.weeks();
        long long15 = durationField12.subtract((long) 79334, (long) 183);
        java.lang.String str16 = durationField12.getName();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-110678320666L) + "'", long15 == (-110678320666L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weeks" + "'", str16, "weeks");
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        java.time.ZoneId zoneId7 = timeZone6.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.time.ZoneId zoneId15 = timeZone14.toZoneId();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        boolean boolean17 = timeZone6.hasSameRules(timeZone14);
        int int18 = timeZone14.getRawOffset();
        int int19 = timeZone14.getRawOffset();
        timeZone14.setID("Taiwan");
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(zoneId15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513967337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Taiwan\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=47,MILLISECOND=337,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate19.toDateTimeAtCurrentTime(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.withYearOfEra(1322);
        org.joda.time.DateTime dateTime9 = dateTime7.withHourOfDay(10);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMinutes(21);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra(79315175);
        org.joda.time.Instant instant15 = dateTime12.toInstant();
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.addMinutes(13);
        mutableDateTime1.setDayOfYear(5);
        mutableDateTime1.addDays(139980000);
        org.joda.time.Period period42 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = period42.withPeriodType(periodType43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime47.addMinutes(266);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        org.joda.time.Duration duration63 = period57.toDurationTo((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Instant instant64 = instant50.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(1L, dateTimeZone74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76);
        org.joda.time.Duration duration78 = period72.toDurationTo((org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Instant instant79 = instant65.minus((org.joda.time.ReadableDuration) duration78);
        boolean boolean80 = duration63.isLongerThan((org.joda.time.ReadableDuration) duration78);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration82 = period42.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration82);
        mutableDateTime1.addMonths(2000);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.joda.time.Period period2 = new org.joda.time.Period(0L, 136150610074000L);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime1.toString(dateTimeFormatter26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime1.add(readablePeriod29, 431);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField(1);
        java.lang.String str37 = dateTimeField35.getAsShortText((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField35.getType();
        org.joda.time.DurationField durationField39 = dateTimeField35.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField35, 1159);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 1159");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0001-02-21T00:00:00.017+38:53" + "'", str27, "0001-02-21T00:00:00.017+38:53");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "gen" + "'", str37, "gen");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime13.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMonths((-800321));
        org.joda.time.Instant instant17 = dateTime13.toInstant();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds((int) '#');
        mutablePeriod1.addWeeks(9);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate18 = localDate12.minusDays(100);
        int int19 = localDate12.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = localDate12.toDateMidnight();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Instant instant35 = instant21.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight20.minus((org.joda.time.ReadableDuration) duration34);
        mutablePeriod1.setPeriod((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod1.copy();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DurationField durationField43 = property42.getDurationField();
        org.joda.time.DateMidnight dateMidnight44 = property42.roundHalfFloorCopy();
        org.joda.time.Interval interval45 = property42.toInterval();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight48.minusDays(17);
        org.joda.time.DateTime dateTime52 = dateMidnight51.toDateTimeISO();
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight55 = dateTime52.toDateMidnight();
        org.joda.time.LocalDate localDate56 = dateTime52.toLocalDate();
        org.joda.time.Period period61 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate62 = localDate56.minus((org.joda.time.ReadablePeriod) period61);
        boolean boolean63 = interval45.equals((java.lang.Object) period61);
        org.joda.time.Period period65 = period61.withSeconds(1961);
        org.joda.time.Period period67 = period61.withMinutes(36000000);
        mutablePeriod38.add((org.joda.time.ReadablePeriod) period67);
        int int69 = period67.getMinutes();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category5, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = localDate12.indexOf(dateTimeFieldType15);
        org.joda.time.DateMidnight dateMidnight17 = localDate12.toDateMidnight();
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfEra();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType21, chronology23);
        org.joda.time.Period period26 = period24.minusHours(1);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight17.withMillis((long) 32769);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight17.withYearOfEra(541);
        org.joda.time.DateMidnight.Property property32 = dateMidnight17.era();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter10.print((org.joda.time.ReadableInstant) dateMidnight17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period5 = new org.joda.time.Period();
        org.joda.time.Period period7 = period5.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.Period period11 = period4.withFieldAdded(durationFieldType8, 0);
        org.joda.time.Seconds seconds12 = period11.toStandardSeconds();
        int int13 = period11.getSeconds();
        int int14 = period11.getHours();
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.set(9);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.minuteOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.dayOfMonth();
        int int8 = mutableDateTime5.getWeekyear();
        java.lang.Object obj9 = mutableDateTime5.clone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "1970-01-02T00:00:09.017+38:53");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-02T00:00:09.017+38:53");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-02T00:00:09.017+38:53");
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.Duration duration15 = period9.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Instant instant16 = instant2.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        org.joda.time.Duration duration30 = period24.toDurationTo((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Instant instant31 = instant17.minus((org.joda.time.ReadableDuration) duration30);
        boolean boolean32 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval51 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate55, (org.joda.time.ReadablePartial) localDate58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight62, readableDuration63);
        org.joda.time.Duration duration65 = period59.toDurationTo((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Instant instant66 = instant52.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(1L, dateTimeZone76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight77, readableDuration78);
        org.joda.time.Duration duration80 = period74.toDurationTo((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.Instant instant81 = instant67.minus((org.joda.time.ReadableDuration) duration80);
        boolean boolean82 = duration65.isLongerThan((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Interval interval83 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        boolean boolean84 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period85 = duration15.toPeriod();
        org.joda.time.Instant instant87 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration15, 976);
        org.joda.time.Instant instant89 = instant87.withMillis(32820000L);
        org.joda.time.DateTime dateTime90 = instant87.toDateTimeISO();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime2.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate localDate17 = localDate11.withDayOfMonth(13);
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology19 = localDate11.getChronology();
        mutablePeriod7.add((long) '4', chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime2, chronology19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(obj0, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            long long31 = chronology19.getDateTimeMillis(425, 55, 150, (int) (byte) 10, 61, (int) (short) 0, 942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.monthOfYear();
        int int22 = property21.get();
        org.joda.time.YearMonthDay yearMonthDay23 = property21.withMaximumValue();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868432141,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=47,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(yearMonthDay23);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.centuryOfEra();
        int int3 = property2.getMinimumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.minus((long) 2022);
        long long10 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DurationField durationField11 = property2.getDurationField();
        long long14 = durationField11.getDifferenceAsLong(1645513889170L, (-5820L));
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 47 + "'", int1 == 47);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        java.lang.String str34 = property33.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = property33.addToCopy(28);
        org.joda.time.YearMonthDay yearMonthDay37 = property33.withMaximumValue();
        int int38 = property33.get();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 10);
        int int45 = mutablePeriod44.getSeconds();
        mutablePeriod44.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType48 = mutablePeriod44.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 431, (long) 14, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period(2678400000L, (long) 454, periodType48);
        boolean boolean51 = property33.equals((java.lang.Object) periodType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay53 = property33.setCopy(1640995120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1640995120 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868432004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=47,MILLISECOND=996,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[year]" + "'", str34, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        java.time.Instant instant9 = date5.toInstant();
        date5.setHours(99);
        date5.setTime((-62131250938934L));
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:11:01 GMT 1");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar calendar5 = builder0.build();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) 1);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone26);
        long long29 = dateTimeZone26.nextTransition((long) 1);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(dateTimeZone26);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) 53);
        org.joda.time.Interval interval33 = localDate18.toInterval(dateTimeZone26);
        org.joda.time.Interval interval34 = yearMonthDay16.toInterval(dateTimeZone26);
        java.lang.String str36 = dateTimeZone26.getName(43200000L);
        org.joda.time.DateMidnight dateMidnight37 = yearMonthDay6.toDateMidnight(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-60491318400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+38:53" + "'", str36, "+38:53");
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getWeeksInWeekYear();
        java.util.Date date12 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date12.setMonth((int) (short) 1);
        calendar0.setTime(date12);
        java.util.Date date21 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromDateFields(date21);
        calendar0.setTime(date21);
        int int24 = calendar0.getWeekYear();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Jun 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1915 + "'", int24 == 1915);
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        java.lang.String str10 = localDate8.toString();
        org.joda.time.LocalDate localDate12 = localDate8.minusDays(79308922);
        int int13 = localDate8.getMonthOfYear();
        java.util.Date date14 = localDate8.toDate();
        date14.setMinutes(122);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-13" + "'", str10, "1970-01-13");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 13 02:02:00 GMT 1970");
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category10, locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale12);
        int int17 = calendar16.getWeekYear();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getMinimalDaysInFirstWeek();
        calendar18.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        java.time.ZoneId zoneId31 = timeZone30.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        java.time.ZoneId zoneId39 = timeZone38.toZoneId();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        boolean boolean41 = timeZone30.hasSameRules(timeZone38);
        calendar18.setTimeZone(timeZone38);
        calendar16.setTimeZone(timeZone38);
        java.time.ZoneId zoneId44 = timeZone38.toZoneId();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone47);
        boolean boolean49 = timeZone47.useDaylightTime();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513968167,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=48,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=48,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645513968167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=48,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645513968167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=48,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay18.year();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfFloorCopy();
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 1961, chronology14);
        org.joda.time.DurationField durationField16 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(534, 75193193, (-800321), 2035, 476, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2035 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.addYears(1634400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1634400001 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(54);
        int int12 = localTime9.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = localTime9.plusHours(566);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDayOfMonth(69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        java.util.Date date1 = new java.util.Date(1645513923494L);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:03 GMT 2022");
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        java.lang.String str7 = timeZone6.getID();
        timeZone6.setID("1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        int int10 = timeZone6.getDSTSavings();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.property(dateTimeFieldType23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime22.toDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.plusYears(999);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds(10);
        org.joda.time.LocalTime localTime37 = localTime33.minusSeconds(100);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        int int39 = localTime37.getMillisOfDay();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime42 = localTime40.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime44 = localTime42.plusSeconds(10);
        org.joda.time.LocalTime.Property property45 = localTime44.minuteOfHour();
        org.joda.time.LocalTime localTime47 = property45.setCopy(0);
        org.joda.time.LocalTime localTime48 = property45.withMinimumValue();
        org.joda.time.LocalTime localTime49 = property45.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        boolean boolean52 = localTime49.isSupported(dateTimeFieldType50);
        int int53 = localTime37.get(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime22.withField(dateTimeFieldType50, 51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36248609 + "'", int39 == 36248609);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        int int8 = date5.getTimezoneOffset();
        int int9 = date5.getHours();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.LocalTime localTime14 = property11.addWrapFieldToCopy(575);
        org.joda.time.LocalTime localTime16 = localTime14.minusMinutes(566);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 13 + "'", int9 == 13);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfMonth();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = property5.getAsText(locale7);
        java.lang.String str9 = locale7.getISO3Language();
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = locale0.getDisplayScript(locale7);
        boolean boolean12 = locale0.hasExtensions();
        java.util.Locale locale13 = locale0.stripExtensions();
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale0.getDisplayName(locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tedesco" + "'", str10, "tedesco");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = property27.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField30 = property27.getField();
        long long33 = dateTimeField30.add((long) 3, (-8639999983L));
        mutableDateTime1.setRounding(dateTimeField30);
        java.lang.String str36 = dateTimeField30.getAsShortText((long) 256);
        long long39 = dateTimeField30.addWrapField(1645513750063L, 400);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-746495998531199997L) + "'", long33 == (-746495998531199997L));
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2" + "'", str36, "2");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1643785750063L + "'", long39 == 1643785750063L);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(20);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.LocalTime localTime12 = localTime9.withMinuteOfHour(53);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(22);
        org.joda.time.LocalTime localTime16 = localTime12.plusSeconds(840);
        org.joda.time.LocalTime localTime18 = localTime12.plusSeconds(1961);
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localTime18.toString("1970-01-02T14:53:00.013+38:53", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "20:37:58.844" + "'", str10, "20:37:58.844");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"fr\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 'a', dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate4, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate4.withDayOfMonth(13);
        org.joda.time.DateTime dateTime11 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology12 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) 1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 13, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        int int29 = period28.size();
        java.lang.String str30 = period28.toString();
        org.joda.time.Period period32 = period28.plusMonths(11);
        boolean boolean33 = dateTime23.equals((java.lang.Object) period32);
        int[] intArray36 = chronology12.get((org.joda.time.ReadablePeriod) period32, (long) 7, (long) ' ');
        org.joda.time.DateTimeField dateTimeField37 = chronology12.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 9, periodType1, chronology12);
        org.joda.time.DurationField durationField39 = chronology12.days();
        org.joda.time.DurationField durationField40 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField41 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField43 = chronology12.year();
        java.lang.String str44 = dateTimeField43.toString();
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0S" + "'", str30, "PT0S");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DateTimeField[year]" + "'", str44, "DateTimeField[year]");
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime localTime6 = localTime2.withSecondOfMinute(54);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = property7.setCopy(169);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 169 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 22);
        org.joda.time.Instant instant3 = instant1.withMillis((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        java.lang.String str18 = duration17.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundHalfFloorCopy();
        org.joda.time.Interval interval25 = property22.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DurationField durationField32 = property31.getDurationField();
        org.joda.time.DateMidnight dateMidnight33 = property31.roundHalfFloorCopy();
        org.joda.time.Interval interval34 = property31.toInterval();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.minusDays(17);
        org.joda.time.DateTime dateTime41 = dateMidnight40.toDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight44 = dateTime41.toDateMidnight();
        org.joda.time.LocalDate localDate45 = dateTime41.toLocalDate();
        org.joda.time.Period period50 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate51 = localDate45.minus((org.joda.time.ReadablePeriod) period50);
        boolean boolean52 = interval34.equals((java.lang.Object) period50);
        boolean boolean53 = interval25.isBefore((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime55 = instant54.toMutableDateTime();
        mutableDateTime55.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime55.set(dateTimeFieldType58, 1);
        mutableDateTime55.addHours((-1));
        mutableDateTime55.addDays(31);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate67, (org.joda.time.ReadablePartial) localDate70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(1L, dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        org.joda.time.Duration duration77 = period71.toDurationTo((org.joda.time.ReadableInstant) dateMidnight74);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration77, (int) 'a');
        org.joda.time.Interval interval80 = interval25.withDurationAfterStart((org.joda.time.ReadableDuration) duration77);
        boolean boolean81 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Instant instant83 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration77, 75205963);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(instant83);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 0);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone7);
        long long10 = dateTimeZone7.nextTransition((long) 1);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        org.joda.time.LocalDate.Property property19 = localDate11.property(dateTimeFieldType16);
        org.joda.time.LocalDate localDate20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate22 = localDate20.withWeekOfWeekyear(4);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getMinimalDaysInFirstWeek();
        calendar23.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar23);
        org.joda.time.Period period30 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.Period period33 = period30.withPeriodType(periodType31);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) yearMonthDay29, periodType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str36 = dateTimeFieldType35.toString();
        int int37 = yearMonthDay29.indexOf(dateTimeFieldType35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = yearMonthDay29.getFieldTypes();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) yearMonthDay29);
        org.joda.time.Period period41 = period39.plusYears(36000000);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61427868430989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=49,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "year" + "'", str36, "year");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(256);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 63);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.joda.time.Period period0 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.Period period3 = period0.withPeriodType(periodType1);
        org.joda.time.Period period5 = period0.minusYears((int) 'a');
        int int6 = period5.getHours();
        java.lang.String str7 = period5.toString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "P-97Y" + "'", str7, "P-97Y");
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(0, (int) ' ', 0, 57);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        int int7 = mutablePeriod6.getSeconds();
        mutablePeriod6.addHours((int) (short) 0);
        mutablePeriod6.clear();
        org.joda.time.Period period11 = new org.joda.time.Period();
        org.joda.time.Period period13 = period11.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean15 = period13.isSupported(durationFieldType14);
        java.lang.String str16 = durationFieldType14.toString();
        int int17 = mutablePeriod6.get(durationFieldType14);
        org.joda.time.LocalTime localTime18 = localTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfDay();
        int int20 = property19.getMinimumValueOverall();
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale22.getDisplayName();
        java.lang.String str24 = locale22.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = property19.setCopy("clockhourOfHalfday", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"clockhourOfHalfday\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyears" + "'", str16, "weekyears");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.LocalDate.Property property14 = localDate11.centuryOfEra();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        int int21 = period20.size();
        java.lang.String str22 = period20.toString();
        org.joda.time.Period period24 = period20.plusMonths(11);
        int int25 = period20.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        int int32 = period30.get(durationFieldType31);
        org.joda.time.MutablePeriod mutablePeriod33 = period30.toMutablePeriod();
        int int34 = period30.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.Period period42 = period30.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = period20.withFields((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period45 = period43.withYears((int) (byte) 100);
        org.joda.time.LocalDate localDate46 = localDate11.minus((org.joda.time.ReadablePeriod) period43);
        int int47 = localDate46.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 19 + "'", int47 == 19);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int26 = localDateTime25.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Period period33 = period31.minusMillis(13);
        org.joda.time.Period period34 = period33.toPeriod();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period33.toDurationFrom(readableInstant35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.withDurationAdded((org.joda.time.ReadableDuration) duration36, 32759);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868430792,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=49,MILLISECOND=208,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513969209,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=49,MILLISECOND=209,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(17);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight47, periodType51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.Period period54 = period52.withFields(readablePeriod53);
        org.joda.time.Period period56 = period54.withSeconds(100);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int2 = timeZone0.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property24.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property24.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.Chronology chronology29 = interval27.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 1961, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType19.getField(chronology29);
        boolean boolean32 = dateTimeFieldType18.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyear();
        boolean boolean34 = dateTimeField33.isSupported();
        long long37 = dateTimeField33.getDifferenceAsLong(10886400000L, (long) 19);
        int int38 = mutableDateTime17.get(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay2 = property1.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = property1.getTimeOfDay();
        int int4 = property1.get();
        org.joda.time.TimeOfDay timeOfDay5 = property1.withMinimumValue();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = property1.getAsText(locale6);
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale8);
        java.lang.String str10 = locale8.getLanguage();
        int int11 = property1.getMaximumShortTextLength(locale8);
        java.lang.String str12 = locale8.toString();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setTimeInMillis((long) (byte) 1);
        java.util.Date date4 = calendar0.getTime();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay12.toDateMidnight(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay12.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay12.withYear(266);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.minutes();
        org.joda.time.DurationField durationField39 = chronology37.weekyears();
        org.joda.time.Period period40 = new org.joda.time.Period(0L, chronology37);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType26, chronology37);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay22.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str47 = dateTimeZone45.getNameKey((-1L));
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = yearMonthDay22.toDateTimeAtCurrentTime(dateTimeZone45);
        boolean boolean50 = calendar0.after((java.lang.Object) dateTime49);
        calendar0.setFirstDayOfWeek(79358169);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant53 = new org.joda.time.Instant((java.lang.Object) 79358169);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=79358169,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        java.util.Locale locale3 = new java.util.Locale("fr_CA", "T14:53:00.010", "17:09:13.382");
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getDisplayLanguage(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "fr_ca_T14:53:00.010_17:09:13.382");
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(30, 256, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        int int5 = localTime2.getMillisOfSecond();
        org.joda.time.LocalTime.Property property6 = localTime2.minuteOfHour();
        org.joda.time.LocalTime.Property property7 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime9 = property7.addNoWrapToCopy(183);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withMinuteOfHour(151);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 151 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 527 + "'", int5 == 527);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.joda.time.Period period1 = new org.joda.time.Period(399L);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        java.lang.String str34 = property33.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = property33.addToCopy(28);
        org.joda.time.YearMonthDay yearMonthDay37 = property33.withMaximumValue();
        int int38 = property33.get();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 10);
        int int45 = mutablePeriod44.getSeconds();
        mutablePeriod44.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType48 = mutablePeriod44.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 431, (long) 14, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period(2678400000L, (long) 454, periodType48);
        boolean boolean51 = property33.equals((java.lang.Object) periodType48);
        java.lang.String str52 = property33.getAsShortText();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868430374,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=49,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[year]" + "'", str34, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "23" + "'", str52, "23");
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(57);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusHours((int) (short) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        int int14 = dateMidnight13.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("millisOfSecond");
        calendar0.setTimeZone(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusSeconds((int) '4');
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withMillisOfSecond(126);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.minusMinutes(10);
        org.joda.time.LocalTime localTime25 = timeOfDay24.toLocalTime();
        boolean boolean26 = calendar0.after((java.lang.Object) localTime25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        mutableDateTime28.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone37);
        long long40 = dateTimeZone37.nextTransition((long) 1);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 13, dateTimeZone37);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime28.era();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.roundCeiling();
        int int46 = mutableDateTime45.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str48 = dateTimeFieldType47.toString();
        mutableDateTime45.set(dateTimeFieldType47, 1970);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localTime25.get(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=49,MILLISECOND=686,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 55 + "'", int46 == 55);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "year" + "'", str48, "year");
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone18);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) 53);
        org.joda.time.Interval interval25 = localDate10.toInterval(dateTimeZone18);
        org.joda.time.Interval interval26 = interval6.gap((org.joda.time.ReadableInterval) interval25);
        boolean boolean27 = interval6.isAfterNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withLaterOffsetAtOverlap();
        int int14 = dateTime13.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 893 + "'", int14 == 893);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        boolean boolean29 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight21.dayOfMonth();
        int int31 = dateMidnight21.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight21.withDurationAdded((long) 35213769, 98);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime16.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 54 + "'", int26 == 54);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
        org.junit.Assert.assertNotNull(mutablePeriod1);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(5);
        int int9 = dateMidnight8.getWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) ' ');
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.Duration duration15 = period9.toDurationTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.Instant instant16 = instant2.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant17 = instant1.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        java.lang.String str22 = dateTimeField21.getName();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        int int24 = dateTimeField21.getMaximumTextLength(locale23);
        int int25 = instant1.get(dateTimeField21);
        int int26 = dateTimeField21.getMinimumValue();
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant31, (org.joda.time.ReadableInstant) instant32);
        org.joda.time.Period period34 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Period period37 = period34.withPeriodType(periodType35);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime39.addMinutes(266);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.Duration duration55 = period49.toDurationTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Instant instant56 = instant42.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate60, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight67, readableDuration68);
        org.joda.time.Duration duration70 = period64.toDurationTo((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Instant instant71 = instant57.minus((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration70);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration74 = period34.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.DateMidnight.Property property79 = dateMidnight78.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight78.minusDays(17);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration74, (org.joda.time.ReadableInstant) dateMidnight78, periodType82);
        int int84 = duration28.compareTo((org.joda.time.ReadableDuration) duration74);
        java.lang.Object obj85 = null;
        boolean boolean86 = duration74.equals(obj85);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(675L, chronology1);
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Instant instant32 = instant18.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Interval interval33 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 10);
        int int37 = mutablePeriod36.getWeeks();
        mutablePeriod36.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod36.setYears(53);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime9.toMutableDateTime(dateTimeZone51);
        org.joda.time.Period period57 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime9);
        int int60 = mutablePeriod59.getMillis();
        mutablePeriod59.setMinutes(79472685);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.minusDays(17);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight47, periodType51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime54 = instant53.toMutableDateTime();
        mutableDateTime54.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime54.set(dateTimeFieldType57, 1);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 'a', dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate65, (org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate localDate71 = localDate65.withDayOfMonth(13);
        org.joda.time.DateTime dateTime72 = localDate65.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology73 = localDate65.getChronology();
        mutablePeriod61.add((long) '4', chronology73);
        mutableDateTime54.add((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        mutableDateTime54.set(dateTimeFieldType76, 38);
        org.joda.time.DateMidnight.Property property79 = dateMidnight47.property(dateTimeFieldType76);
        org.joda.time.DateMidnight dateMidnight80 = property79.roundFloorCopy();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight80);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate localDate15 = localDate12.minusWeeks(79491963);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        boolean boolean56 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) instant55);
        long long57 = instant55.getMillis();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645513970165L + "'", long57 == 1645513970165L);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(72716537);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((-259200000L));
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
        boolean boolean4 = dateMidnight2.isBefore(1056L);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withFieldAdded(durationFieldType5, 79368);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusYears(575);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 100);
        int int39 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay36.plusHours(38);
        org.joda.time.LocalTime localTime42 = timeOfDay36.toLocalTime();
        int int43 = timeOfDay36.getMinuteOfHour();
        org.joda.time.Chronology chronology44 = timeOfDay36.getChronology();
        long long48 = chronology44.add(0L, 31535199679L, (-32));
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTimeFormatter33.parseDateTime("fr");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1009126389728L) + "'", long48 == (-1009126389728L));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        int int14 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.LocalDate.Property property17 = localDate5.property(dateTimeFieldType15);
        int int18 = property17.getMinimumValue();
        org.joda.time.LocalDate localDate20 = property17.addWrapFieldToCopy(267);
        org.joda.time.DurationField durationField21 = property17.getDurationField();
        long long24 = durationField21.getDifferenceAsLong((long) 55, 79315175L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = dateTimeFormatter3.parseLocalDate("T00:00:00.038");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = localDate22.getChronology();
        org.joda.time.LocalDate localDate28 = localDate22.minusDays(100);
        int int29 = localDate28.getDayOfYear();
        int int30 = localDate28.size();
        org.joda.time.LocalDate.Property property31 = localDate28.centuryOfEra();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtMidnight();
        int int33 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localDate28);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 267 + "'", int29 == 267);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.joda.time.Period period1 = org.joda.time.Period.millis(292269054);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        int int16 = period15.size();
        java.lang.String str17 = period15.toString();
        org.joda.time.Period period19 = period15.plusMonths(11);
        boolean boolean20 = dateTime10.equals((java.lang.Object) period19);
        org.joda.time.DateTime.Property property21 = dateTime10.secondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone8);
        long long11 = dateTimeZone8.nextTransition((long) 1);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTime();
        mutableDateTime14.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime14.set(dateTimeFieldType17, 1);
        org.joda.time.LocalDate.Property property20 = localDate12.property(dateTimeFieldType17);
        org.joda.time.LocalDate localDate21 = property20.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate23 = localDate21.withWeekOfWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight33 = dateTime30.toDateMidnight();
        org.joda.time.LocalDate localDate34 = dateTime30.toLocalDate();
        int int35 = localDate23.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        org.joda.time.LocalDate localDate38 = localDate34.minusDays(28);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight44.getZone();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone45);
        java.lang.String str48 = dateTimeZone45.getID();
        org.joda.time.Chronology chronology49 = chronology39.withZone(dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(189, (int) (byte) 100, 292278993, chronology39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+38:53" + "'", str48, "+38:53");
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 10, (int) '#', 2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime5 = instant4.toMutableDateTime();
        mutableDateTime5.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        long long17 = dateTimeZone14.nextTransition((long) 1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 13, dateTimeZone14);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime5.era();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime22.setDate((long) (short) -1);
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int40 = localDateTime38.indexOf(dateTimeFieldType39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime22.property(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property42 = localTime3.property(dateTimeFieldType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(476, 19721);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 19721");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(5, 12);
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.months();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType21, chronology23);
        int[] intArray26 = chronology17.get((org.joda.time.ReadablePeriod) period24, 0L);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.hourOfDay();
        java.util.Locale locale29 = new java.util.Locale("10:02:15.636");
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale29.getDisplayLanguage(locale30);
        int int32 = dateTimeField27.getMaximumTextLength(locale30);
        java.lang.String str33 = locale30.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap34 = calendar0.getDisplayNames(898, 53, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61435471629371,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=50,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay11);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 54 + "'", int16 == 54);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale29.toString(), "10:02:15.636");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10:02:15.636" + "'", str31, "10:02:15.636");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CN" + "'", str33, "CN");
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(1961);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(816);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        boolean boolean4 = property3.isLeap();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateMidnight dateMidnight7 = property3.addWrapFieldToCopy(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(17);
        org.joda.time.DateTime dateTime22 = dateMidnight21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.LocalDate localDate26 = dateTime22.toLocalDate();
        org.joda.time.Period period31 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate32 = localDate26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = interval15.equals((java.lang.Object) period31);
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime35 = interval15.getStart();
        java.util.Date date36 = dateTime35.toDate();
        date36.setYear((-96608));
        long long39 = date36.getTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Dec 31 09:07:00 GMT 94709");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3050893003980000L) + "'", long39 == (-3050893003980000L));
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded((long) 7, 79368);
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate2.withMonthOfYear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property12.setCopy("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfCentury\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        long long7 = dateTimeZone5.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusDays(17);
        org.joda.time.DateTime dateTime14 = dateMidnight13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(38);
        int int17 = dateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime14.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra(100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusDays((-292275054));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis(35213769);
        boolean boolean39 = dateTimeZone18.isLocalDateTimeGap(localDateTime36);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(dateTimeZone18);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.year();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 139980000 + "'", int17 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.minusDays(17);
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight30 = dateTime27.toDateMidnight();
        org.joda.time.LocalDate localDate31 = dateTime27.toLocalDate();
        int int32 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateMidnight dateMidnight33 = localDate31.toDateMidnight();
        org.joda.time.LocalDate localDate35 = localDate31.minusDays(28);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime38 = localTime36.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime40 = localTime38.plusSeconds(10);
        org.joda.time.LocalTime.Property property41 = localTime40.minuteOfHour();
        org.joda.time.LocalTime localTime43 = property41.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField44 = property41.getField();
        org.joda.time.LocalTime localTime45 = property41.roundCeilingCopy();
        org.joda.time.LocalTime localTime47 = property41.addCopy((long) 100);
        org.joda.time.LocalTime localTime48 = property41.roundFloorCopy();
        org.joda.time.Chronology chronology49 = localTime48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone50);
        int[] intArray53 = chronology49.get((org.joda.time.ReadablePartial) localTime51, (long) 287);
        org.joda.time.Chronology chronology54 = chronology49.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) 28, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 287]");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.DurationFieldType[] durationFieldTypeArray45 = mutablePeriod44.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod46 = mutablePeriod44.copy();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = mutablePeriod46.getValue(364);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 364");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(durationFieldTypeArray45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(25);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.plusHours(53);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMinutes(267);
        java.lang.String str16 = timeOfDay14.toString("100");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = timeOfDay14.getField(1030);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1030");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100" + "'", str16, "100");
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.hourOfDay();
        int int2 = property1.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.DateTime dateTime7 = property5.getDateTime();
        org.joda.time.DateTime dateTime8 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withEra(79372413);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79372413 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "51" + "'", str6, "51");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        java.lang.String[] strArray18 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        boolean boolean26 = strSet19.remove((java.lang.Object) readableDuration24);
        java.util.stream.Stream<java.lang.String> strStream27 = strSet19.parallelStream();
        boolean boolean28 = yearMonthDay7.equals((java.lang.Object) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strSet19.spliterator();
        java.util.Set<java.lang.String> strSet30 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.DurationField durationField39 = property38.getDurationField();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = property38.getAsText(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale40.getDisplayName(locale42);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale45);
        java.lang.String str47 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale34, locale40, locale45, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList50);
        java.lang.String[] strArray55 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61);
        boolean boolean63 = strSet56.remove((java.lang.Object) readableDuration61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet56);
        boolean boolean65 = strSet30.addAll((java.util.Collection<java.lang.String>) strList64);
        boolean boolean66 = strSet19.retainAll((java.util.Collection<java.lang.String>) strList64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList64.stream();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2" + "'", str41, "2");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Deutsch (Deutschland)" + "'", str43, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Taiwan" + "'", str47, "Taiwan");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strStream67);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getDurationField();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = property11.getAsText(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale13.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = locale17.getDisplayCountry(locale18);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray22 = new java.util.Locale[] { locale7, locale13, locale18, locale21 };
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfMonth();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = property36.getAsText(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale38.getDisplayName(locale40);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale42.getDisplayCountry(locale43);
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray47 = new java.util.Locale[] { locale32, locale38, locale43, locale46 };
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList48);
        java.lang.String[] strArray53 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59);
        boolean boolean61 = strSet54.remove((java.lang.Object) readableDuration59);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet54);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList62);
        java.lang.String[] strArray66 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight71, readableDuration72);
        boolean boolean74 = strSet67.remove((java.lang.Object) readableDuration72);
        java.util.Calendar.Builder builder75 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder79 = builder75.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder83 = builder75.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder87 = builder83.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        boolean boolean88 = strSet67.contains((java.lang.Object) (byte) 10);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet67);
        boolean boolean90 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet67);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2" + "'", str14, "2");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Deutsch (Deutschland)" + "'", str16, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Taiwan" + "'", str20, "Taiwan");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Deutsch (Deutschland)" + "'", str41, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Taiwan" + "'", str45, "Taiwan");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (byte) 10, 79368, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79368 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        java.lang.StringBuffer stringBuffer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(stringBuffer6, (long) 79437);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 2, dateTimeZone11);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = dateTimeZone11.getName((long) 0, locale18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withZone(dateTimeZone11);
        java.util.Locale locale21 = dateTimeFormatter3.getLocale();
        java.lang.Integer int22 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.parse("DateTimeField[dayOfMonth]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+38:53" + "'", str19, "+38:53");
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay7.dayOfMonth();
        int int16 = property15.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = property20.getAsText(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale22.getDisplayName(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = localDate27.getField(1);
        java.lang.String str30 = dateTimeField29.getName();
        boolean boolean31 = dateTimeField29.isLenient();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = localDate37.isSupported(dateTimeFieldType39);
        int int41 = localDate37.getWeekyear();
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDate37, locale43);
        java.lang.String str45 = locale22.getDisplayScript(locale43);
        java.lang.String str46 = locale22.getLanguage();
        java.util.Set<java.lang.Character> charSet47 = locale22.getExtensionKeys();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = locale22.getDisplayLanguage(locale48);
        int int50 = property15.getMaximumTextLength(locale22);
        org.joda.time.DateTimeField dateTimeField51 = property15.getField();
        org.joda.time.DateTimeField dateTimeField52 = property15.getField();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfMonth();
        org.joda.time.DurationField durationField57 = property56.getDurationField();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = property56.getAsText(locale58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.lang.String str61 = locale58.getDisplayName(locale60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DateTimeField dateTimeField65 = localDate63.getField(1);
        java.lang.String str66 = dateTimeField65.getName();
        boolean boolean67 = dateTimeField65.isLenient();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = localDate73.isSupported(dateTimeFieldType75);
        int int77 = localDate73.getWeekyear();
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = dateTimeField65.getAsShortText((org.joda.time.ReadablePartial) localDate73, locale79);
        java.lang.String str81 = locale58.getDisplayScript(locale79);
        java.lang.String str82 = locale58.getLanguage();
        java.util.Set<java.lang.Character> charSet83 = locale58.getExtensionKeys();
        java.util.Locale locale84 = java.util.Locale.GERMANY;
        java.lang.String str85 = locale58.getDisplayLanguage(locale84);
        java.util.Locale locale86 = locale84.stripExtensions();
        java.lang.String str87 = locale86.getISO3Country();
        int int88 = property15.getMaximumTextLength(locale86);
        org.joda.time.DateTimeField dateTimeField89 = property15.getField();
        int int91 = dateTimeField89.getLeapAmount(399L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 28 + "'", int16 == 28);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Deutsch (Deutschland)" + "'", str25, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "monthOfYear" + "'", str30, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc6d4" + "'", str44, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "de" + "'", str46, "de");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Deutsch" + "'", str49, "Deutsch");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2" + "'", str59, "2");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Deutsch (Deutschland)" + "'", str61, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "monthOfYear" + "'", str66, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1970 + "'", int77 == 1970);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\uc6d4" + "'", str80, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "de" + "'", str82, "de");
        org.junit.Assert.assertNotNull(charSet83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Deutsch" + "'", str85, "Deutsch");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DEU" + "'", str87, "DEU");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        int int16 = property7.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = property7.add(10);
        org.joda.time.Chronology chronology19 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getName((long) 840);
        java.lang.String str24 = dateTimeZone20.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(6, 2015, 2035, 2035, 445, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2035 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+38:53" + "'", str23, "+38:53");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+38:53" + "'", str24, "+38:53");
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 100);
        int int39 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay36.plusHours(38);
        org.joda.time.LocalTime localTime42 = timeOfDay36.toLocalTime();
        int int43 = timeOfDay36.getMinuteOfHour();
        org.joda.time.Chronology chronology44 = timeOfDay36.getChronology();
        long long48 = chronology44.add(0L, 31535199679L, (-32));
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(26);
        java.io.Writer writer54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = localDate56.getField(1);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate61, (org.joda.time.ReadablePartial) localDate64);
        boolean boolean66 = localDate56.isEqual((org.joda.time.ReadablePartial) localDate64);
        org.joda.time.LocalDate localDate68 = localDate64.minusMonths((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(writer54, (org.joda.time.ReadablePartial) localDate64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1009126389728L) + "'", long48 == (-1009126389728L));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate68);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        java.lang.String str5 = timeOfDay3.toString();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        long long19 = dateTimeZone16.nextTransition((long) 1);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 13, dateTimeZone16);
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime7.era();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime24.setDate((long) (short) -1);
        mutableDateTime7.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = localDate34.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = localDate34.getChronology();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(chronology38);
        org.joda.time.DurationField durationField40 = durationFieldType28.getField(chronology38);
        mutableDateTime24.add(durationFieldType28, 11);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.LocalDate localDate51 = localDate45.withDayOfMonth(13);
        org.joda.time.DateTime dateTime52 = localDate45.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology53 = localDate45.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone60 = dateMidnight59.getZone();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone60);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = dateMidnight67.getZone();
        org.joda.time.DateMidnight dateMidnight69 = yearMonthDay62.toDateMidnight(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay62.toDateMidnight();
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay62.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateMidnight dateMidnight73 = yearMonthDay62.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay62.minusMonths(8);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay62.minusMonths(1970);
        long long79 = chronology53.set((org.joda.time.ReadablePartial) yearMonthDay77, (long) 79321);
        org.joda.time.DateTimeField dateTimeField80 = chronology53.yearOfCentury();
        org.joda.time.DurationField durationField81 = durationFieldType28.getField(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay83 = timeOfDay3.withFieldAdded(durationFieldType28, 32820000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T01:01:00.000" + "'", str5, "T01:01:00.000");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(yearMonthDay77);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-3535142320679L) + "'", long79 == (-3535142320679L));
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.year();
        mutableDateTime1.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36, periodType40);
        int int42 = dateMidnight36.getMillisOfSecond();
        boolean boolean43 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.plusDays(150);
        int int46 = dateMidnight45.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withYearOfCentury((-96608));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -96608 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        java.lang.String str5 = localTime4.toString();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 10);
        int int8 = mutablePeriod7.getWeeks();
        int int9 = mutablePeriod7.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter10 = null;
        java.lang.String str11 = mutablePeriod7.toString(periodFormatter10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes((int) ' ');
        mutablePeriod7.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalTime localTime15 = localTime4.minus((org.joda.time.ReadablePeriod) period13);
        int int16 = period13.getDays();
        org.joda.time.Period period18 = period13.minusWeeks(893);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "10:06:01.510" + "'", str5, "10:06:01.510");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.010S" + "'", str11, "PT0.010S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.year();
        mutableDateTime1.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36, periodType40);
        int int42 = dateMidnight36.getMillisOfSecond();
        boolean boolean43 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.withYearOfCentury(31);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight36.minus((long) 292269054);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.dayOfMonth();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime18.set(dateTimeFieldType21, 1);
        mutableDateTime18.addHours((-1));
        mutableDateTime18.addDays(31);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, readableDuration38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateMidnight37);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration40, (int) 'a');
        mutableDateTime18.setMillisOfSecond(143);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DurationField durationField56 = chronology54.weekyears();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = chronology54.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) durationField16, dateTimeZone58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(5);
        org.joda.time.DateMidnight.Property property9 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight2.getZone();
        int int11 = dateMidnight2.getMonthOfYear();
        org.joda.time.DateMidnight.Property property12 = dateMidnight2.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(975);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay27.plusYears(0);
        java.lang.String str35 = yearMonthDay34.toString();
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        int int38 = dateTime36.getDayOfYear();
        org.joda.time.DateTime dateTime40 = dateTime36.withWeekOfWeekyear(38);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868428300,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=700,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0023-06-08" + "'", str35, "0023-06-08");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 159 + "'", int38 == 159);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category10, locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale12);
        int int17 = calendar16.getWeekYear();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getMinimalDaysInFirstWeek();
        calendar18.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        java.time.ZoneId zoneId31 = timeZone30.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight36.getZone();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        java.time.ZoneId zoneId39 = timeZone38.toZoneId();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        boolean boolean41 = timeZone30.hasSameRules(timeZone38);
        calendar18.setTimeZone(timeZone38);
        calendar16.setTimeZone(timeZone38);
        java.time.ZoneId zoneId44 = timeZone38.toZoneId();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone(zoneId44);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone47);
        boolean boolean49 = timeZone47.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = timeZone47.getDisplayName(true, 969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 969");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513971725,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645513971725,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(zoneId44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645513971725,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=725,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        int int8 = calendar0.getActualMinimum((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getGreatestMinimum(599);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 599");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=51,MILLISECOND=807,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(5);
        org.joda.time.DateMidnight.Property property9 = dateMidnight2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight2.getZone();
        int int11 = dateMidnight2.getMonthOfYear();
        org.joda.time.DateMidnight.Property property12 = dateMidnight2.era();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        int int24 = property15.compareTo((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTime23.getSecondOfDay();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.PeriodType periodType29 = periodType27.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 4, periodType29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateTime23, periodType29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645567551849");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 79551 + "'", int25 == 79551);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        mutableDateTime1.setTime((long) 46);
        mutableDateTime1.setSecondOfMinute(4);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.minuteOfDay();
        org.joda.time.Period period15 = org.joda.time.Period.years(231);
        int int16 = period15.getMinutes();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = localDate23.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        org.joda.time.DurationField durationField29 = chronology27.weekyears();
        org.joda.time.DurationField durationField30 = durationFieldType17.getField(chronology27);
        int int31 = period15.get(durationFieldType17);
        org.joda.time.Period period33 = period15.withMinutes(0);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period15, 21);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds((int) '4');
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        int int12 = mutablePeriod11.getWeeks();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.TimeOfDay.Property property14 = timeOfDay7.minuteOfHour();
        int int15 = timeOfDay7.getHourOfDay();
        int int16 = timeOfDay7.getHourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = property15.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay17 = property15.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay18 = property15.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime20.setDate((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate31 = localDate25.withDayOfMonth(13);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology33 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
        long long43 = dateTimeZone40.nextTransition((long) 1);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 13, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48);
        int int50 = period49.size();
        java.lang.String str51 = period49.toString();
        org.joda.time.Period period53 = period49.plusMonths(11);
        boolean boolean54 = dateTime44.equals((java.lang.Object) period53);
        int[] intArray57 = chronology33.get((org.joda.time.ReadablePeriod) period53, (long) 7, (long) ' ');
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay18.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime60 = yearMonthDay59.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0S" + "'", str51, "PT0S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.lang.String str7 = locale5.getDisplayScript();
        java.lang.String str8 = locale5.getDisplayCountry();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Germania" + "'", str8, "Germania");
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        java.lang.String str6 = property3.getAsString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology16.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) str6, chronology16);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder4.setDate(28, 10, 0);
        java.util.Locale locale9 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder12 = builder8.setLenient(true);
        java.util.Calendar calendar13 = builder12.build();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar13.getActualMaximum(851);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 851");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.weekOfWeekyear();
        int int26 = mutableDateTime1.getYear();
        mutableDateTime1.setMillis((long) 32769);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(75841097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75841097 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        boolean boolean16 = timeZone15.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        int int27 = localDate23.getWeekyear();
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 267, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyear();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = dateTimeField31.getAsShortText((int) (byte) 0, locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone15, locale33);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale.Builder builder37 = builder5.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645513972123,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=52,MILLISECOND=123,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ita" + "'", str36, "ita");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.setMinuteOfDay(4);
        int int29 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        boolean boolean5 = dateTimeFormatter3.isOffsetParsed();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime7.set(dateTimeFieldType10, 1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology26 = localDate18.getChronology();
        mutablePeriod14.add((long) '4', chronology26);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutableDateTime7.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.add((int) (byte) 100);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        mutableDateTime35.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime35.set(dateTimeFieldType38, 1);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, readableDuration55);
        org.joda.time.Duration duration57 = period51.toDurationTo((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Instant instant58 = instant44.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval59 = interval43.withDurationAfterStart((org.joda.time.ReadableDuration) duration57);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 10);
        int int63 = mutablePeriod62.getWeeks();
        mutablePeriod62.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod62.setYears(53);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime35.toMutableDateTime(dateTimeZone77);
        org.joda.time.Period period83 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period83);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime33.millisOfDay();
        java.util.Locale locale87 = java.util.Locale.ROOT;
        int int88 = property86.getMaximumTextLength(locale87);
        java.util.Set<java.lang.Character> charSet89 = locale87.getExtensionKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter3.withLocale(locale87);
        java.lang.Appendable appendable91 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable91, (-61036588800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Period period18 = period16.minusMillis(13);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 266);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32);
        org.joda.time.Duration duration34 = period28.toDurationTo((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Instant instant35 = instant21.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        boolean boolean51 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.era();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 'a', dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate59, (org.joda.time.ReadablePartial) localDate62);
        org.joda.time.LocalDate localDate65 = localDate59.withDayOfMonth(13);
        org.joda.time.DateTime dateTime66 = localDate59.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology67 = localDate59.getChronology();
        mutablePeriod55.add((long) '4', chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.clockhourOfDay();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType73 = periodType72.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate((long) 'a', dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 'a', dateTimeZone81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate79, (org.joda.time.ReadablePartial) localDate82);
        org.joda.time.LocalDate localDate85 = localDate79.withDayOfMonth(13);
        org.joda.time.DateTime dateTime86 = localDate79.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology87 = localDate79.getChronology();
        mutablePeriod75.add((long) '4', chronology87);
        org.joda.time.Period period89 = new org.joda.time.Period((-1L), 1L, periodType73, chronology87);
        int[] intArray91 = chronology67.get((org.joda.time.ReadablePeriod) period89, (long) 8);
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadablePeriod) period89);
        long long93 = interval92.toDurationMillis();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[8]");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 2L + "'", long93 == 2L);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withSecondOfMinute(19721);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19721 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.Chronology chronology3 = localDate1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(chronology3);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = chronology3.getDateTimeMillis((int) ' ', 169, 425, 79321);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 169 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        mutableDateTime12.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime12.set(dateTimeFieldType15, 1);
        org.joda.time.LocalDate.Property property18 = localDate10.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate21 = localDate19.withWeekOfWeekyear(4);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        int int23 = calendar22.getMinimalDaysInFirstWeek();
        calendar22.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromCalendarFields(calendar22);
        org.joda.time.Period period29 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType31 = periodType30.withSecondsRemoved();
        org.joda.time.Period period32 = period29.withPeriodType(periodType30);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) yearMonthDay28, periodType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str35 = dateTimeFieldType34.toString();
        int int36 = yearMonthDay28.indexOf(dateTimeFieldType34);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay28.withDayOfMonth(20);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        org.joda.time.DateMidnight dateMidnight53 = yearMonthDay46.toDateMidnight(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay46.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay46.withYear(266);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 'a', dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 'a', dateTimeZone66);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate64, (org.joda.time.ReadablePartial) localDate67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = null;
        boolean boolean70 = localDate67.isSupported(dateTimeFieldType69);
        org.joda.time.Chronology chronology71 = localDate67.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.minutes();
        org.joda.time.DurationField durationField73 = chronology71.weekyears();
        org.joda.time.Period period74 = new org.joda.time.Period(0L, chronology71);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType60, chronology71);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay56.withChronologyRetainFields(chronology71);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str81 = dateTimeZone79.getNameKey((-1L));
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(dateTimeZone79);
        org.joda.time.DateTime dateTime83 = yearMonthDay56.toDateTimeAtCurrentTime(dateTimeZone79);
        org.joda.time.Interval interval84 = yearMonthDay28.toInterval(dateTimeZone79);
        long long86 = dateTimeZone79.previousTransition(1645434420000L);
        int int88 = dateTimeZone79.getOffsetFromLocal(1645513750063L);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime(obj0, dateTimeZone79);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-61427868427605,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=52,MILLISECOND=395,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "year" + "'", str35, "year");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645434420000L + "'", long86 == 1645434420000L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 139980000 + "'", int88 == 139980000);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime46 = instant45.toMutableDateTime();
        mutableDateTime46.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime46.set(dateTimeFieldType49, 1);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, readableDuration66);
        org.joda.time.Duration duration68 = period62.toDurationTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Instant instant69 = instant55.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Interval interval70 = interval54.withDurationAfterStart((org.joda.time.ReadableDuration) duration68);
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration68);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime46.dayOfMonth();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime46.year();
        mutableDateTime46.setMillis((-259200000L));
        int int76 = mutableDateTime46.getMinuteOfDay();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) mutableDateTime46);
        mutableDateTime46.setMillis((long) 868);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight85 = property83.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plusWeeks(32769);
        org.joda.time.DateMidnight.Property property88 = dateMidnight87.era();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType90 = periodType89.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.centuries();
        int int92 = periodType89.indexOf(durationFieldType91);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight87.withFieldAdded(durationFieldType91, 840);
        org.joda.time.DateMidnight.Property property95 = dateMidnight94.centuryOfEra();
        org.joda.time.DateMidnight.Property property96 = dateMidnight94.monthOfYear();
        boolean boolean97 = mutableDateTime46.isBefore((org.joda.time.ReadableInstant) dateMidnight94);
        mutableDateTime46.setMinuteOfDay(941);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 893 + "'", int76 == 893);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology9);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekOfWeekyear(19);
        org.joda.time.LocalDate.Property property14 = localDate13.weekOfWeekyear();
        int int15 = localDate13.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds((int) '#');
        int int5 = mutablePeriod1.getHours();
        org.joda.time.Period period6 = mutablePeriod1.toPeriod();
        int int7 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime11.withHourOfDay(349);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 349 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = property7.getAsText(locale9);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale14);
        java.lang.String str16 = locale13.getDisplayCountry(locale14);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale9, locale14, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19);
        java.lang.String[] strArray24 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        boolean boolean32 = strSet25.remove((java.lang.Object) readableDuration30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet25);
        java.lang.String[] strArray36 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        boolean boolean44 = strSet37.remove((java.lang.Object) readableDuration42);
        java.util.stream.Stream<java.lang.String> strStream45 = strSet37.parallelStream();
        java.lang.String[] strArray48 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54);
        boolean boolean56 = strSet49.remove((java.lang.Object) readableDuration54);
        int int57 = strSet49.size();
        boolean boolean58 = strSet37.addAll((java.util.Collection<java.lang.String>) strSet49);
        strSet37.clear();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone73 = dateMidnight72.getZone();
        org.joda.time.DateMidnight dateMidnight74 = yearMonthDay67.toDateMidnight(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight75 = yearMonthDay67.toDateMidnight();
        java.lang.String[] strArray78 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1L, dateTimeZone82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight83, readableDuration84);
        boolean boolean86 = strSet79.remove((java.lang.Object) readableDuration84);
        java.util.stream.Stream<java.lang.String> strStream87 = strSet79.parallelStream();
        boolean boolean88 = yearMonthDay67.equals((java.lang.Object) strSet79);
        boolean boolean89 = strSet37.removeAll((java.util.Collection<java.lang.String>) strSet79);
        boolean boolean90 = strSet25.addAll((java.util.Collection<java.lang.String>) strSet37);
        java.lang.Object[] objArray91 = strSet37.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Deutsch (Deutschland)" + "'", str12, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Taiwan" + "'", str16, "Taiwan");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strStream87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[]");
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        int int5 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property4.setCopy(287);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusHours(23);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.withSecondOfMinute(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999 + "'", int5 == 999);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        java.lang.String str6 = property3.getAsString();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        int int12 = property3.getDifference((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.DateMidnight.Property property13 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundHalfCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(126, 0, 893, 0, 16, 231, 2332, 11);
        mutablePeriod23.addHours(35213769);
        java.lang.String str26 = mutablePeriod23.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, readableDuration38);
        org.joda.time.Duration duration40 = period34.toDurationTo((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Instant instant41 = instant27.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 'a', dateTimeZone47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate45, (org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53);
        org.joda.time.Duration duration55 = period49.toDurationTo((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Instant instant56 = instant42.minus((org.joda.time.ReadableDuration) duration55);
        boolean boolean57 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration55);
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight14.minus((org.joda.time.ReadableDuration) duration55);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P126Y893WT35213785H231M2332.011S" + "'", str26, "P126Y893WT35213785H231M2332.011S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        calendar0.set(100, 287, 9, 0, 12, 1961);
        java.util.Date date18 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date18.setMonth((int) (short) 1);
        java.util.Date date26 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date26.setMonth((int) (short) 1);
        java.util.Date date34 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date34.setMonth((int) (short) 1);
        boolean boolean37 = date26.before(date34);
        int int38 = date26.getHours();
        boolean boolean39 = date18.before(date26);
        calendar0.setTime(date18);
        date18.setMonth(79315);
        int int43 = date18.getTimezoneOffset();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1731754200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Aug 15 13:10:00 GMT 8524");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime6.plusSeconds(4);
        int int11 = dateTime6.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        int int14 = dateTime13.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMonths((-800321));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime16.withHourOfDay(49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        int int9 = period7.get(durationFieldType8);
        boolean boolean10 = localTime0.isSupported(durationFieldType8);
        org.joda.time.Period period15 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period16 = new org.joda.time.Period();
        org.joda.time.Period period18 = period16.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean20 = period18.isSupported(durationFieldType19);
        org.joda.time.Period period22 = period15.withFieldAdded(durationFieldType19, 0);
        org.joda.time.LocalTime localTime23 = localTime0.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = period22.toPeriod();
        org.joda.time.Days days25 = period24.toStandardDays();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(days25);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.lang.String str29 = locale5.getLanguage();
        java.util.Set<java.lang.Character> charSet30 = locale5.getExtensionKeys();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 10);
        int int33 = mutablePeriod32.getSeconds();
        mutablePeriod32.addHours((int) (short) 0);
        mutablePeriod32.clear();
        org.joda.time.Period period37 = new org.joda.time.Period();
        org.joda.time.Period period39 = period37.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean41 = period39.isSupported(durationFieldType40);
        java.lang.String str42 = durationFieldType40.toString();
        int int43 = mutablePeriod32.get(durationFieldType40);
        int int44 = mutablePeriod32.getMillis();
        int int45 = mutablePeriod32.getYears();
        int int46 = mutablePeriod32.getHours();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone55.isLocalDateTimeGap(localDateTime57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(52, 11, 16, dateTimeZone55);
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 'a', dateTimeZone65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate63, (org.joda.time.ReadablePartial) localDate66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight70, readableDuration71);
        org.joda.time.Duration duration73 = period67.toDurationTo((org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.Instant instant74 = instant60.minus((org.joda.time.ReadableDuration) duration73);
        mutablePeriod32.setPeriod((org.joda.time.ReadableInstant) dateMidnight59, (org.joda.time.ReadableInstant) instant74);
        org.joda.time.LocalDate localDate76 = dateMidnight59.toLocalDate();
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period78 = new org.joda.time.Period((java.lang.Object) charSet30, chronology77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyears" + "'", str42, "weekyears");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale locale8 = new java.util.Locale("de-DE", "10:02:54.209", "gen");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withLocale(locale8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withZone(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType21 = periodType20.withSecondsRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableInstant) dateMidnight17, periodType21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight17.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDate localDate25 = dateMidnight17.toLocalDate();
        org.joda.time.DateMidnight.Property property26 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight17.plusWeeks(451);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean35 = interval31.contains((org.joda.time.ReadableInterval) interval34);
        org.joda.time.MutableInterval mutableInterval36 = interval31.toMutableInterval();
        org.joda.time.Duration duration37 = mutableInterval36.toDuration();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight28.withDurationAdded((org.joda.time.ReadableDuration) duration37, 722);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = dateTimeFormatter9.print((org.joda.time.ReadableInstant) dateMidnight39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "de-de_10:02:54.209_gen");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String[] strArray9 = new java.lang.String[] { "Taiwan", "weekyear", "weekyear", "PT0S", "gen", "PT0S", "PT0S" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.util.Iterator<java.lang.String> strItor12 = strSet10.iterator();
        strSet10.clear();
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet10.spliterator();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet10.stream();
        java.util.Iterator<java.lang.String> strItor16 = strSet10.iterator();
        java.util.Set<java.lang.String> strSet17 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate27 = localDate21.withDayOfMonth(13);
        org.joda.time.DateTime dateTime28 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology29 = localDate21.getChronology();
        org.joda.time.DurationField durationField30 = durationFieldType18.getField(chronology29);
        boolean boolean31 = strSet17.equals((java.lang.Object) durationField30);
        boolean boolean32 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet17);
        boolean boolean33 = locale1.equals((java.lang.Object) boolean32);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-1));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDate1.getFieldTypes();
        org.joda.time.LocalDate.Property property3 = localDate1.centuryOfEra();
        int int4 = localDate1.getCenturyOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = null;
        org.joda.time.format.DateTimeParser dateTimeParser6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDate1.toString(dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property42.addWrapFieldToCopy(36023888);
        org.joda.time.YearMonthDay yearMonthDay46 = property42.addToCopy((-9054));
        int int47 = property42.get();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) instant1);
        org.joda.time.Period period3 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.Period period6 = period3.withPeriodType(periodType4);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = period3.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime46 = instant45.toMutableDateTime();
        mutableDateTime46.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime46.set(dateTimeFieldType49, 1);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, readableDuration66);
        org.joda.time.Duration duration68 = period62.toDurationTo((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.Instant instant69 = instant55.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Interval interval70 = interval54.withDurationAfterStart((org.joda.time.ReadableDuration) duration68);
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration68);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime46.dayOfMonth();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime46.year();
        mutableDateTime46.setMillis((-259200000L));
        int int76 = mutableDateTime46.getMinuteOfDay();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology78);
        org.joda.time.DateTimeField dateTimeField81 = localDate79.getField(1);
        java.lang.String str83 = dateTimeField81.getAsShortText((long) '4');
        long long86 = dateTimeField81.add(100L, 0);
        long long89 = dateTimeField81.getDifferenceAsLong(9056880000000L, (long) 3);
        int int90 = mutableDateTime46.get(dateTimeField81);
        org.joda.time.DurationField durationField91 = dateTimeField81.getRangeDurationField();
        long long93 = durationField91.getValueAsLong(647L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 893 + "'", int76 == 893);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "gen" + "'", str83, "gen");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L + "'", long86 == 100L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 3443L + "'", long89 == 3443L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 12 + "'", int90 == 12);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        int int7 = mutableDateTime1.getYearOfEra();
        org.joda.time.Period period9 = org.joda.time.Period.years(231);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period9, 52);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        int int3 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.Interval interval9 = property6.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 1961, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType1.getField(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(4320000000L, chronology11);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property18 = localTime14.property(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.LocalTime localTime17 = localTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (int) '4');
        org.joda.time.Period period19 = period15.withYears((int) '#');
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.withMinuteOfHour(513);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 513 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("PT9S");
        java.util.Locale.Builder builder4 = builder2.setVariant("years");
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusDays(17);
        org.joda.time.DateTime dateTime11 = dateMidnight10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = localDate17.getChronology();
        org.joda.time.LocalDate localDate23 = localDate17.minusDays(100);
        int int24 = localDate17.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight25 = localDate17.toDateMidnight();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight25.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = localDate50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DurationField durationField56 = chronology54.weekyears();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology54);
        mutablePeriod42.setPeriod((long) (-1), (long) '4', chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.dayOfYear();
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale62 = java.util.Locale.getDefault(category61);
        java.lang.String str63 = dateTimeField59.getAsText(34, locale62);
        java.util.Locale.Builder builder64 = builder2.setLocale(locale62);
        java.lang.String str65 = locale62.getVariant();
        java.util.Set<java.lang.String> strSet66 = locale62.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "34" + "'", str63, "34");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Tempo universale coordinato");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        java.lang.String str3 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.MutableInterval mutableInterval7 = interval2.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.Period period16 = period14.withMinutes(31);
        org.joda.time.Period period18 = period16.plusMinutes(20);
        org.joda.time.Period period20 = period16.withMonths(57);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime22.setDate((long) (short) -1);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean26 = interval2.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        int int30 = dateTimeField28.getLeapAmount(1645513919179L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = localDate8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.minutes();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DurationField durationField15 = durationFieldType2.getField(chronology12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = localDate21.getChronology();
        org.joda.time.DurationField durationField26 = durationFieldType2.getField(chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, (long) 35, chronology25);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology25);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("Deutsch (Deutschland)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Deutsch (Deutschland)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval8 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Instant instant23 = instant9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval8.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration22);
        mutablePeriod1.setSeconds(402);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("0266-02-23");
        java.lang.String str2 = locale1.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight8, periodType12);
        int int14 = dateMidnight8.getMillisOfSecond();
        int int15 = dateMidnight8.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate24 = localDate18.withDayOfMonth(13);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight31 = property29.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = locale34.getDisplayCountry(locale35);
        java.lang.String str38 = dateTimeField32.getAsShortText(126, locale34);
        java.util.Calendar calendar39 = dateMidnight8.toCalendar(locale34);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale41);
        java.lang.String str43 = locale40.getDisplayCountry(locale41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = localDate45.getField(1);
        java.lang.String str48 = dateTimeField47.getName();
        boolean boolean49 = dateTimeField47.isLenient();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDate55.isSupported(dateTimeFieldType57);
        int int59 = localDate55.getWeekyear();
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDate55, locale61);
        java.lang.String str63 = locale41.getDisplayVariant(locale61);
        java.lang.String str64 = locale34.getDisplayVariant(locale61);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale1.getDisplayName(locale61);
        java.lang.String str67 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Taiwan" + "'", str37, "Taiwan");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "126" + "'", str38, "126");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-53580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Taiwan" + "'", str43, "Taiwan");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "monthOfYear" + "'", str48, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc6d4" + "'", str62, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.Chronology chronology14 = mutableDateTime13.getChronology();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10);
        int int19 = mutablePeriod18.getWeeks();
        int int20 = mutablePeriod18.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter21 = null;
        java.lang.String str22 = mutablePeriod18.toString(periodFormatter21);
        org.joda.time.Period period24 = org.joda.time.Period.minutes((int) ' ');
        mutablePeriod18.add((org.joda.time.ReadablePeriod) period24);
        int[] intArray26 = period24.getValues();
        int[] intArray28 = chronology14.get((org.joda.time.ReadablePeriod) period24, 32769L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.010S" + "'", str22, "PT0.010S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 32, 0, 0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 32, 769]");
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.Chronology chronology3 = localDate1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.centuries();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.millis();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10);
        int int19 = mutablePeriod18.getWeeks();
        int int20 = mutablePeriod18.size();
        org.joda.time.Period period25 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period26 = new org.joda.time.Period();
        org.joda.time.Period period28 = period26.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean30 = period28.isSupported(durationFieldType29);
        org.joda.time.Period period32 = period25.withFieldAdded(durationFieldType29, 0);
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        int int34 = period32.getMinutes();
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) period32);
        org.joda.time.PeriodType periodType36 = period32.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((java.lang.Object) durationField16, periodType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        java.lang.Object obj3 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime5.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology22 = localDate14.getChronology();
        mutablePeriod10.add((long) '4', chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime5, chronology22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj3, chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(79320, 1970, 75901963, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.setTimeInMillis((long) (byte) 1);
        java.util.Date date4 = calendar0.getTime();
        calendar0.set(16, 0);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.set(36023888, 4, 23, 1, 14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = calendar0.isSet(79464093);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 79464093");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=36023888,MONTH=4,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=23,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=1,MINUTE=14,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 10);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.LocalTime localTime17 = localTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (int) '4');
        org.joda.time.Period period19 = period15.withYears((int) '#');
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay1.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        int int22 = property21.get();
        org.joda.time.TimeOfDay timeOfDay24 = property21.addWrapFieldToCopy(98);
        java.lang.String str25 = property21.getName();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "secondOfMinute" + "'", str25, "secondOfMinute");
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(1970);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType7, chronology9);
        org.joda.time.Period period12 = period10.minusHours(1);
        int int13 = period12.getSeconds();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight4.withPeriodAdded((org.joda.time.ReadablePeriod) period12, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = period12.getValue((-50399));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -50399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtCurrentTime(dateTimeZone6);
        int int8 = instant3.compareTo((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime7.withChronology(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(287, 79459491, 79320, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79459491 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant28 = instant14.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight13.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight13.withDurationAdded(1036800010L, 22);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight35 = property33.addToCopy((long) 86399);
        org.joda.time.DateTime dateTime36 = dateMidnight35.toDateTime();
        long long37 = dateTime36.getMillis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 7487629620000L + "'", long37 == 7487629620000L);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusHours(287);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minusMillis(16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(150);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury(2332);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2332 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withYearOfEra(16);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.plusDays((int) 'x');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis((long) 1961);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusWeeks((int) 'u');
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withMonthOfYear(80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 80 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withSecondOfMinute(20);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(126);
        int int16 = dateTime15.getMonthOfYear();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond(32);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.addSeconds(100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.Duration duration12 = period6.toDurationTo((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate localDate28 = localDate22.withDayOfMonth(13);
        org.joda.time.DateTime dateTime29 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology30 = localDate22.getChronology();
        mutablePeriod18.add((long) '4', chronology30);
        org.joda.time.Period period32 = new org.joda.time.Period((-1L), 1L, periodType16, chronology30);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.centuries();
        int int36 = periodType33.indexOf(durationFieldType35);
        boolean boolean37 = periodType16.isSupported(durationFieldType35);
        org.joda.time.Chronology chronology38 = null;
        boolean boolean39 = durationFieldType35.isSupported(chronology38);
        boolean boolean40 = duration12.equals((java.lang.Object) boolean39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.withYearOfEra(1322);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType52 = periodType51.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate localDate64 = localDate58.withDayOfMonth(13);
        org.joda.time.DateTime dateTime65 = localDate58.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology66 = localDate58.getChronology();
        mutablePeriod54.add((long) '4', chronology66);
        org.joda.time.Period period68 = new org.joda.time.Period((-1L), 1L, periodType52, chronology66);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.centuries();
        int int72 = periodType69.indexOf(durationFieldType71);
        boolean boolean73 = periodType52.isSupported(durationFieldType71);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime48, periodType52);
        java.lang.String str75 = duration12.toString();
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0S" + "'", str75, "PT0S");
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = localDate27.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType8.getField(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter4.withChronology(chronology31);
        java.lang.StringBuffer stringBuffer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(stringBuffer34, 3065385600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 10);
        int int45 = mutablePeriod44.getSeconds();
        mutablePeriod44.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType48 = mutablePeriod44.getPeriodType();
        org.joda.time.PeriodType periodType49 = periodType48.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(79318959, 54, (int) 'x', 13, 0, 79459491, 20, 24, periodType48);
        org.joda.time.PeriodType periodType51 = periodType48.withYearsRemoved();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYear(17);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.plusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology67 = localDateTime66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeFormatter33, periodType48, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withMillisOfDay(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusDays((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localDateTime6.isSupported(durationFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime6.minusMillis(79321);
        int int18 = localDateTime6.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        int int24 = period23.size();
        java.lang.String str25 = period23.toString();
        org.joda.time.Period period27 = period23.plusMonths(11);
        org.joda.time.Period period29 = period27.withHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 0);
        org.joda.time.MutablePeriod mutablePeriod32 = period29.toMutablePeriod();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 93 + "'", int18 == 93);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Sun Dec 28 00:00:00 UTC 6611203");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) 0);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusDays((int) (short) -1);
        int int6 = yearMonthDay3.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = localDate13.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DurationField durationField19 = chronology17.weekyears();
        org.joda.time.Period period20 = new org.joda.time.Period(0L, chronology17);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay3.withChronologyRetainFields(chronology17);
        boolean boolean22 = locale1.equals((java.lang.Object) yearMonthDay3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod1, readableInstant15);
        org.joda.time.DateTime dateTime17 = interval16.getStart();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime17.withField(dateTimeFieldType18, 83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime1.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.DateTime dateTime17 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = localDate10.getChronology();
        mutablePeriod6.add((long) '4', chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime1, chronology18);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.weekyear();
        mutableDateTime1.setSecondOfDay((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.minusDays(17);
        org.joda.time.DateTime dateTime31 = dateMidnight30.toDateTimeISO();
        int int32 = dateTime31.getYearOfEra();
        org.joda.time.DateTime dateTime34 = dateTime31.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime37 = dateTime31.withField(dateTimeFieldType35, 4);
        mutableDateTime1.set(dateTimeFieldType35, (int) '#');
        java.lang.String str40 = dateTimeFieldType35.toString();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1969 + "'", int32 == 1969);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "secondOfDay" + "'", str40, "secondOfDay");
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        java.util.Date date6 = new java.util.Date(32770, 2022, 32770, 13, 20, 20);
        int int7 = date6.getSeconds();
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        java.util.Date date21 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date21.setMonth((int) (short) 1);
        boolean boolean24 = date13.before(date21);
        boolean boolean25 = date6.after(date13);
        date6.setTime((long) 5070);
        java.time.Instant instant28 = date6.toInstant();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:05 GMT 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.dayOfMonth();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval7 = property4.toInterval();
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.Chronology chronology9 = interval7.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 1961, chronology9);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime14 = property11.addNoWrapToCopy(46);
        int int15 = localTime14.getSecondOfMinute();
        org.joda.time.LocalTime localTime17 = localTime14.minusMinutes(79472685);
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 47 + "'", int15 == 47);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        mutableDateTime12.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime12.set(dateTimeFieldType15, 1);
        org.joda.time.LocalDate.Property property18 = localDate10.property(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property19 = localDate10.dayOfWeek();
        org.joda.time.Chronology chronology20 = localDate10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1035522776L, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setSecondOfMinute(868);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 868 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        boolean boolean16 = date5.before(date13);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date5);
        date5.setSeconds(70);
        java.lang.String str20 = date5.toGMTString();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromDateFields(date5);
        date5.setTime((long) 79716);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:01:19 GMT 1970");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "15 Feb 1915 13:11:10 GMT" + "'", str20, "15 Feb 1915 13:11:10 GMT");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval8 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Instant instant23 = instant9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval8.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration22);
        mutablePeriod1.addSeconds(70);
        mutablePeriod1.addWeeks(1020000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(interval24);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        java.lang.String str12 = localDateTime10.toString("+38:53");
        java.lang.String str13 = localDateTime10.toString();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+38:53" + "'", str12, "+38:53");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0017-01-10T00:17:00.000" + "'", str13, "0017-01-10T00:17:00.000");
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 10);
        int int15 = mutablePeriod14.getSeconds();
        mutablePeriod14.addHours((int) (short) 0);
        org.joda.time.PeriodType periodType18 = mutablePeriod14.getPeriodType();
        int int19 = mutablePeriod14.getMillis();
        org.joda.time.LocalDate localDate20 = localDate5.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod14.setValue(1915, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1915");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(53581961);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53581961 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(256, 431, (-1), 402);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.parse("20:37:07.437", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        calendar0.setTimeZone(timeZone7);
        boolean boolean9 = calendar0.isWeekDateSupported();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone28);
        long long31 = dateTimeZone28.nextTransition((long) 1);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 13, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        int int38 = period37.size();
        java.lang.String str39 = period37.toString();
        org.joda.time.Period period41 = period37.plusMonths(11);
        boolean boolean42 = dateTime32.equals((java.lang.Object) period41);
        int[] intArray45 = chronology21.get((org.joda.time.ReadablePeriod) period41, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.DateTimeField dateTimeField47 = chronology21.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((java.lang.Object) calendar0, periodType10, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.GregorianCalendar");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645513974681,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=54,MILLISECOND=681,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0S" + "'", str39, "PT0S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate14.isSupported(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.minutes();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology18);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 'a', dateTimeZone26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate24, (org.joda.time.ReadablePartial) localDate27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = localDate27.getChronology();
        org.joda.time.DurationField durationField32 = durationFieldType8.getField(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter4.withChronology(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter4.withPivotYear(0);
        java.io.Writer writer36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime39 = localTime37.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime41 = localTime39.plusSeconds(10);
        org.joda.time.LocalTime localTime43 = localTime39.minusSeconds(100);
        org.joda.time.LocalTime localTime45 = localTime43.minusMillis(537);
        int int46 = localTime45.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter35.printTo(writer36, (org.joda.time.ReadablePartial) localTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        int int18 = localDateTime17.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = yearMonthDay18.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) dateMidnight49, periodType53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight49.dayOfYear();
        org.joda.time.DateTime dateTime56 = yearMonthDay18.toDateTime((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = yearMonthDay18.getFieldTypes();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight61 = localDate59.toDateMidnight(dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay18.toDateMidnight(dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withYear(17);
        int[] intArray74 = localDateTime73.getValues();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.plusSeconds(1);
        int int77 = localDateTime73.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = yearMonthDay18.isAfter((org.joda.time.ReadablePartial) localDateTime73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 17 + "'", int77 == 17);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        int int11 = dateMidnight5.getMillisOfSecond();
        int int12 = dateMidnight5.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight28 = property26.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField29 = property26.getField();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale31.getDisplayCountry(locale32);
        java.lang.String str35 = dateTimeField29.getAsShortText(126, locale31);
        java.util.Calendar calendar36 = dateMidnight5.toCalendar(locale31);
        int int37 = dateMidnight5.getEra();
        int int38 = dateMidnight5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Taiwan" + "'", str34, "Taiwan");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "126" + "'", str35, "126");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-53580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime10.withDurationAdded(readableDuration22, 0);
        java.util.Date date25 = localDateTime24.toDate();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.millisOfSecond();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        boolean boolean29 = locale28.hasExtensions();
        java.lang.String str30 = locale28.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = property26.setCopy("10:02:40.110", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"10:02:40.110\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Sun Jan 10 00:17:00 GMT 17");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(32772);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = mutableDateTime17.toDateTime(dateTimeZone31);
        long long38 = dateTimeZone31.convertLocalToUTC(373248000000001969L, false, (-5820001L));
        org.joda.time.DateTime dateTime39 = dateTime15.withZone(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 373247999860021969L + "'", long38 == 373247999860021969L);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int26 = localDateTime25.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfCentury(451);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 451 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868425071,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=54,MILLISECOND=929,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513974929,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=54,MILLISECOND=929,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        int int6 = period4.get(durationFieldType5);
        org.joda.time.MutablePeriod mutablePeriod7 = period4.toMutablePeriod();
        int int8 = period4.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate11, (org.joda.time.ReadablePartial) localDate14);
        org.joda.time.Period period16 = period4.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.withMinutes(1970);
        org.joda.time.Period period20 = period15.plusMillis((int) 'a');
        int int21 = period20.getDays();
        int int22 = period20.getHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = null;
        java.lang.String str24 = period20.toString(periodFormatter23);
        java.lang.String str25 = period20.toString();
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.097S" + "'", str24, "PT0.097S");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.097S" + "'", str25, "PT0.097S");
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.nextTransition((long) 840);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 840L + "'", long3 == 840L);
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.LocalDate.Property property14 = localDate11.centuryOfEra();
        int int15 = localDate11.getDayOfWeek();
        java.util.Date date16 = localDate11.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate11.withWeekOfWeekyear(976);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 976 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Sep 24 00:00:00 GMT 1969");
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(dateTimeZone0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(169, 83, 3277017, 79416419, 47400000, 126, 451);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79416419 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(50400000L);
        int int15 = localDateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateTime dateTime8 = dateMidnight4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateMidnight4.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(47400000);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType11 = periodType10.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate23 = localDate17.withDayOfMonth(13);
        org.joda.time.DateTime dateTime24 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = localDate17.getChronology();
        mutablePeriod13.add((long) '4', chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((-1L), 1L, periodType11, chronology25);
        org.joda.time.PeriodType periodType28 = periodType11.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(231, 6, 7070, 2022, 44, 61, 79429672, 1961, periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("10:02:14.181");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"10:02:14.181\" is malformed at \":02:14.181\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.DateTime dateTime17 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = localDate10.getChronology();
        mutablePeriod6.add((long) '4', chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period((-1L), 1L, periodType4, chronology18);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType22 = periodType21.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        int int24 = periodType21.indexOf(durationFieldType23);
        boolean boolean25 = periodType4.isSupported(durationFieldType23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 32770, periodType4);
        java.lang.String str27 = periodType4.toString();
        org.joda.time.Period period29 = org.joda.time.Period.years(231);
        int int30 = period29.getMinutes();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        boolean boolean40 = localDate37.isSupported(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = localDate37.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DurationField durationField43 = chronology41.weekyears();
        org.joda.time.DurationField durationField44 = durationFieldType31.getField(chronology41);
        int int45 = period29.get(durationFieldType31);
        boolean boolean46 = periodType4.isSupported(durationFieldType31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 'a', dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate50, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        org.joda.time.Chronology chronology57 = localDate53.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        org.joda.time.DurationField durationField59 = chronology57.weekyears();
        org.joda.time.Period period60 = new org.joda.time.Period(0L, chronology57);
        org.joda.time.DurationField durationField61 = durationFieldType31.getField(chronology57);
        long long64 = durationField61.getMillis(24, (long) 327);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[Millis]" + "'", str27, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 75736684800000L + "'", long64 == 75736684800000L);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(454, (int) (short) 0, 19, (int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.toMutablePeriod();
        int int6 = mutablePeriod5.getSeconds();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.Duration duration11 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.add((long) 'x');
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.Interval interval9 = property6.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 1961, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType1.getField(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(4320000000L, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.lang.String str17 = locale14.getDisplayLanguage(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale16);
        // The following exception was thrown during execution in test generation
        try {
            calendar18.setWeekDate(494, 0, 79429672);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 79429672");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str17, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513975249,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=55,MILLISECOND=249,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property18 = localDate9.dayOfWeek();
        org.joda.time.Chronology chronology19 = localDate9.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.halfdays();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        int int8 = date5.getTimezoneOffset();
        int int9 = date5.getHours();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(26, 0, 23, 70);
        org.joda.time.LocalTime localTime17 = localTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 38);
        org.joda.time.LocalTime localTime19 = localTime17.minusMillis(287);
        org.joda.time.LocalTime.Property property20 = localTime17.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime17.getValue((-32));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 13 + "'", int9 == 13);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay2 = property1.getTimeOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int5 = dateTimeField3.get((long) (byte) 100);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.toLanguageTag();
        java.lang.String str10 = dateTimeField3.getAsText(256, locale7);
        org.joda.time.DurationField durationField11 = dateTimeField3.getDurationField();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko-KR" + "'", str9, "ko-KR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "256" + "'", str10, "256");
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        mutablePeriod1.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod1.setYears(53);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        mutablePeriod1.setPeriod((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
        long long43 = dateTimeZone40.nextTransition((long) 1);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone40);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime46 = instant45.toMutableDateTime();
        mutableDateTime46.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime46.set(dateTimeFieldType49, 1);
        org.joda.time.LocalDate.Property property52 = localDate44.property(dateTimeFieldType49);
        boolean boolean53 = localDate30.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        int int56 = localDate55.getDayOfYear();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.months();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType49.getField(chronology57);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 53, (long) 1322, chronology57);
        org.joda.time.Duration duration61 = period60.toStandardDuration();
        mutablePeriod1.add((org.joda.time.ReadableDuration) duration61);
        mutablePeriod1.setYears(975);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 54 + "'", int56 == 54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(duration61);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter2.getPrinter();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withDefaultYear(47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTimeFormatter2.parseDateTime("20:34:08.862");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        int int14 = mutablePeriod13.getSeconds();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod13, (int) (short) -1);
        org.joda.time.LocalDateTime.Property property17 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) localDateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology10.getDateTimeMillis((long) 183, 250, 250, 276, 75193193);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 250 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property14.addNoWrapToCopy(400);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer8, (org.joda.time.ReadablePartial) localTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.joda.time.Period period4 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period5 = new org.joda.time.Period();
        org.joda.time.Period period7 = period5.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean9 = period7.isSupported(durationFieldType8);
        org.joda.time.Period period11 = period4.withFieldAdded(durationFieldType8, 0);
        org.joda.time.Period period13 = period4.minusWeeks(231);
        org.joda.time.Period period15 = period13.plusMillis(53580003);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        mutableDateTime2.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime2.set(dateTimeFieldType5, 1);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        mutablePeriod9.add((long) '4', chronology21);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        mutableDateTime2.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((int) (byte) 100);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime30 = instant29.toMutableDateTime();
        mutableDateTime30.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime30.set(dateTimeFieldType33, 1);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval54 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 10);
        int int58 = mutablePeriod57.getWeeks();
        mutablePeriod57.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod57.setYears(53);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime30.toMutableDateTime(dateTimeZone72);
        org.joda.time.Period period78 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period78);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight(1L, dateTimeZone85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight86.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone89 = dateMidnight88.getZone();
        mutableDateTime82.setZoneRetainFields(dateTimeZone89);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone89);
        org.joda.time.MutableDateTime mutableDateTime92 = mutableDateTime30.toMutableDateTime(dateTimeZone89);
        org.joda.time.LocalDate localDate93 = new org.joda.time.LocalDate(0L, dateTimeZone89);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Instant instant32 = instant18.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Interval interval33 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime9.year();
        mutableDateTime9.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType48 = periodType47.withSecondsRemoved();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, (org.joda.time.ReadableInstant) dateMidnight44, periodType48);
        int int50 = dateMidnight44.getMillisOfSecond();
        boolean boolean51 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) dateMidnight44);
        boolean boolean52 = interval7.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        long long53 = interval7.getEndMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32820000L + "'", long53 == 32820000L);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 2, dateTimeZone6);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(431);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localTime13.toString("2099-02-23T22:03:20.535");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds((int) '#');
        int int5 = mutablePeriod1.getHours();
        mutablePeriod1.setYears(53);
        int int8 = mutablePeriod1.getWeeks();
        int int9 = mutablePeriod1.getWeeks();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.era();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        org.joda.time.DateMidnight dateMidnight29 = property27.roundHalfFloorCopy();
        org.joda.time.Interval interval30 = property27.toInterval();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.minusDays(17);
        org.joda.time.DateTime dateTime37 = dateMidnight36.toDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime37.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight40 = dateTime37.toDateMidnight();
        org.joda.time.LocalDate localDate41 = dateTime37.toLocalDate();
        org.joda.time.Period period46 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate47 = localDate41.minus((org.joda.time.ReadablePeriod) period46);
        boolean boolean48 = interval30.equals((java.lang.Object) period46);
        boolean boolean49 = interval21.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = null;
        boolean boolean58 = localDate55.isSupported(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = localDate55.getChronology();
        org.joda.time.LocalDate localDate61 = localDate55.minusDays(100);
        int int62 = localDate61.getDayOfYear();
        int int63 = localDate61.size();
        org.joda.time.LocalDate.Property property64 = localDate61.centuryOfEra();
        org.joda.time.DateTime dateTime65 = localDate61.toDateTimeAtMidnight();
        org.joda.time.Interval interval66 = interval30.withStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Chronology chronology67 = dateTime65.getChronology();
        mutableDateTime13.setChronology(chronology67);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 267 + "'", int62 == 267);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(chronology67);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add((int) (byte) 100);
        mutableDateTime27.add((long) 2022);
        mutableDateTime27.setMillis(86400001L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.roundHalfCeilingCopy();
        java.lang.String str10 = dateMidnight9.toString();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYear(17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minus((org.joda.time.ReadablePeriod) period29);
        int int31 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.property(dateTimeFieldType34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTime dateTime39 = localDateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        boolean boolean41 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1961-09-02T00:00:00.000+38:53" + "'", str10, "1961-09-02T00:00:00.000+38:53");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant29 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight37.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone38);
        boolean boolean40 = dateTimeZone38.isFixed();
        long long42 = dateTimeZone38.convertUTCToLocal(0L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight45, (org.joda.time.ReadableInstant) dateMidnight48, periodType52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = dateMidnight58.getZone();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(dateTimeZone59);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone59);
        java.lang.String str62 = dateTimeZone59.getID();
        org.joda.time.DateTime dateTime63 = dateMidnight48.toDateTime(dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime65.addMinutes(266);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.centuries();
        int int71 = periodType68.indexOf(durationFieldType70);
        mutableDateTime65.add(durationFieldType70, 2);
        java.lang.String str74 = mutableDateTime65.toString();
        org.joda.time.DateTimeZone dateTimeZone75 = mutableDateTime65.getZone();
        long long77 = dateTimeZone59.getMillisKeepLocal(dateTimeZone75, 2678340000L);
        long long79 = dateTimeZone38.getMillisKeepLocal(dateTimeZone75, 36024000L);
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(dateTimeZone75);
        boolean boolean81 = duration27.equals((java.lang.Object) dateTimeZone75);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 139980000L + "'", long42 == 139980000L);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+38:53" + "'", str62, "+38:53");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2170-01-02T19:19:00.017+38:53" + "'", str74, "2170-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2678340000L + "'", long77 == 2678340000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 36024000L + "'", long79 == 36024000L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale6, locale12, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = property35.getAsText(locale37);
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = locale37.getDisplayName(locale39);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale42);
        java.lang.String str44 = locale41.getDisplayCountry(locale42);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale31, locale37, locale42, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList47);
        java.lang.String[] strArray52 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58);
        boolean boolean60 = strSet53.remove((java.lang.Object) readableDuration58);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet53);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList61);
        java.lang.String[] strArray65 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight70, readableDuration71);
        boolean boolean73 = strSet66.remove((java.lang.Object) readableDuration71);
        java.util.Calendar.Builder builder74 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder78 = builder74.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder82 = builder74.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder86 = builder82.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        boolean boolean87 = strSet66.contains((java.lang.Object) (byte) 10);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet66);
        int int89 = strSet66.size();
        java.util.stream.Stream<java.lang.String> strStream90 = strSet66.parallelStream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch (Deutschland)" + "'", str15, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2" + "'", str38, "2");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Deutsch (Deutschland)" + "'", str40, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(strStream90);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology10.halfdays();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology10.getDateTimeMillis(455, 1324, 32820000, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1324 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.Duration duration17 = period11.toDurationTo((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Instant instant18 = instant4.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration32);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtCurrentTime(dateTimeZone39);
        int int41 = instant36.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 'a', dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 'a', dateTimeZone46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate44, (org.joda.time.ReadablePartial) localDate47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = null;
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = localDate47.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime40.toDateTime(chronology51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.standard();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40, periodType53);
        org.joda.time.DateTime.Property property55 = dateTime40.dayOfMonth();
        org.joda.time.DateTime.Property property56 = dateTime40.minuteOfDay();
        org.joda.time.DateTime dateTime58 = dateTime40.minusHours(6609303);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.roll(11, true);
        calendar0.setTimeInMillis((long) (byte) 100);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withCenturyOfEra(70);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.getID();
        org.joda.time.DateTime dateTime18 = localDate8.toDateTimeAtMidnight(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate8.withWeekOfWeekyear(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+38:53" + "'", str17, "+38:53");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate9 = localDate3.withDayOfMonth(13);
        org.joda.time.DateTime dateTime10 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology11 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        long long21 = dateTimeZone18.nextTransition((long) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 13, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        int int28 = period27.size();
        java.lang.String str29 = period27.toString();
        org.joda.time.Period period31 = period27.plusMonths(11);
        boolean boolean32 = dateTime22.equals((java.lang.Object) period31);
        int[] intArray35 = chronology11.get((org.joda.time.ReadablePeriod) period31, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.DateTimeField dateTimeField37 = chronology11.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 5, chronology11);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType40 = mutablePeriod38.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.005S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.005S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.005S");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        int int10 = mutablePeriod9.getWeeks();
        int int11 = mutablePeriod9.size();
        org.joda.time.LocalTime localTime12 = localTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        int int13 = localTime7.getSecondOfMinute();
        org.joda.time.LocalTime localTime15 = localTime7.minusSeconds((-32));
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = property24.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale30);
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        java.lang.String str33 = dateTimeField27.getAsShortText(126, locale29);
        int int34 = property20.getMaximumShortTextLength(locale29);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfMonth();
        org.joda.time.DurationField durationField41 = property40.getDurationField();
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = property40.getAsText(locale42);
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale42.getDisplayLanguage();
        java.lang.String str46 = locale35.getDisplayScript(locale42);
        java.lang.String str47 = locale29.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet48 = locale35.getUnicodeLocaleKeys();
        java.lang.String str51 = nameProvider17.getShortName(locale35, "0017-01-10T00:17:00.000", "monthOfYear");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider17);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.lang.String str56 = locale54.getDisplayCountry(locale55);
        java.lang.String str59 = nameProvider17.getShortName(locale54, "coreano", "italien");
        org.joda.time.tz.NameProvider nameProvider60 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight69 = property67.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField70 = property67.getField();
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale73);
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.lang.String str76 = dateTimeField70.getAsShortText(126, locale72);
        int int77 = property63.getMaximumShortTextLength(locale72);
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.dayOfMonth();
        org.joda.time.DurationField durationField84 = property83.getDurationField();
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.lang.String str86 = property83.getAsText(locale85);
        java.lang.String str87 = locale85.getISO3Language();
        java.lang.String str88 = locale85.getDisplayLanguage();
        java.lang.String str89 = locale78.getDisplayScript(locale85);
        java.lang.String str90 = locale72.getDisplayScript(locale78);
        java.util.Set<java.lang.String> strSet91 = locale78.getUnicodeLocaleKeys();
        java.lang.String str94 = nameProvider60.getShortName(locale78, "0017-01-10T00:17:00.000", "monthOfYear");
        java.lang.String str97 = nameProvider17.getName(locale78, "20:35:37.537", "Greenwich Mean Time");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = localTime7.toString("0023-06-08T00:00:00.000+38:53/0023-06-09T00:00:00.000+38:53", locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Taiwan" + "'", str32, "Taiwan");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "126" + "'", str33, "126");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2" + "'", str43, "2");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tedesco" + "'", str45, "tedesco");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(nameProvider60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Taiwan" + "'", str75, "Taiwan");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "126" + "'", str76, "126");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2" + "'", str86, "2");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "deu" + "'", str87, "deu");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tedesco" + "'", str88, "tedesco");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645513750159L);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime3.addMinutes(266);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType7 = periodType6.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        int int9 = periodType6.indexOf(durationFieldType8);
        mutableDateTime3.add(durationFieldType8, 2);
        java.lang.String str12 = mutableDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone13 = mutableDateTime3.getZone();
        boolean boolean14 = localTime1.equals((java.lang.Object) mutableDateTime3);
        mutableDateTime3.setMillisOfDay(21);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2170-01-02T19:19:00.017+38:53" + "'", str12, "2170-01-02T19:19:00.017+38:53");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        int int9 = localDate8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        boolean boolean12 = dateMidnight4.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.era();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54 + "'", int9 == 54);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTimeFormatter5.parseDateTime("1971-07-10");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.YearMonthDay yearMonthDay23 = property21.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = localDate29.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.minutes();
        org.joda.time.DurationField durationField35 = chronology33.weekyears();
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay23.withChronologyRetainFields(chronology33);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay23.plusYears(3);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone40.convertLocalToUTC(100L, true);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        org.joda.time.Interval interval45 = yearMonthDay23.toInterval(dateTimeZone40);
        long long48 = dateTimeZone40.convertLocalToUTC(946684800000L, false);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        long long51 = dateTimeZone40.getMillisKeepLocal(dateTimeZone49, 139980183L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868423520,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=56,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3600100L + "'", long43 == 3600100L);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 946688400000L + "'", long48 == 946688400000L);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-3599817L) + "'", long51 == (-3599817L));
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = property10.getAsText(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale6, locale12, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Collection<java.util.Locale> localeCollection25 = null;
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, localeCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList26, filteringMode27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfMonth();
        org.joda.time.DurationField durationField40 = property39.getDurationField();
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = property39.getAsText(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale41.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale46);
        java.lang.String str48 = locale45.getDisplayCountry(locale46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale35, locale41, locale46, locale49 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, localeCollection54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList55, filteringMode56);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap59);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2" + "'", str13, "2");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Deutsch (Deutschland)" + "'", str15, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Taiwan" + "'", str19, "Taiwan");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2" + "'", str42, "2");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Deutsch (Deutschland)" + "'", str44, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Taiwan" + "'", str48, "Taiwan");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(languageRangeList60);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) true);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = dateTimeZone5.getName((long) 2, locale10);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 4, periodType16);
        org.joda.time.Period period18 = period17.negated();
        org.joda.time.LocalTime localTime19 = localTime13.minus((org.joda.time.ReadablePeriod) period18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = localTime13.withMinuteOfHour(47400000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47400000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+38:53" + "'", str12, "+38:53");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10);
        int int18 = mutablePeriod17.getWeeks();
        mutablePeriod17.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval40 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration38);
        mutablePeriod17.addSeconds(70);
        org.joda.time.DateTime dateTime45 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.DateTime dateTime48 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long53 = dateTimeZone50.convertLocalToUTC(100L, true);
        org.joda.time.DateTime dateTime54 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3600100L + "'", long53 == 3600100L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        java.lang.String str4 = dateTimeField3.getName();
        boolean boolean5 = dateTimeField3.isLenient();
        int int8 = dateTimeField3.getDifference((long) 12, (long) 2);
        int int10 = dateTimeField3.getMaximumValue(1645513794293L);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = property18.getAsText(locale20);
        java.lang.String str22 = locale20.getISO3Language();
        java.lang.String str23 = locale20.getDisplayLanguage();
        java.lang.String str24 = locale13.getDisplayScript(locale20);
        java.lang.String str25 = locale11.getDisplayCountry(locale20);
        int int26 = dateTimeField3.getMaximumShortTextLength(locale11);
        java.lang.String str28 = dateTimeField3.getAsText(44582400000L);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "monthOfYear" + "'", str4, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "deu" + "'", str22, "deu");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tedesco" + "'", str23, "tedesco");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Kanada" + "'", str25, "Kanada");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "giugno" + "'", str28, "giugno");
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusMillis((int) (byte) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray3 = timeOfDay0.getFields();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.plusMillis(93);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        long long7 = durationField4.getDifferenceAsLong((long) 852, 1645513750063L);
        long long10 = durationField4.add(1645513881025L, 999);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-19045L) + "'", long7 == (-19045L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1731827481025L + "'", long10 == 1731827481025L);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.centuries();
        int int22 = period20.get(durationFieldType21);
        int[] intArray25 = chronology13.get((org.joda.time.ReadablePeriod) period20, (long) 79308922, (long) 22);
        org.joda.time.DateTimeField dateTimeField26 = chronology13.halfdayOfDay();
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, -22, -1, -48, -900]");
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        int int7 = localDate6.getDayOfYear();
        org.joda.time.LocalDate.Property property8 = localDate6.weekyear();
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDate16.getChronology();
        org.joda.time.LocalDate localDate22 = localDate16.minusDays(100);
        org.joda.time.LocalDate.Property property23 = localDate16.dayOfMonth();
        org.joda.time.DateTime dateTime24 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone32.isLocalDateTimeGap(localDateTime34);
        java.util.TimeZone timeZone36 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 22, dateTimeZone32);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, dateTimeZone32);
        org.joda.time.DateTime dateTime39 = dateTime24.withZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime40 = localDate10.toDateTimeAtStartOfDay(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(79514722, 93, 79491963, 0, 93, dateTimeZone32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 93 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54 + "'", int7 == 54);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(13, 38, 2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusMinutes(1961);
        int int6 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.plusMinutes(79372413);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withSecondOfMinute(40);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay8.minusMillis(79436);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime1.setDate((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate10.withDayOfMonth(13);
        org.joda.time.DateTime dateTime17 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology18 = localDate10.getChronology();
        mutablePeriod6.add((long) '4', chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime1, chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = localDate29.getChronology();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology33);
        org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property36 = localDate34.dayOfMonth();
        org.joda.time.LocalDate.Property property37 = localDate34.monthOfYear();
        org.joda.time.LocalDate localDate38 = property37.roundCeilingCopy();
        org.joda.time.LocalDate localDate40 = property37.addWrapFieldToCopy((int) '4');
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder45 = builder41.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder49 = builder41.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder53 = builder49.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder55 = builder49.setLocale(locale54);
        java.util.Calendar.Builder builder59 = builder49.setTimeOfDay(14, (-1), 17);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.dayOfMonth();
        org.joda.time.DurationField durationField64 = property63.getDurationField();
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.lang.String str66 = property63.getAsText(locale65);
        java.lang.String str67 = locale65.getISO3Language();
        java.util.Locale locale68 = locale65.stripExtensions();
        java.util.Calendar.Builder builder69 = builder59.setLocale(locale65);
        java.lang.String str70 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate40, locale65);
        org.joda.time.DurationField durationField71 = dateTimeField22.getRangeDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2" + "'", str66, "2");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "deu" + "'", str67, "deu");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "22" + "'", str70, "22");
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.YearMonthDay.Property property42 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property42.addWrapFieldToCopy(36023888);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.minusMonths(25728);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusYears(38);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long53 = dateTimeZone50.convertLocalToUTC(100L, true);
        org.joda.time.DateTime dateTime54 = yearMonthDay48.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = null;
        org.joda.time.format.DateTimeParser dateTimeParser56 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter55, dateTimeParser56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter57.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatter58.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = yearMonthDay48.toString(dateTimeFormatter58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3600100L + "'", long53 == 3600100L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNull(dateTimePrinter59);
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = property20.setCopy(8);
        org.joda.time.LocalDateTime localDateTime24 = property20.addToCopy((long) 13);
        boolean boolean25 = localDateTime11.equals((java.lang.Object) property20);
        org.joda.time.LocalDateTime.Property property26 = localDateTime11.millisOfSecond();
        int int27 = localDateTime11.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 49 + "'", int27 == 49);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        int int7 = mutableDateTime1.getYearOfEra();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        mutableDateTime9.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime9.set(dateTimeFieldType12, 1);
        mutableDateTime9.addHours((-1));
        mutableDateTime9.addWeekyears(1961);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(26, 0, 23, 70);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod24, 32770);
        mutableDateTime1.setMillis((long) 79358169);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMillis((int) (byte) 0);
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = property6.getDateTime();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = property6.setCopy(69540017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69540017 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(chronology15);
        int int17 = dateTime4.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = dateTime4.minusYears(10);
        org.joda.time.DateTime.Property property20 = dateTime4.centuryOfEra();
        int int21 = dateTime4.getMinuteOfHour();
        int int22 = dateTime4.getDayOfYear();
        org.joda.time.DateTime.Property property23 = dateTime4.weekOfWeekyear();
        org.joda.time.DateTime.Property property24 = dateTime4.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 54 + "'", int22 == 54);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.joda.time.Period period1 = org.joda.time.Period.years(79308922);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration2 = period1.toStandardDuration();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Duration as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant17 = instant0.withDurationAdded((long) 38, 115);
        org.joda.time.Chronology chronology18 = instant0.getChronology();
        org.joda.time.DateTime dateTime19 = instant0.toDateTime();
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = interval7.toPeriod(periodType9);
        java.lang.Object obj11 = null;
        boolean boolean12 = periodType9.equals(obj11);
        org.joda.time.PeriodType periodType13 = periodType9.withSecondsRemoved();
        org.joda.time.PeriodType periodType14 = periodType9.withSecondsRemoved();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        int int13 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDate12);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.dayOfMonth();
        org.joda.time.DurationField durationField21 = property20.getDurationField();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = property20.getAsText(locale22);
        java.lang.String str24 = locale22.getISO3Language();
        java.lang.String str25 = locale22.getDisplayLanguage();
        java.lang.String str26 = locale15.getDisplayScript(locale22);
        java.lang.String str27 = dateTimeField10.getAsText((long) 35, locale15);
        java.lang.String str28 = locale15.getCountry();
        java.lang.String str29 = locale15.getScript();
        java.lang.String str30 = locale15.getScript();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2" + "'", str23, "2");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deu" + "'", str24, "deu");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tedesco" + "'", str25, "tedesco");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gioved\354" + "'", str27, "gioved\354");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str13 = dateTimeZone11.getNameKey((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = localDate5.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) 79434912);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        java.lang.String str15 = localDateTime14.toString();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0099-01-09T14:17:00.000" + "'", str15, "0099-01-09T14:17:00.000");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone11.isLocalDateTimeGap(localDateTime13);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        boolean boolean16 = timeZone15.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        int int27 = localDate23.getWeekyear();
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 267, chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyear();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = dateTimeField31.getAsShortText((int) (byte) 0, locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone15, locale33);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale.Builder builder37 = builder5.setLocale(locale33);
        java.util.Locale.Builder builder39 = builder5.removeUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder40.addUnicodeLocaleAttribute("P46WT115S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: P46WT115S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645513977624,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=57,MILLISECOND=624,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ita" + "'", str36, "ita");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay7.toDateMidnight();
        java.lang.String[] strArray18 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        boolean boolean26 = strSet19.remove((java.lang.Object) readableDuration24);
        java.util.stream.Stream<java.lang.String> strStream27 = strSet19.parallelStream();
        boolean boolean28 = yearMonthDay7.equals((java.lang.Object) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strSet19.spliterator();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfMonth();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.DateMidnight dateMidnight38 = property36.roundHalfFloorCopy();
        org.joda.time.Interval interval39 = property36.toInterval();
        org.joda.time.Interval interval40 = interval39.toInterval();
        org.joda.time.Chronology chronology41 = interval39.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 1961, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType31.getField(chronology41);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay(4320000000L, chronology41);
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = new org.joda.time.Period((java.lang.Object) strSpliterator29, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Spliterators$IteratorSpliterator");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.LocalDate localDate12 = localDate5.minusWeeks(489);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology23 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate32 = localDate26.withDayOfMonth(13);
        long long34 = chronology23.set((org.joda.time.ReadablePartial) localDate32, 10L);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.secondOfDay();
        boolean boolean38 = localDate32.equals((java.lang.Object) property37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTime dateTime47 = localDate32.toDateTimeAtStartOfDay(dateTimeZone46);
        int int48 = localDate32.getEra();
        int int49 = localDate5.compareTo((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.minusDays(17);
        org.joda.time.DateMidnight.Property property58 = dateMidnight54.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight54.plusMonths(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.property(dateTimeFieldType61);
        int int63 = mutableDateTime51.get(dateTimeFieldType61);
        boolean boolean64 = localDate5.isSupported(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = localDate5.getValue(286);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 286");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1036800010L + "'", long34 == 1036800010L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusMillis(25);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withMillisOfSecond(61);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMillis(79433644);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusSeconds(494);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        int int12 = dateTimeField10.getMinimumValue(0L);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology22 = localDate18.getChronology();
        org.joda.time.LocalDate localDate24 = localDate18.minusDays(100);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        long long34 = dateTimeZone31.nextTransition((long) 1);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime37 = instant36.toMutableDateTime();
        mutableDateTime37.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime37.set(dateTimeFieldType40, 1);
        org.joda.time.LocalDate.Property property43 = localDate35.property(dateTimeFieldType40);
        int int44 = localDate24.compareTo((org.joda.time.ReadablePartial) localDate35);
        int int45 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate localDate47 = localDate24.withYearOfEra(115);
        org.joda.time.DateTime dateTime48 = localDate47.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime48.withDate(999, 23, 537);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 267 + "'", int25 == 267);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.minusMonths(6609303);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.monthOfYear();
        org.joda.time.DurationField durationField25 = property24.getDurationField();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        mutablePeriod9.add((long) '4', chronology21);
        org.joda.time.Period period23 = new org.joda.time.Period((-1L), 1L, periodType7, chronology21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        int int27 = periodType24.indexOf(durationFieldType26);
        boolean boolean28 = periodType7.isSupported(durationFieldType26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) 32770, periodType7);
        java.lang.String str30 = periodType7.toString();
        org.joda.time.Period period32 = org.joda.time.Period.years(231);
        int int33 = period32.getMinutes();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.minutes();
        org.joda.time.DurationField durationField46 = chronology44.weekyears();
        org.joda.time.DurationField durationField47 = durationFieldType34.getField(chronology44);
        int int48 = period32.get(durationFieldType34);
        boolean boolean49 = periodType7.isSupported(durationFieldType34);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.LocalDate localDate62 = localDate56.withDayOfMonth(13);
        org.joda.time.DateTime dateTime63 = localDate56.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology64 = localDate56.getChronology();
        mutablePeriod52.add((long) '4', chronology64);
        org.joda.time.DateTimeField dateTimeField66 = chronology64.millisOfDay();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 3, chronology64);
        org.joda.time.DurationField durationField68 = durationFieldType34.getField(chronology64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(69, 185, 79452840, chronology64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 185 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[Millis]" + "'", str30, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField68);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMillis(0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusHours((int) (byte) -1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(53580, 6, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekOfWeekyear((int) ' ');
        org.joda.time.Period period9 = new org.joda.time.Period();
        org.joda.time.Period period11 = period9.minusMonths(53);
        org.joda.time.Period period13 = period9.plusSeconds(9);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period15 = period13.normalizedStandard(periodType14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.Duration duration29 = period23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42);
        org.joda.time.Duration duration44 = period38.toDurationTo((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Instant instant45 = instant31.minus((org.joda.time.ReadableDuration) duration44);
        boolean boolean46 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate48.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plus((long) 1961);
        org.joda.time.DateTime dateTime55 = dateTime51.withYear(11);
        org.joda.time.DateTime dateTime57 = dateTime51.minusMinutes((int) '4');
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType59 = periodType58.withSecondsRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime51, periodType59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.LocalDate localDate74 = localDate68.withDayOfMonth(13);
        org.joda.time.DateTime dateTime75 = localDate68.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology76 = localDate68.getChronology();
        mutablePeriod64.add((long) '4', chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1L, dateTimeZone80);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight81, readableDuration82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.centuries();
        int int85 = period83.get(durationFieldType84);
        int[] intArray88 = chronology76.get((org.joda.time.ReadablePeriod) period83, (long) 79308922, (long) 22);
        boolean boolean89 = durationFieldType62.isSupported(chronology76);
        int int90 = periodType59.indexOf(durationFieldType62);
        int int91 = period15.get(durationFieldType62);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight8.withFieldAdded(durationFieldType62, 0);
        org.joda.time.DateMidnight.Property property94 = dateMidnight8.yearOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 54 + "'", int49 == 54);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, -22, -1, -48, -900]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        java.lang.String str10 = interval9.toString();
        boolean boolean11 = interval5.overlaps((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(17);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.set(9);
        org.joda.time.MutableDateTime mutableDateTime32 = property28.getMutableDateTime();
        boolean boolean33 = dateMidnight25.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        mutableDateTime32.setMillisOfSecond(2);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.minuteOfDay();
        mutableDateTime32.addYears(999);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate57, (org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.Duration duration67 = period61.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Instant instant68 = instant54.minus((org.joda.time.ReadableDuration) duration67);
        boolean boolean69 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology70);
        int int72 = localDate71.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDate71.toDateTimeAtStartOfDay(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.plus((long) 1961);
        org.joda.time.DateTime dateTime78 = dateTime74.minusHours(657);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime78);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval82 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str10, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 54 + "'", int72 == 54);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 38);
        org.joda.time.Period period6 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (byte) 0);
        java.lang.String str9 = timeOfDay8.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        mutableDateTime11.addHours((-1));
        mutableDateTime11.addDays(31);
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime11.getRoundingField();
        org.joda.time.DateTime dateTime22 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(2022);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "T00:00:00.038" + "'", str9, "T00:00:00.038");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = localDate18.withWeekOfWeekyear(4);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance();
        int int22 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay27 = org.joda.time.YearMonthDay.fromCalendarFields(calendar21);
        org.joda.time.Period period28 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType30 = periodType29.withSecondsRemoved();
        org.joda.time.Period period31 = period28.withPeriodType(periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) yearMonthDay27, periodType29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay27.year();
        java.lang.String str34 = property33.toString();
        org.joda.time.YearMonthDay yearMonthDay36 = property33.addToCopy(28);
        org.joda.time.YearMonthDay yearMonthDay37 = property33.withMaximumValue();
        java.util.Locale locale39 = java.util.Locale.PRC;
        boolean boolean40 = locale39.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = yearMonthDay37.toString("DurationField[centuries]", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-61427868421772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=58,MILLISECOND=228,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[year]" + "'", str34, "Property[year]");
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        mutableDateTime2.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime2.set(dateTimeFieldType5, 1);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology21 = localDate13.getChronology();
        mutablePeriod9.add((long) '4', chronology21);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology24 = mutableDateTime2.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1546473600000L, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 'a', dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate30, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone40);
        long long43 = dateTimeZone40.nextTransition((long) 1);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone40);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime46 = instant45.toMutableDateTime();
        mutableDateTime46.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime46.set(dateTimeFieldType49, 1);
        org.joda.time.LocalDate.Property property52 = localDate44.property(dateTimeFieldType49);
        boolean boolean53 = localDate30.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        int int56 = localDate55.getDayOfYear();
        org.joda.time.Chronology chronology57 = localDate55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.months();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType49.getField(chronology57);
        org.joda.time.Period period60 = new org.joda.time.Period((long) 53, (long) 1322, chronology57);
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight64 = dateMidnight25.withField(dateTimeFieldType62, 789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 789 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 54 + "'", int56 == 54);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = property12.getAsText(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale14.getDisplayName(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = localDate19.getField(1);
        java.lang.String str22 = dateTimeField21.getName();
        boolean boolean23 = dateTimeField21.isLenient();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        int int33 = localDate29.getWeekyear();
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDate29, locale35);
        java.lang.String str37 = locale14.getDisplayScript(locale35);
        java.lang.String str38 = property8.getAsText(locale35);
        org.joda.time.DateMidnight dateMidnight39 = property8.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight40 = property8.withMaximumValue();
        int int41 = property8.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight42 = property8.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.dayOfMonth();
        org.joda.time.DurationField durationField55 = property54.getDurationField();
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = property54.getAsText(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale56.getDisplayName(locale58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = localDate61.getField(1);
        java.lang.String str64 = dateTimeField63.getName();
        boolean boolean65 = dateTimeField63.isLenient();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 'a', dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 'a', dateTimeZone70);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate68, (org.joda.time.ReadablePartial) localDate71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = null;
        boolean boolean74 = localDate71.isSupported(dateTimeFieldType73);
        int int75 = localDate71.getWeekyear();
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localDate71, locale77);
        java.lang.String str79 = locale56.getDisplayScript(locale77);
        java.lang.String str80 = dateTimeZone48.getShortName(9056880000000L, locale77);
        org.joda.time.DateTime dateTime81 = dateMidnight42.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(chronology83);
        org.joda.time.DateTimeField dateTimeField86 = localDate84.getField(1);
        java.lang.String str87 = dateTimeField86.getName();
        java.util.Locale locale89 = java.util.Locale.ENGLISH;
        java.lang.String str90 = dateTimeField86.getAsShortText((long) (short) 10, locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str91 = dateMidnight42.toString("22 Feb 2022 07:09:12 GMT", locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Deutsch (Deutschland)" + "'", str17, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "monthOfYear" + "'", str22, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc6d4" + "'", str36, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2" + "'", str38, "2");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2" + "'", str57, "2");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Deutsch (Deutschland)" + "'", str59, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "monthOfYear" + "'", str64, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\uc6d4" + "'", str78, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+38:53" + "'", str80, "+38:53");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "monthOfYear" + "'", str87, "monthOfYear");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Jan" + "'", str90, "Jan");
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withCenturyOfEra(1970);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withDurationAdded(252263385L, 75193193);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (byte) 10);
        int int9 = dateMidnight6.getYearOfEra();
        boolean boolean10 = instant0.isEqual((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.MutableDateTime mutableDateTime11 = instant0.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1961 + "'", int9 == 1961);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minus((org.joda.time.ReadablePeriod) period16);
        boolean boolean18 = dateTimeZone6.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.minusSeconds(2022);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        int int32 = property23.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableDateTime mutableDateTime34 = property23.add(10);
        org.joda.time.DateTime dateTime35 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(186);
        org.joda.time.DateTime.Property property38 = dateTime37.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime37.withMonthOfYear(80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 80 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((int) 'x');
        int int12 = property7.get();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        int int3 = mutablePeriod2.getWeeks();
        int int4 = mutablePeriod2.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter5 = null;
        java.lang.String str6 = mutablePeriod2.toString(periodFormatter5);
        org.joda.time.Period period8 = org.joda.time.Period.minutes((int) ' ');
        mutablePeriod2.add((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Weeks weeks10 = period8.toStandardWeeks();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((java.lang.Object) period8, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withMillisRemoved();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = null;
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = localDate21.getChronology();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DurationField durationField27 = durationFieldType15.getField(chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Period period34 = period32.minusMillis(13);
        org.joda.time.Period period35 = period34.toPeriod();
        int[] intArray37 = chronology25.get((org.joda.time.ReadablePeriod) period34, 9056880000000L);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 100, periodType14, chronology25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.010S" + "'", str6, "PT0.010S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 14975, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property14.addCopy(36000000);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate localDate10 = localDate8.minusDays(32769);
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean13 = interval11.contains((long) 79334);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        mutableDateTime25.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime25.set(dateTimeFieldType28, 1);
        org.joda.time.LocalDate.Property property31 = localDate23.property(dateTimeFieldType28);
        org.joda.time.LocalDate localDate32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate34 = localDate32.withWeekOfWeekyear(4);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        int int36 = calendar35.getMinimalDaysInFirstWeek();
        calendar35.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay41 = org.joda.time.YearMonthDay.fromCalendarFields(calendar35);
        org.joda.time.Period period42 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = period42.withPeriodType(periodType43);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) yearMonthDay41, periodType43);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay41.year();
        org.joda.time.YearMonthDay yearMonthDay48 = property47.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay50 = property47.setCopy(34);
        org.joda.time.Interval interval51 = yearMonthDay50.toInterval();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        boolean boolean53 = interval51.contains((org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean54 = interval11.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTime dateTime55 = interval51.getStart();
        org.joda.time.DateTime dateTime56 = interval51.getEnd();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-61427868421360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=58,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property14 = dateTime10.secondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime10.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        long long21 = chronology10.set((org.joda.time.ReadablePartial) localDate19, 10L);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        boolean boolean25 = localDate19.equals((java.lang.Object) property24);
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = property24.set("kor");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"kor\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1036800010L + "'", long21 == 1036800010L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 100);
        int int39 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay36.plusHours(38);
        org.joda.time.LocalTime localTime42 = timeOfDay36.toLocalTime();
        int int43 = timeOfDay36.getMinuteOfHour();
        org.joda.time.Chronology chronology44 = timeOfDay36.getChronology();
        long long48 = chronology44.add(0L, 31535199679L, (-32));
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime55 = dateTimeFormatter53.parseMutableDateTime("17");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1009126389728L) + "'", long48 == (-1009126389728L));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusYears(79315175);
        int int4 = yearMonthDay3.size();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.TimeOfDay timeOfDay3 = property1.withMinimumValue();
        org.joda.time.DurationField durationField4 = property1.getDurationField();
        org.joda.time.DurationField durationField5 = property1.getDurationField();
        int int6 = property1.get();
        int int7 = property1.getMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate1.toDateTimeAtStartOfDay(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) 1961);
        org.joda.time.DateTime dateTime8 = dateTime4.withYear(11);
        org.joda.time.DateTime dateTime10 = dateTime4.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime4.withYear(999);
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(31);
        org.joda.time.Instant instant15 = dateTime4.toInstant();
        org.joda.time.LocalDate localDate16 = dateTime4.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDate16.getValue(445);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 445");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("DurationField[minutes]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        java.lang.String str11 = dateTimeField10.getName();
        int int13 = dateTimeField10.getLeapAmount((long) 261);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfWeek" + "'", str11, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate14 = localDate8.withDayOfMonth(13);
        org.joda.time.DateTime dateTime15 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = localDate8.getChronology();
        mutablePeriod4.add((long) '4', chronology16);
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, periodType1, chronology16);
        int int20 = mutablePeriod19.getMinutes();
        mutablePeriod19.addMillis(266);
        mutablePeriod19.setYears(26);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds(1);
        int int14 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy(32770);
        org.joda.time.LocalDateTime localDateTime18 = property15.roundHalfEvenCopy();
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusWeeks(0);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 17 + "'", int14 == 17);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0000-01-01T00:00:00.000" + "'", str19, "0000-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy(37439);
        org.joda.time.LocalTime localTime13 = property5.addWrapFieldToCopy(86399999);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property13.setCopy(8);
        org.joda.time.LocalDateTime localDateTime17 = property13.addToCopy((long) 13);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        long long26 = dateTimeZone24.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.minusDays(17);
        org.joda.time.DateTime dateTime33 = dateMidnight32.toDateTimeISO();
        org.joda.time.DateTime dateTime35 = dateTime33.withMinuteOfHour(38);
        int int36 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime33.getZone();
        org.joda.time.DateTime dateTime38 = localDateTime17.toDateTime(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(16, 32772, 83, 34, 241, (int) (byte) -1, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 139980000 + "'", int36 == 139980000);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.Duration duration16 = period10.toDurationTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.Instant instant17 = instant3.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Interval interval18 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate22, (org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30);
        org.joda.time.Duration duration32 = period26.toDurationTo((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Instant instant33 = instant19.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        boolean boolean49 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Interval interval50 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        long long51 = interval50.getEndMillis();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(454, (int) (short) 0, 19, (int) (byte) 10);
        org.joda.time.MutablePeriod mutablePeriod57 = mutablePeriod56.toMutablePeriod();
        int int58 = mutablePeriod57.getSeconds();
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime60 = instant59.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundCeiling();
        org.joda.time.Duration duration63 = mutablePeriod57.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime62);
        boolean boolean64 = interval50.isAfter((org.joda.time.ReadableInstant) mutableDateTime62);
        int int65 = mutableDateTime62.getEra();
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.withSecondOfMinute(0);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime4.withYear(287);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        int int16 = period15.size();
        java.lang.String str17 = period15.toString();
        org.joda.time.Period period19 = period15.plusMonths(11);
        int int20 = period15.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.MutablePeriod mutablePeriod28 = period25.toMutablePeriod();
        int int29 = period25.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.Period period37 = period25.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period38 = period15.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period40 = period38.withYears((int) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime4.minus((org.joda.time.ReadablePeriod) period38);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0S" + "'", str17, "PT0S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone10);
        long long13 = dateTimeZone10.nextTransition((long) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 13, dateTimeZone10);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        mutableDateTime17.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime17.set(dateTimeFieldType20, 1);
        java.lang.String str23 = dateTimeFieldType20.getName();
        int int24 = mutableDateTime1.get(dateTimeFieldType20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfMonth();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        org.joda.time.DateMidnight dateMidnight32 = property30.roundHalfFloorCopy();
        org.joda.time.Interval interval33 = property30.toInterval();
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.Chronology chronology35 = interval33.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) 1961, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType25.getField(chronology35);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType25.getDurationType();
        mutableDateTime1.set(dateTimeFieldType25, 16);
        mutableDateTime1.setWeekyear(79429672);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationFieldType38);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime9 = property7.setCopy(0);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology28 = localDate20.getChronology();
        mutablePeriod16.add((long) '4', chronology28);
        org.joda.time.Period period30 = new org.joda.time.Period((-1L), 1L, periodType14, chronology28);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType32 = periodType31.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.centuries();
        int int34 = periodType31.indexOf(durationFieldType33);
        boolean boolean35 = periodType14.isSupported(durationFieldType33);
        org.joda.time.Period period36 = new org.joda.time.Period((long) 32770, periodType14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) property7, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = dateTimeFormatter34.parseLocalDate("79321");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds((int) '4');
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.hourOfDay();
        java.lang.String str11 = property10.getAsString();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType14, chronology16);
        org.joda.time.Period period19 = period17.minusHours(1);
        boolean boolean20 = property10.equals((java.lang.Object) period19);
        org.joda.time.TimeOfDay timeOfDay21 = property10.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22" + "'", str11, "22");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.LocalDateTime localDateTime8 = null;
        boolean boolean9 = dateTimeZone6.isLocalDateTimeGap(localDateTime8);
        java.util.TimeZone timeZone10 = dateTimeZone6.toTimeZone();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 2, dateTimeZone6);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(431);
        org.joda.time.LocalTime localTime15 = localTime13.plusMinutes(150);
        org.joda.time.LocalTime localTime17 = localTime13.minusMillis(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localTime17.get(dateTimeFieldType18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight9 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property11 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime6.withWeekyear(8003);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate.Property property5 = localDate3.year();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        int int7 = property5.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(817, 2083, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2083 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plus((long) 1961);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(11);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20);
        org.joda.time.Duration duration22 = period16.toDurationTo((org.joda.time.ReadableInstant) dateMidnight19);
        java.lang.String str23 = duration22.toString();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration22, periodType24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(378691200001L, periodType24);
        mutablePeriod26.addHours(0);
        mutablePeriod26.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0S" + "'", str23, "PT0S");
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(4320000000L);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(79464093);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = dateTime3.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfMonth((int) (short) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.year();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfCeilingCopy();
        int int9 = dateMidnight8.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = localDate15.getChronology();
        org.joda.time.LocalDate localDate21 = localDate15.minusDays(100);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period();
        org.joda.time.Period period24 = period23.toPeriod();
        org.joda.time.Period period25 = period23.negated();
        org.joda.time.LocalDate localDate27 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 115);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight8.plus((org.joda.time.ReadablePeriod) period25);
        int int29 = dateMidnight8.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("-1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-1\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        java.util.GregorianCalendar gregorianCalendar13 = dateTime12.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime12.withEra(291);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 291 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        java.util.Calendar.Builder builder16 = builder0.setTimeZone(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder16.setCalendarType("Wed Jul 21 22:07:09 GMT 2083");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: Wed Jul 21 22:07:09 GMT 2083");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusMillis(256);
        int int11 = timeOfDay6.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.DateMidnight dateMidnight17 = property15.roundHalfFloorCopy();
        org.joda.time.YearMonthDay yearMonthDay18 = dateMidnight17.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = timeOfDay6.isBefore((org.joda.time.ReadablePartial) yearMonthDay18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property5.addCopy(0L);
        org.joda.time.LocalTime localTime14 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate5.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight15 = property14.getDateMidnight();
        int int16 = dateMidnight15.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        calendar0.set(100, 287, 9, 0, 12, 1961);
        java.util.Date date18 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date18.setMonth((int) (short) 1);
        java.util.Date date26 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date26.setMonth((int) (short) 1);
        java.util.Date date34 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date34.setMonth((int) (short) 1);
        boolean boolean37 = date26.before(date34);
        int int38 = date26.getHours();
        boolean boolean39 = date18.before(date26);
        calendar0.setTime(date18);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableInstant) dateMidnight46, periodType50);
        int int52 = dateMidnight46.getMillisOfSecond();
        int int53 = dateMidnight46.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.LocalDate localDate62 = localDate56.withDayOfMonth(13);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight46.withFields((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight69 = property67.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateTimeField dateTimeField70 = property67.getField();
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale73);
        java.lang.String str75 = locale72.getDisplayCountry(locale73);
        java.lang.String str76 = dateTimeField70.getAsShortText(126, locale72);
        java.util.Calendar calendar77 = dateMidnight46.toCalendar(locale72);
        java.util.Date date78 = calendar77.getTime();
        date78.setSeconds(159);
        boolean boolean81 = date18.after(date78);
        int int82 = date18.getDate();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1731754200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 70 + "'", int53 == 70);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Taiwan" + "'", str75, "Taiwan");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "126" + "'", str76, "126");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=-53580000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=7,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Wed Dec 31 09:09:39 GMT 1969");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 15 + "'", int82 == 15);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableInstant) dateMidnight5, periodType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getID();
        org.joda.time.DateTime dateTime20 = dateMidnight5.toDateTime(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withMonthOfYear(13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+38:53" + "'", str19, "+38:53");
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(975, 2035, 79368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 975 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        boolean boolean11 = durationField10.isSupported();
        long long14 = durationField10.add((long) 8, 0L);
        long long17 = durationField10.subtract((-139980001L), 741);
        boolean boolean18 = durationField10.isPrecise();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 8L + "'", long14 == 8L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-184440001L) + "'", long17 == (-184440001L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        mutableDateTime7.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime7.set(dateTimeFieldType10, 1);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.Duration duration29 = period23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Instant instant30 = instant16.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 10);
        int int35 = mutablePeriod34.getWeeks();
        mutablePeriod34.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod34.setYears(53);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.addYears(287);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 'a', dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate53, (org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = localDate56.isSupported(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = localDate56.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfWeek();
        mutablePeriod34.add(10886400000L, chronology60);
        org.joda.time.Period period64 = org.joda.time.Period.weeks(1322);
        long long67 = chronology60.add((org.joda.time.ReadablePeriod) period64, (long) 9, 79315);
        org.joda.time.DateTimeField dateTimeField68 = chronology60.weekyearOfCentury();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(0L, chronology60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((-32), 99, 57, 976, 115, chronology60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 976 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 63415959264000009L + "'", long67 == 63415959264000009L);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        long long18 = property17.remainder();
        org.joda.time.LocalDate localDate19 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property17.setCopy(0);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfMonth(23);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4406400000L + "'", long18 == 4406400000L);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        int int12 = localDate11.getDayOfYear();
        int int13 = localDate11.size();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime15 = instant14.toMutableDateTime();
        mutableDateTime15.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone24);
        long long27 = dateTimeZone24.nextTransition((long) 1);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 13, dateTimeZone24);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 10);
        int int32 = mutablePeriod31.getWeeks();
        mutablePeriod31.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval38 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Interval interval54 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        mutablePeriod31.add((org.joda.time.ReadableDuration) duration52);
        mutablePeriod31.addSeconds(70);
        org.joda.time.DateTime dateTime59 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours(454);
        org.joda.time.DateTime dateTime62 = dateTime59.withZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate11.toDateTimeAtCurrentTime(dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = dateTime63.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 267 + "'", int12 == 267);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("2022-02-07", "TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-07 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMillis(0);
        org.joda.time.TimeOfDay.Property property9 = timeOfDay8.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = property9.setCopy(143);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 143 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-96608), 81, 451);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -96608 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property14 = dateTime10.secondOfDay();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) 10, (int) '#', 1961, (int) (short) -1, (int) '4', 100, 0, (int) (byte) 1);
        org.joda.time.Period period25 = period23.minusYears((int) '4');
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType29 = periodType28.withSecondsRemoved();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType28, chronology30);
        org.joda.time.PeriodType periodType32 = periodType28.withMillisRemoved();
        org.joda.time.Period period33 = period25.normalizedStandard(periodType28);
        org.joda.time.DateTime dateTime34 = dateTime10.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime.Property property35 = dateTime34.minuteOfHour();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        long long8 = dateTimeZone5.nextTransition((long) 1);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        mutableDateTime11.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime11.set(dateTimeFieldType14, 1);
        org.joda.time.LocalDate.Property property17 = localDate9.property(dateTimeFieldType14);
        org.joda.time.LocalDate localDate18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate20 = property17.addToCopy(53580003);
        org.joda.time.LocalDate localDate21 = property17.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField22 = property17.getField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime1.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        long long11 = dateTimeZone9.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minusDays(17);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(38);
        int int21 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime1.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundFloor();
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 139980000 + "'", int21 == 139980000);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        boolean boolean12 = dateTimeField11.isSupported();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime15 = localTime13.withHourOfDay((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime22 = property19.set(9);
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate32 = localDate26.withCenturyOfEra(70);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate36, (org.joda.time.ReadablePartial) localDate39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = null;
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = localDate39.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 10);
        int int46 = mutablePeriod45.getWeeks();
        mutablePeriod45.setPeriod((long) (-1), (long) (-1));
        org.joda.time.Interval interval52 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 'a', dateTimeZone55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 'a', dateTimeZone58);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate56, (org.joda.time.ReadablePartial) localDate59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64);
        org.joda.time.Duration duration66 = period60.toDurationTo((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.Instant instant67 = instant53.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Interval interval68 = interval52.withDurationAfterStart((org.joda.time.ReadableDuration) duration66);
        mutablePeriod45.add((org.joda.time.ReadableDuration) duration66);
        int[] intArray71 = chronology43.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1036800010L);
        int[] intArray73 = dateTimeField23.set((org.joda.time.ReadablePartial) localDate26, 0, intArray71, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = dateTimeField11.set((org.joda.time.ReadablePartial) localTime15, 0, intArray71, 79423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79423 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[100, 1, 1, 5, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[100, 1, 1, 5, 0, 0, 0, 10]");
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder2.setLanguageTag("Deutsch");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("PT0.034S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: PT0.034S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property3.getAsText(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField12 = localDate10.getField(1);
        java.lang.String str13 = dateTimeField12.getName();
        boolean boolean14 = dateTimeField12.isLenient();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate20.isSupported(dateTimeFieldType22);
        int int24 = localDate20.getWeekyear();
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate20, locale26);
        java.lang.String str28 = locale5.getDisplayScript(locale26);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField(1);
        java.lang.String str36 = dateTimeField35.getName();
        boolean boolean37 = dateTimeField35.isLenient();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDate43.isSupported(dateTimeFieldType45);
        int int47 = localDate43.getWeekyear();
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDate43, locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone30, locale49);
        int int52 = calendar51.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = calendar51.isSet(55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 55");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutsch (Deutschland)" + "'", str8, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "monthOfYear" + "'", str13, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc6d4" + "'", str27, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645513980265,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=0,MILLISECOND=265,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "monthOfYear" + "'", str36, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc6d4" + "'", str50, "\uc6d4");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645513980265,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=0,MILLISECOND=265,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(53);
        int int13 = localDateTime10.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusWeeks((int) '#');
        int int16 = localDateTime15.getMillisOfDay();
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMonthOfYear(61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1020000 + "'", int16 == 1020000);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        int int7 = calendar0.getActualMinimum(13);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("millisOfSecond");
        calendar0.setTimeZone(timeZone9);
        java.util.TimeZone timeZone11 = calendar0.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar0.getActualMinimum(445);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 445");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=266,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=0,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        int int4 = timeOfDay1.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.plusHours(38);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withSecondOfMinute(0);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(44);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        mutableDateTime12.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime12.set(dateTimeFieldType15, 1);
        int int18 = mutableDateTime12.getYearOfEra();
        org.joda.time.Period period20 = org.joda.time.Period.years(231);
        mutableDateTime12.add((org.joda.time.ReadablePeriod) period20, 52);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        int int28 = period27.size();
        mutableDateTime12.add((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period31 = period27.withWeeks(159);
        org.joda.time.Period period33 = period31.minusYears((-1));
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 72716537);
        org.joda.time.TimeOfDay.Property property36 = timeOfDay35.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.minusMillis(1971);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.setMinuteOfDay(4);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) localDate34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = localDate34.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDate.Property property38 = localDate34.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str43 = dateTimeZone41.getNameKey((-1L));
        java.lang.String str44 = dateTimeZone41.toString();
        org.joda.time.Interval interval45 = localDate34.toInterval(dateTimeZone41);
        mutableDateTime1.setZoneRetainFields(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+38:53" + "'", str44, "+38:53");
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, 1970, 16, 14, 1, 3, 1969, (int) '#');
        mutablePeriod8.addDays(28);
        mutablePeriod8.clear();
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime8 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localTime8.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime7 = dateTime4.plusMillis((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime10 = dateTime4.withFieldAdded(durationFieldType8, (int) (byte) 1);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getMinimalDaysInFirstWeek();
        calendar11.set((int) (short) 1, 266, (int) (byte) 100);
        int int17 = calendar11.getMinimalDaysInFirstWeek();
        int int18 = calendar11.getMinimalDaysInFirstWeek();
        calendar11.set(5, 12);
        org.joda.time.YearMonthDay yearMonthDay22 = org.joda.time.YearMonthDay.fromCalendarFields(calendar11);
        org.joda.time.DateTime dateTime23 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay22);
        org.joda.time.DateTime.Property property24 = dateTime4.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-61435471619544,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=71,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=0,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean11 = interval7.contains((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology12 = interval7.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfFloorCopy();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.Chronology chronology23 = interval21.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 1961, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, chronology23);
        org.joda.time.Chronology chronology27 = interval7.getChronology();
        org.joda.time.Chronology chronology28 = chronology27.withUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withChronology(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 79318959);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withPivotYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((-8640000000L));
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes((int) (byte) 100);
        int int39 = timeOfDay36.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay36.plusHours(38);
        org.joda.time.LocalTime localTime42 = timeOfDay36.toLocalTime();
        int int43 = timeOfDay36.getMinuteOfHour();
        org.joda.time.Chronology chronology44 = timeOfDay36.getChronology();
        long long48 = chronology44.add(0L, 31535199679L, (-32));
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DurationField durationField50 = chronology44.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter33.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(26);
        java.lang.StringBuffer stringBuffer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(stringBuffer54, (long) 840);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1009126389728L) + "'", long48 == (-1009126389728L));
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant29 = instant14.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) (short) -1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime31 = instant30.toMutableDateTime();
        mutableDateTime31.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime31.set(dateTimeFieldType34, 1);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Interval interval55 = interval39.withDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant29, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant59 = instant29.minus((long) 11);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis((int) ' ');
        org.joda.time.DateTime.Property property63 = dateTime60.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = property63.setCopy(1324);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1324 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date5.setMonth((int) (short) 1);
        java.util.Date date13 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date13.setMonth((int) (short) 1);
        boolean boolean16 = date5.before(date13);
        int int17 = date5.getHours();
        date5.setYear(1969);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = localDate26.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.minutes();
        org.joda.time.DurationField durationField32 = chronology30.weekyears();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology30.getZone();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay20.withChronologyRetainFields(chronology30);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 15 13:10:00 GMT 3869");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        java.util.Date date6 = new java.util.Date(4, 139980000, 5, 16, 0, 8);
        date6.setMinutes(868);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 10);
        int int11 = mutablePeriod10.getWeeks();
        mutablePeriod10.add(0, (int) (short) 10, 9, 0, 11, 9, 0, (int) (short) 1);
        mutablePeriod10.setYears(53);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime24.setDate((long) (short) -1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTime();
        mutableDateTime28.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime28.set(dateTimeFieldType31, 1);
        mutableDateTime28.addHours((-1));
        mutableDateTime28.setDate((long) 266);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) mutableDateTime28);
        boolean boolean39 = date6.equals((java.lang.Object) mutablePeriod10);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Jan 06 06:28:08 GMT 11666904");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean6 = interval2.contains((org.joda.time.ReadableInterval) interval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        long long15 = dateTimeZone12.nextTransition((long) 1);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        mutableDateTime18.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime18.set(dateTimeFieldType21, 1);
        org.joda.time.LocalDate.Property property24 = localDate16.property(dateTimeFieldType21);
        org.joda.time.LocalDate localDate25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate27 = localDate25.withWeekOfWeekyear(4);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        int int29 = calendar28.getMinimalDaysInFirstWeek();
        calendar28.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        org.joda.time.Period period35 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.Period period38 = period35.withPeriodType(periodType36);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) yearMonthDay34, periodType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str41 = dateTimeFieldType40.toString();
        int int42 = yearMonthDay34.indexOf(dateTimeFieldType40);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay34.withDayOfMonth(20);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone50 = dateMidnight49.getZone();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone58 = dateMidnight57.getZone();
        org.joda.time.DateMidnight dateMidnight59 = yearMonthDay52.toDateMidnight(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight60 = yearMonthDay52.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay52.withYear(266);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType66 = periodType65.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((long) 'a', dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 'a', dateTimeZone72);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate70, (org.joda.time.ReadablePartial) localDate73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = null;
        boolean boolean76 = localDate73.isSupported(dateTimeFieldType75);
        org.joda.time.Chronology chronology77 = localDate73.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.minutes();
        org.joda.time.DurationField durationField79 = chronology77.weekyears();
        org.joda.time.Period period80 = new org.joda.time.Period(0L, chronology77);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType66, chronology77);
        org.joda.time.YearMonthDay yearMonthDay82 = yearMonthDay62.withChronologyRetainFields(chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(38, 53);
        java.lang.String str87 = dateTimeZone85.getNameKey((-1L));
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay(dateTimeZone85);
        org.joda.time.DateTime dateTime89 = yearMonthDay62.toDateTimeAtCurrentTime(dateTimeZone85);
        org.joda.time.Interval interval90 = yearMonthDay34.toInterval(dateTimeZone85);
        boolean boolean91 = interval5.abuts((org.joda.time.ReadableInterval) interval90);
        boolean boolean92 = interval5.isBeforeNow();
        java.lang.Object obj93 = null;
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(obj93);
        org.joda.time.Instant instant95 = new org.joda.time.Instant(obj93);
        org.joda.time.Instant instant98 = instant95.withDurationAdded((-259199744L), (-1));
        boolean boolean99 = interval5.isAfter((org.joda.time.ReadableInstant) instant95);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-61427868419341,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=0,MILLISECOND=659,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "year" + "'", str41, "year");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(yearMonthDay82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(instant98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight9 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate10 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property11 = dateTime6.minuteOfDay();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTime();
        mutableDateTime13.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime13.set(dateTimeFieldType16, 1);
        mutableDateTime13.add(10L);
        int int21 = mutableDateTime13.getSecondOfDay();
        int int22 = property11.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        int int23 = property11.getMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 79561 + "'", int21 == 79561);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(17);
        org.joda.time.DateTime dateTime22 = dateMidnight21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.LocalDate localDate26 = dateTime22.toLocalDate();
        org.joda.time.Period period31 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate32 = localDate26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = interval15.equals((java.lang.Object) period31);
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.LocalDate localDate46 = localDate40.minusDays(100);
        int int47 = localDate46.getDayOfYear();
        int int48 = localDate46.size();
        org.joda.time.LocalDate.Property property49 = localDate46.centuryOfEra();
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtMidnight();
        org.joda.time.Interval interval51 = interval15.withStart((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology52 = dateTime50.getChronology();
        org.joda.time.DateTime.Property property53 = dateTime50.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime50.withHourOfDay(75193193);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75193193 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 267 + "'", int47 == 267);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category5, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        java.io.Writer writer11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = property19.setCopy(8);
        org.joda.time.LocalDateTime localDateTime23 = property19.addToCopy((long) 13);
        org.joda.time.LocalDateTime localDateTime24 = property19.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(868);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer11, (org.joda.time.ReadableInstant) dateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDate localDate5 = localDate1.withFieldAdded(durationFieldType3, 53);
        org.joda.time.LocalDate.Property property6 = localDate1.dayOfWeek();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder12 = builder8.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder16 = builder8.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder20 = builder16.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder22 = builder16.setLocale(locale21);
        boolean boolean23 = locale21.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = property6.setCopy("1970-01-01T09:59:59.999+10:00/1970-01-01T09:59:59.999+10:00", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T09:59:59.999+10:00/1970-01-01T09:59:59.999+10:00\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54 + "'", int2 == 54);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        mutableDateTime1.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.weekOfWeekyear();
        int int26 = mutableDateTime1.getYear();
        mutableDateTime1.addYears(11);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDate.Property property4 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate.Property property5 = localDate1.year();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay13.toDateMidnight(dateTimeZone19);
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay13.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfMonth();
        org.joda.time.DurationField durationField26 = property25.getDurationField();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = property25.getAsText(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale27.getDisplayName(locale29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = localDate32.getField(1);
        java.lang.String str35 = dateTimeField34.getName();
        boolean boolean36 = dateTimeField34.isLenient();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        int int46 = localDate42.getWeekyear();
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = dateTimeField34.getAsShortText((org.joda.time.ReadablePartial) localDate42, locale48);
        java.lang.String str50 = locale27.getDisplayScript(locale48);
        java.lang.String str51 = locale27.getLanguage();
        java.util.Set<java.lang.Character> charSet52 = locale27.getExtensionKeys();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale27.getDisplayLanguage(locale53);
        java.lang.String str55 = property21.getAsShortText(locale53);
        java.lang.String str56 = property5.getAsShortText(locale53);
        org.joda.time.LocalDate localDate57 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2" + "'", str28, "2");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Deutsch (Deutschland)" + "'", str30, "Deutsch (Deutschland)");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "monthOfYear" + "'", str35, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc6d4" + "'", str49, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Deutsch" + "'", str54, "Deutsch");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "23" + "'", str55, "23");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970" + "'", str56, "1970");
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minusDays(17);
        org.joda.time.DateTime dateTime13 = dateMidnight12.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = dateTime13.toDateMidnight();
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.Period period22 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate23 = localDate17.minus((org.joda.time.ReadablePeriod) period22);
        boolean boolean24 = interval6.equals((java.lang.Object) period22);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 'a', dateTimeZone30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        org.joda.time.Duration duration38 = period32.toDurationTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.Instant instant39 = instant25.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 'a', dateTimeZone45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate43, (org.joda.time.ReadablePartial) localDate46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight50, readableDuration51);
        org.joda.time.Duration duration53 = period47.toDurationTo((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Instant instant54 = instant40.minus((org.joda.time.ReadableDuration) duration53);
        boolean boolean55 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime57.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight64.getZone();
        long long67 = dateTimeZone65.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight.Property property71 = dateMidnight70.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.minusDays(17);
        org.joda.time.DateTime dateTime74 = dateMidnight73.toDateTimeISO();
        org.joda.time.DateTime dateTime76 = dateTime74.withMinuteOfHour(38);
        int int77 = dateTimeZone65.getOffset((org.joda.time.ReadableInstant) dateTime74);
        mutableDateTime57.setZone(dateTimeZone65);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean86 = interval82.contains((org.joda.time.ReadableInterval) interval85);
        java.lang.String str87 = interval82.toString();
        boolean boolean88 = interval79.isAfter((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval89 = interval6.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.ReadableInstant readableInstant90 = null;
        boolean boolean91 = interval79.contains(readableInstant90);
        org.joda.time.Interval interval92 = interval79.toInterval();
        long long93 = interval92.toDurationMillis();
        boolean boolean94 = interval92.containsNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1L + "'", long67 == 1L);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 139980000 + "'", int77 == 139980000);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53" + "'", str87, "1970-01-02T14:52:59.999+38:53/1970-01-02T14:52:59.999+38:53");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.set(9);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.minuteOfDay();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType19 = periodType18.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate localDate31 = localDate25.withDayOfMonth(13);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology33 = localDate25.getChronology();
        mutablePeriod21.add((long) '4', chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((-1L), 1L, periodType19, chronology33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.centuries();
        int int39 = periodType36.indexOf(durationFieldType38);
        boolean boolean40 = periodType19.isSupported(durationFieldType38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 32770, periodType19);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType45 = periodType44.withDaysRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 12, periodType45);
        org.joda.time.Period period47 = interval42.toPeriod(periodType45);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType49 = periodType48.withSecondsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.PeriodType periodType51 = periodType49.withHoursRemoved();
        org.joda.time.Period period52 = interval42.toPeriod(periodType49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = new org.joda.time.Period(868, 12, 38, 25, 976, (-39686206), 941, 79514722, periodType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.Duration duration23 = period17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Instant instant24 = instant10.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Interval interval25 = interval9.withDurationAfterStart((org.joda.time.ReadableDuration) duration23);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.year();
        mutableDateTime1.setHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableInstant) dateMidnight36, periodType40);
        int int42 = dateMidnight36.getMillisOfSecond();
        boolean boolean43 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Chronology chronology44 = dateMidnight36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone61);
        long long64 = dateTimeZone61.nextTransition((long) 1);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now(dateTimeZone61);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime67 = instant66.toMutableDateTime();
        mutableDateTime67.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime67.set(dateTimeFieldType70, 1);
        org.joda.time.LocalDate.Property property73 = localDate65.property(dateTimeFieldType70);
        boolean boolean74 = localDate51.isSupported(dateTimeFieldType70);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate(chronology75);
        int int77 = localDate76.getDayOfYear();
        org.joda.time.Chronology chronology78 = localDate76.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.months();
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType70.getField(chronology78);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 565, (-5820001L), chronology78);
        org.joda.time.Period period82 = new org.joda.time.Period((long) 53581961, 380712960000000000L, chronology78);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight36.plus((org.joda.time.ReadablePeriod) period82);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 54 + "'", int77 == 54);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateMidnight83);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = property3.addWrapFieldToCopy((int) 'a');
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plusWeeks(32769);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        int int12 = periodType9.indexOf(durationFieldType11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight7.withFieldAdded(durationFieldType11, 840);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.Duration duration31 = period25.toDurationTo((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Instant instant32 = instant18.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Interval interval33 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate37, (org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45);
        org.joda.time.Duration duration47 = period41.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Instant instant48 = instant34.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 'a', dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 'a', dateTimeZone54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate52, (org.joda.time.ReadablePartial) localDate55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight59, readableDuration60);
        org.joda.time.Duration duration62 = period56.toDurationTo((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Instant instant63 = instant49.minus((org.joda.time.ReadableDuration) duration62);
        boolean boolean64 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Interval interval65 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight7.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight.Property property67 = dateMidnight7.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(1322L);
        org.joda.time.DateTime dateTime2 = timeOfDay1.toDateTimeToday();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = timeOfDay1.getFieldTypes();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay7.toDateMidnight(dateTimeZone13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay7.dayOfMonth();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay7.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property16.addWrapFieldToCopy(119);
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(14);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.plusMinutes(150);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay7.plusHours(912);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.centuries();
        int int17 = periodType14.indexOf(durationFieldType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        int int19 = periodType14.indexOf(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay21 = timeOfDay7.withFieldAdded(durationFieldType18, 328);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate5, (org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(13);
        org.joda.time.DateTime dateTime12 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = localDate5.getChronology();
        mutablePeriod1.add((long) '4', chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField16 = chronology13.months();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate23, (org.joda.time.ReadablePartial) localDate26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.Duration duration33 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Instant instant34 = instant20.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47);
        org.joda.time.Duration duration49 = period43.toDurationTo((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Instant instant50 = instant36.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate54, (org.joda.time.ReadablePartial) localDate57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(1L, dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62);
        org.joda.time.Duration duration64 = period58.toDurationTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Instant instant65 = instant51.minus((org.joda.time.ReadableDuration) duration64);
        boolean boolean66 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval67 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean74 = interval70.contains((org.joda.time.ReadableInterval) interval73);
        boolean boolean75 = interval19.contains((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Chronology chronology76 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.year();
        org.joda.time.DurationField durationField78 = chronology76.weekyears();
        int int79 = durationField16.compareTo(durationField78);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy((int) 'x');
        org.joda.time.DurationField durationField11 = property7.getRangeDurationField();
        long long14 = durationField11.add((-61036588800000L), (long) 722);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2217375302400000L + "'", long14 == 2217375302400000L);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds(1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay(4);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(35213769);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[17, 1, 10, 1020000]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(250, (-96608));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -96608");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology23 = localDate15.getChronology();
        mutablePeriod11.add((long) '4', chronology23);
        org.joda.time.Period period25 = new org.joda.time.Period((-1L), 1L, periodType9, chronology23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.centuries();
        int int29 = periodType26.indexOf(durationFieldType28);
        boolean boolean30 = periodType9.isSupported(durationFieldType28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 'a', dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 'a', dateTimeZone35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate33, (org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        boolean boolean39 = localDate36.isSupported(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DurationField durationField43 = durationFieldType28.getField(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.hours();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(52, 32759, 1952, 1961, 79434912, 0, chronology40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1961 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minusMonths(79315175);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 'a', dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) localDate29);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withYear(79315);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0, 1970, 16, 14, 1, 3, 1969, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay31.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology44 = yearMonthDay31.getChronology();
        int int45 = yearMonthDay31.getYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868418627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=1,MILLISECOND=373,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays(17);
        org.joda.time.DateTime dateTime6 = dateMidnight5.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds(35213769);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.minusMinutes((int) (byte) 0);
        int int12 = timeOfDay11.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withField(dateTimeFieldType13, 79540050);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone5.isLocalDateTimeGap(localDateTime7);
        java.util.TimeZone timeZone9 = dateTimeZone5.toTimeZone();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.util.Locale.setDefault(category10, locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone9, locale12);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        boolean boolean18 = calendar16.isLenient();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513981464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=1,MILLISECOND=464,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7);
        org.joda.time.Period period10 = period8.minusMillis(13);
        org.joda.time.Period period12 = period8.minusDays(0);
        int int13 = period12.size();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10);
        int int16 = mutablePeriod15.getSeconds();
        mutablePeriod15.setSeconds((int) '#');
        int int19 = mutablePeriod15.getHours();
        mutablePeriod15.addMillis((int) (byte) 1);
        org.joda.time.Period period22 = period12.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.LocalDate localDate23 = localDate3.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(17);
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        int int31 = dateTime30.getYearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime30.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime30.withField(dateTimeFieldType34, 4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate23.withField(dateTimeFieldType34, 245);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1969 + "'", int31 == 1969);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getWeekyear();
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        java.lang.String str12 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 115, chronology11);
        mutableDateTime14.addYears(55);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getWeekyear();
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        java.lang.String str12 = chronology11.toString();
        org.joda.time.DurationField durationField13 = chronology11.weeks();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(obj0, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.hourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology11.centuries();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfFloorCopy();
        org.joda.time.Interval interval10 = property7.toInterval();
        org.joda.time.Interval interval11 = interval10.toInterval();
        org.joda.time.Chronology chronology12 = interval10.getChronology();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 1961, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType2.getField(chronology12);
        boolean boolean15 = dateTimeFieldType1.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology12.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology12.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.Period period21 = new org.joda.time.Period((-563554379999L), chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (short) -1, 566, 347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 566 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(20);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(1961);
        org.joda.time.LocalTime localTime13 = localTime11.plusMinutes(22);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours((-19));
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.Chronology chronology4 = localDate2.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.months();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType8, chronology10);
        int[] intArray13 = chronology4.get((org.joda.time.ReadablePeriod) period11, 0L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1645513750159L, chronology4);
        org.joda.time.DurationField durationField15 = chronology4.weekyears();
        long long17 = durationField15.getMillis(656);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = durationField15.getMillis(1035522775L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1035522775 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54 + "'", int3 == 54);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20701360512000L + "'", long17 == 20701360512000L);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("DateTimeField[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[monthOfYear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        mutableDateTime1.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime1.set(dateTimeFieldType4, 1);
        mutableDateTime1.addHours((-1));
        boolean boolean10 = mutableDateTime1.isBefore((long) 126);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant11, (org.joda.time.ReadableInstant) instant12);
        org.joda.time.Period period14 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Period period17 = period14.withPeriodType(periodType15);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime19.addMinutes(266);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 'a', dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 'a', dateTimeZone27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate25, (org.joda.time.ReadablePartial) localDate28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.Duration duration35 = period29.toDurationTo((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Instant instant36 = instant22.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 'a', dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 'a', dateTimeZone42);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate40, (org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight47, readableDuration48);
        org.joda.time.Duration duration50 = period44.toDurationTo((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Instant instant51 = instant37.minus((org.joda.time.ReadableDuration) duration50);
        boolean boolean52 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration50);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration54 = period14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant12, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minusDays(17);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateMidnight58, periodType62);
        org.joda.time.DateTime dateTime64 = dateMidnight58.toDateTime();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateMidnight58);
        java.lang.Object obj66 = mutableDateTime1.clone();
        mutableDateTime1.addYears(183);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "1970-01-02T00:00:00.000+38:53");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "1970-01-02T00:00:00.000+38:53");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "1970-01-02T00:00:00.000+38:53");
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.LocalDate localDate14 = localDate11.minusMonths(815);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate11.withDayOfMonth(744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 744 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.dayOfMonth();
        org.joda.time.DurationField durationField8 = property7.getDurationField();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = property7.getAsText(locale9);
        java.lang.String str11 = locale9.getISO3Language();
        java.lang.String str12 = locale9.getDisplayLanguage();
        java.lang.String str13 = locale2.getDisplayScript(locale9);
        java.lang.String str14 = locale0.getDisplayCountry(locale9);
        java.lang.String str15 = locale9.getISO3Language();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DurationField durationField20 = property19.getDurationField();
        org.joda.time.DateMidnight dateMidnight21 = property19.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight23 = property19.withMaximumValue();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = localDate25.getField(1);
        java.lang.String str28 = dateTimeField27.getName();
        boolean boolean29 = dateTimeField27.isLenient();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate35.isSupported(dateTimeFieldType37);
        int int39 = localDate35.getWeekyear();
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDate35, locale41);
        java.lang.String str43 = locale41.getDisplayVariant();
        int int44 = property19.getMaximumShortTextLength(locale41);
        java.lang.String str45 = locale9.getDisplayVariant(locale41);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tedesco" + "'", str12, "tedesco");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Kanada" + "'", str14, "Kanada");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "deu" + "'", str15, "deu");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "monthOfYear" + "'", str28, "monthOfYear");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc6d4" + "'", str42, "\uc6d4");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval4 = interval2.withEndMillis((long) 38);
        org.joda.time.Duration duration5 = interval4.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundHalfFloorCopy();
        org.joda.time.Interval interval12 = property9.toInterval();
        org.joda.time.Interval interval13 = interval12.toInterval();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone24);
        long long27 = dateTimeZone24.nextTransition((long) 1);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(dateTimeZone24);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) 53);
        org.joda.time.Interval interval31 = localDate16.toInterval(dateTimeZone24);
        org.joda.time.Interval interval32 = interval12.gap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Interval interval33 = interval4.gap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime35 = instant34.toMutableDateTime();
        mutableDateTime35.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone44);
        long long47 = dateTimeZone44.nextTransition((long) 1);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 13, dateTimeZone44);
        mutableDateTime35.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime35.era();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime35.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval52 = interval33.withStart((org.joda.time.ReadableInstant) mutableDateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNull(interval33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(20);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(1961);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime12.withMillisOfSecond(79437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79437 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.Chronology chronology10 = localDate6.getChronology();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        org.joda.time.Period period19 = period17.minusMillis(13);
        org.joda.time.Period period20 = period19.toPeriod();
        int[] intArray22 = chronology10.get((org.joda.time.ReadablePeriod) period19, 9056880000000L);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTime();
        mutableDateTime24.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime24.set(dateTimeFieldType27, 1);
        mutableDateTime24.addHours((-1));
        mutableDateTime24.addDays(31);
        org.joda.time.Duration duration34 = period19.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        int int38 = dateMidnight37.getYearOfCentury();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 'a', dateTimeZone44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate42, (org.joda.time.ReadablePartial) localDate45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.Duration duration52 = period46.toDurationTo((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Instant instant53 = instant39.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 'a', dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate57, (org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65);
        org.joda.time.Duration duration67 = period61.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Instant instant68 = instant54.minus((org.joda.time.ReadableDuration) duration67);
        boolean boolean69 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period71 = duration52.toPeriod();
        org.joda.time.Period period73 = period71.withMinutes(25728);
        org.joda.time.Period period75 = period73.withDays(2022);
        org.joda.time.Period period76 = period19.withFields((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Period period78 = period76.plusMonths(852);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 14975, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 70 + "'", int38 == 70);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        boolean boolean6 = dateTimeFormatter4.isOffsetParsed();
        java.util.Locale locale7 = dateTimeFormatter4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant8 = org.joda.time.Instant.parse("dayOfMonth", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        java.util.Date date5 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromDateFields(date5);
        int int7 = date5.getYear();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Jun 15 13:10:00 GMT 1915");
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.Interval interval9 = property6.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.Chronology chronology11 = interval9.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 1961, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType1.getField(chronology11);
        boolean boolean14 = dateTimeFieldType0.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.yearOfCentury();
        int int20 = dateTimeField17.getDifference((long) 126, (-3786619980000L));
        int int22 = dateTimeField17.get((-31536000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 119 + "'", int20 == 119);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69 + "'", int22 == 69);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long9 = dateTimeZone6.nextTransition((long) 1);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 13, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 38);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime10.minusDays(657);
        org.joda.time.DateTime.Property property16 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime18 = property16.addWrapFieldToCopy((-32));
        boolean boolean19 = dateTime18.isEqualNow();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.joda.time.Period period4 = new org.joda.time.Period(150, 44, 92, 0);
        org.joda.time.Period period6 = period4.withMonths(36694555);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 'a', dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.LocalDate localDate18 = localDate12.withDayOfMonth(13);
        org.joda.time.DateTime dateTime19 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology20 = localDate12.getChronology();
        mutablePeriod8.add((long) '4', chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.secondOfDay();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) period6, chronology20);
        org.joda.time.Period period27 = period6.withHours((int) 'u');
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category5, locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        java.lang.Appendable appendable13 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone20);
        long long23 = dateTimeZone20.nextTransition((long) 1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 13, dateTimeZone20);
        org.joda.time.DateTime dateTime26 = dateTime24.withMillis((long) 38);
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime29 = dateTime27.plusSeconds(32772);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        long long38 = dateTimeZone35.nextTransition((long) 1);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime41 = instant40.toMutableDateTime();
        mutableDateTime41.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime41.set(dateTimeFieldType44, 1);
        org.joda.time.LocalDate.Property property47 = localDate39.property(dateTimeFieldType44);
        org.joda.time.LocalDate localDate48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate50 = localDate48.withWeekOfWeekyear(4);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        int int52 = calendar51.getMinimalDaysInFirstWeek();
        calendar51.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay57 = org.joda.time.YearMonthDay.fromCalendarFields(calendar51);
        org.joda.time.Period period58 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType60 = periodType59.withSecondsRemoved();
        org.joda.time.Period period61 = period58.withPeriodType(periodType59);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate48, (org.joda.time.ReadablePartial) yearMonthDay57, periodType59);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay57.plusYears(0);
        java.lang.String str65 = yearMonthDay64.toString();
        org.joda.time.DateTime dateTime66 = yearMonthDay64.toDateTimeAtMidnight();
        boolean boolean67 = dateTime29.isAfter((org.joda.time.ReadableInstant) dateTime66);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(appendable13, (org.joda.time.ReadableInstant) dateTime66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=-61427868417938,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=2,MILLISECOND=62,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0023-06-08" + "'", str65, "0023-06-08");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        int int6 = dateMidnight5.getMillisOfSecond();
        long long7 = dateMidnight5.getMillis();
        org.joda.time.DateMidnight.Property property8 = dateMidnight5.year();
        org.joda.time.DateMidnight dateMidnight9 = property8.getDateMidnight();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-53580000L) + "'", long7 == (-53580000L));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.Period period11 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period12 = new org.joda.time.Period();
        org.joda.time.Period period14 = period12.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean16 = period14.isSupported(durationFieldType15);
        org.joda.time.Period period18 = period11.withFieldAdded(durationFieldType15, 0);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 12);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime22 = instant21.toMutableDateTime();
        mutableDateTime22.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone31);
        long long34 = dateTimeZone31.nextTransition((long) 1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 13, dateTimeZone31);
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime22.era();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime39.setDate((long) (short) -1);
        mutableDateTime22.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Duration duration43 = period11.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.minuteOfDay();
        mutableDateTime39.setSecondOfMinute(51);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868417863,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=2,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusMonths((int) (byte) 10);
        int int7 = dateMidnight4.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth(22);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime22 = property19.set(9);
        org.joda.time.MutableDateTime mutableDateTime23 = property19.getMutableDateTime();
        boolean boolean24 = dateMidnight16.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.setMillisOfSecond(2);
        java.lang.String str27 = mutableDateTime23.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        org.joda.time.DateMidnight dateMidnight34 = property32.roundHalfFloorCopy();
        org.joda.time.Interval interval35 = property32.toInterval();
        boolean boolean37 = interval35.isAfter((long) 267);
        org.joda.time.MutableInterval mutableInterval38 = interval35.toMutableInterval();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTime();
        mutableDateTime40.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime40.set(dateTimeFieldType43, 1);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 'a', dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 'a', dateTimeZone53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate51, (org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate localDate57 = localDate51.withDayOfMonth(13);
        org.joda.time.DateTime dateTime58 = localDate51.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology59 = localDate51.getChronology();
        mutablePeriod47.add((long) '4', chronology59);
        mutableDateTime40.add((org.joda.time.ReadablePeriod) mutablePeriod47);
        mutableDateTime40.setTime((long) 17);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime40.weekOfWeekyear();
        boolean boolean65 = interval35.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight69 = localDate67.toDateMidnight(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = mutableDateTime40.toDateTime(dateTimeZone68);
        boolean boolean71 = interval28.contains((org.joda.time.ReadableInstant) mutableDateTime40);
        int int72 = mutableDateTime40.getYearOfEra();
        boolean boolean74 = mutableDateTime40.isBefore((long) 79429672);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1961 + "'", int7 == 1961);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-02T00:00:09.002+38:53" + "'", str27, "1970-01-02T00:00:09.002+38:53");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withDate(0, (int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.addCopy((long) 100);
        org.joda.time.LocalTime localTime12 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) '#', (int) (byte) 10, (int) (byte) 1);
        java.util.Calendar.Builder builder12 = builder8.setDate((int) (byte) 10, (int) (short) 0, (int) (byte) 10);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar.Builder builder14 = builder8.setLocale(locale13);
        java.util.Calendar calendar15 = builder14.build();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar15);
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        java.time.ZoneId zoneId18 = timeZone17.toZoneId();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone(zoneId18);
        int int20 = timeZone19.getDSTSavings();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61850995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=10,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(86399, 71, 1323);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.minutes();
        org.joda.time.DurationField durationField11 = chronology9.weekyears();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology9);
        int int14 = dateMidnight13.getMillisOfSecond();
        int int15 = dateMidnight13.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((int) (short) -1, 1324, (int) (short) 10, 98, 79503984);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getWeeks();
        int int3 = mutablePeriod1.getDays();
        int int4 = mutablePeriod1.getMonths();
        mutablePeriod1.addYears(5070);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        java.util.Locale locale1 = new java.util.Locale("\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale1.toString(), "\u97d3\u56fd\u8a9e");
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((java.lang.Object) "PT0.034S", dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0.034S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.withField(dateTimeFieldType2, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1961);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.LocalDate localDate20 = localDate14.withDayOfMonth(13);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology22 = localDate14.getChronology();
        mutablePeriod10.add((long) '4', chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.clockhourOfDay();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType28 = periodType27.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 'a', dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 'a', dateTimeZone36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate34, (org.joda.time.ReadablePartial) localDate37);
        org.joda.time.LocalDate localDate40 = localDate34.withDayOfMonth(13);
        org.joda.time.DateTime dateTime41 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology42 = localDate34.getChronology();
        mutablePeriod30.add((long) '4', chronology42);
        org.joda.time.Period period44 = new org.joda.time.Period((-1L), 1L, periodType28, chronology42);
        int[] intArray46 = chronology22.get((org.joda.time.ReadablePeriod) period44, (long) 8);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight8.toMutableDateTime(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(39053286, 566, (-32), 261, 52, 0, 79318959, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 261 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[8]");
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 'a', dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.Duration duration13 = period7.toDurationTo((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Instant instant14 = instant0.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate18, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight25, readableDuration26);
        org.joda.time.Duration duration28 = period22.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Instant instant29 = instant15.minus((org.joda.time.ReadableDuration) duration28);
        boolean boolean30 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime32.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight39.getZone();
        long long42 = dateTimeZone40.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.minusDays(17);
        org.joda.time.DateTime dateTime49 = dateMidnight48.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.withMinuteOfHour(38);
        int int52 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        mutableDateTime32.setZone(dateTimeZone40);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) mutableDateTime32);
        mutableDateTime32.addMinutes(328);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 139980000 + "'", int52 == 139980000);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy(8);
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((long) 13);
        int int12 = localDateTime11.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDayOfMonth(21);
        int int15 = localDateTime11.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusMonths((int) 'a');
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 668 + "'", int12 == 668);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        long long12 = dateTimeZone8.convertUTCToLocal(0L);
        java.lang.String str14 = dateTimeZone8.getNameKey(957137340003L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 139980000L + "'", long12 == 139980000L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        int int5 = property4.getMaximumValue();
        org.joda.time.DurationField durationField6 = property4.getDurationField();
        java.util.Locale locale7 = java.util.Locale.JAPANESE;
        int int8 = property4.getMaximumTextLength(locale7);
        org.joda.time.TimeOfDay timeOfDay10 = property4.addWrapFieldToCopy(70);
        int int11 = timeOfDay10.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.withMillisOfSecond(122);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withHourOfDay(119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 119 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999 + "'", int5 == 999);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType14 = periodType13.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 'a', dateTimeZone22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate20, (org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate26 = localDate20.withDayOfMonth(13);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology28 = localDate20.getChronology();
        mutablePeriod16.add((long) '4', chronology28);
        org.joda.time.Period period30 = new org.joda.time.Period((-1L), 1L, periodType14, chronology28);
        int int31 = periodType14.size();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.DateMidnight dateMidnight37 = property35.roundHalfFloorCopy();
        org.joda.time.Interval interval38 = property35.toInterval();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.minusDays(17);
        org.joda.time.DateTime dateTime45 = dateMidnight44.toDateTimeISO();
        org.joda.time.DateTime dateTime47 = dateTime45.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight48 = dateTime45.toDateMidnight();
        org.joda.time.LocalDate localDate49 = dateTime45.toLocalDate();
        org.joda.time.Period period54 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate55 = localDate49.minus((org.joda.time.ReadablePeriod) period54);
        boolean boolean56 = interval38.equals((java.lang.Object) period54);
        boolean boolean57 = periodType14.equals((java.lang.Object) boolean56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 'a', dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 'a', dateTimeZone62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate60, (org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate localDate66 = localDate60.withDayOfMonth(13);
        org.joda.time.DateTime dateTime67 = localDate60.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology68 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone75 = dateMidnight74.getZone();
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(dateTimeZone75);
        long long78 = dateTimeZone75.nextTransition((long) 1);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) 13, dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(1L, dateTimeZone81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight82, readableDuration83);
        int int85 = period84.size();
        java.lang.String str86 = period84.toString();
        org.joda.time.Period period88 = period84.plusMonths(11);
        boolean boolean89 = dateTime79.equals((java.lang.Object) period88);
        int[] intArray92 = chronology68.get((org.joda.time.ReadablePeriod) period88, (long) 7, (long) ' ');
        org.joda.time.DateTimeField dateTimeField93 = chronology68.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(100L, (long) 79321, periodType14, chronology68);
        org.joda.time.PeriodType periodType95 = periodType14.withMinutesRemoved();
        org.joda.time.PeriodType periodType96 = periodType14.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) property8, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0S" + "'", str86, "PT0S");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.LocalDate localDate12 = localDate5.minusWeeks(489);
        org.joda.time.DateMidnight dateMidnight13 = localDate12.toDateMidnight();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 'a', dateTimeZone19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25);
        org.joda.time.Duration duration27 = period21.toDurationTo((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant28 = instant14.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 'a', dateTimeZone34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) localDate35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.Duration duration42 = period36.toDurationTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Instant instant43 = instant29.minus((org.joda.time.ReadableDuration) duration42);
        boolean boolean44 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        int int47 = localDate46.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateTime dateTime51 = dateTime49.plus((long) 1961);
        org.joda.time.DateTime dateTime53 = dateTime49.minusHours(657);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.minus((long) 2022);
        int int62 = dateMidnight58.getDayOfMonth();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateMidnight58);
        long long64 = interval63.getEndMillis();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54 + "'", int47 == 54);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-53580000L) + "'", long64 == (-53580000L));
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 'a', dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 'a', dateTimeZone9);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = localDate10.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.minutes();
        org.joda.time.DurationField durationField16 = chronology14.weekyears();
        org.joda.time.Period period17 = new org.joda.time.Period(0L, chronology14);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, (long) (short) 0, periodType3, chronology14);
        org.joda.time.DurationField durationField19 = chronology14.seconds();
        long long22 = durationField19.getMillis(817, 946688400000L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 817000L + "'", long22 == 817000L);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) (short) -1);
        boolean boolean9 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.ReadWritableInstant readWritableInstant10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = dateTimeFormatter6.parseInto(readWritableInstant10, "java.io.IOException: 2", (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime8.addMinutes(266);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 'a', dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 'a', dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate14, (org.joda.time.ReadablePartial) localDate17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22);
        org.joda.time.Duration duration24 = period18.toDurationTo((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Instant instant25 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 'a', dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 'a', dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, readableDuration37);
        org.joda.time.Duration duration39 = period33.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Instant instant40 = instant26.minus((org.joda.time.ReadableDuration) duration39);
        boolean boolean41 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39);
        mutableDateTime8.addMinutes(13);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-1L), (long) (short) -1);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((-1L), (long) (short) -1);
        boolean boolean51 = interval47.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone57 = dateMidnight56.getZone();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime64 = property61.set(9);
        org.joda.time.MutableDateTime mutableDateTime65 = property61.getMutableDateTime();
        boolean boolean66 = dateMidnight58.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        boolean boolean67 = interval50.isBefore((org.joda.time.ReadableInstant) dateMidnight58);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) dateMidnight58);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = dateTimeFormatter4.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime8, "T22:04:01.013", 923);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtCurrentTime(dateTimeZone2);
        int int4 = dateTime3.getCenturyOfEra();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        int int9 = localDate8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) 1961);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(11);
        org.joda.time.DateTime dateTime17 = dateTime11.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime11.withYear(999);
        org.joda.time.DateTime dateTime21 = dateTime11.withWeekyear(31);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 3);
        mutableDateTime23.setDate((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.dayOfMonth();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        org.joda.time.DateMidnight dateMidnight31 = property29.roundHalfFloorCopy();
        org.joda.time.Interval interval32 = property29.toInterval();
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Interval interval35 = interval33.withPeriodAfterStart(readablePeriod34);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableDuration) duration36);
        int int38 = dateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.addWeekyears(53580003);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1690819937599617");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2" + "'", str6, "2");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54 + "'", int9 == 54);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(2730640113182000L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int26 = localDateTime25.getWeekyear();
        int int28 = localDateTime25.getValue(1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.year();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868416955,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=3,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513983045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=3,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology11);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.millisOfSecond();
        int int14 = property13.getMaximumValue();
        org.joda.time.DurationField durationField15 = property13.getDurationField();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        int int17 = property13.getMaximumTextLength(locale16);
        org.joda.time.TimeOfDay timeOfDay19 = property13.addWrapFieldToCopy(70);
        int int20 = timeOfDay19.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property21 = timeOfDay19.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay19.withMinuteOfHour(50);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        org.joda.time.DateMidnight dateMidnight29 = property27.roundHalfFloorCopy();
        org.joda.time.Interval interval30 = property27.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.Chronology chronology32 = interval30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.dayOfMonth();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.DateMidnight dateMidnight38 = property36.roundHalfFloorCopy();
        org.joda.time.Interval interval39 = property36.toInterval();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.minusDays(17);
        org.joda.time.DateTime dateTime46 = dateMidnight45.toDateTimeISO();
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight49 = dateTime46.toDateMidnight();
        org.joda.time.LocalDate localDate50 = dateTime46.toLocalDate();
        org.joda.time.Period period55 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate56 = localDate50.minus((org.joda.time.ReadablePeriod) period55);
        boolean boolean57 = interval39.equals((java.lang.Object) period55);
        boolean boolean58 = interval30.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.DateTime dateTime59 = interval39.getStart();
        org.joda.time.Period period60 = interval39.toPeriod();
        org.joda.time.PeriodType periodType61 = period60.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) timeOfDay23, periodType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 999 + "'", int14 == 999);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 10);
        int int14 = mutablePeriod13.getSeconds();
        mutablePeriod13.setSeconds((int) '#');
        org.joda.time.Period period17 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.Period period20 = period17.withPeriodType(periodType18);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = period20.withMinutes(287);
        org.joda.time.LocalTime localTime25 = localTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 267);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(17);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) period18);
        int int20 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property22 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime10.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        int int4 = dateMidnight2.getWeekyear();
        java.util.Date date5 = dateMidnight2.toDate();
        java.time.Instant instant6 = date5.toInstant();
        java.util.Date date7 = java.util.Date.from(instant6);
        java.util.Date date8 = java.util.Date.from(instant6);
        date8.setMonth(16);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date8);
        java.lang.String str12 = date8.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 09:07:00 GMT 1969");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 09:07:00 GMT 1969");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Sun May 31 09:07:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Sun May 31 09:07:00 GMT 1970" + "'", str12, "Sun May 31 09:07:00 GMT 1970");
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) '4', 13, 10);
        java.util.Calendar calendar5 = builder0.build();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        int int14 = timeZone12.getOffset((long) 'a');
        java.util.Calendar.Builder builder15 = builder0.setTimeZone(timeZone12);
        java.util.Calendar.Builder builder19 = builder0.setTimeOfDay(69, 999, 11);
        java.util.Calendar.Builder builder23 = builder0.setTimeOfDay((int) (byte) 1, 79436, (int) 'u');
        java.util.Calendar.Builder builder27 = builder0.setTimeOfDay(245, 817, 24);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-60491318400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=53,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3);
        int int5 = period4.size();
        java.lang.String str6 = period4.toString();
        org.joda.time.Period period8 = period4.plusMonths(11);
        int int9 = period4.getMinutes();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        int int16 = period14.get(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod17 = period14.toMutablePeriod();
        int int18 = period14.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 'a', dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 'a', dateTimeZone23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate21, (org.joda.time.ReadablePartial) localDate24);
        org.joda.time.Period period26 = period14.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = period4.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period4.withMonths(5070);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        java.util.Date date6 = new java.util.Date(79336670, 143, 1970, 28, 71, 75841);
        int int7 = date6.getDay();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 25 02:15:01 GMT 79338587");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.parse("15 Feb 3869 13:10:00 GMT", dateTimeFormatter9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10);
        int int9 = mutablePeriod8.getWeeks();
        int int10 = mutablePeriod8.getDays();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 'a', dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 'a', dateTimeZone17);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfMonth(13);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology23 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone30);
        long long33 = dateTimeZone30.nextTransition((long) 1);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 13, dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, readableDuration38);
        int int40 = period39.size();
        java.lang.String str41 = period39.toString();
        org.joda.time.Period period43 = period39.plusMonths(11);
        boolean boolean44 = dateTime34.equals((java.lang.Object) period43);
        int[] intArray47 = chronology23.get((org.joda.time.ReadablePeriod) period43, (long) 7, (long) ' ');
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.DateTimeField dateTimeField49 = chronology23.weekyearOfCentury();
        mutablePeriod8.setPeriod(1010016000000L, 21L, chronology23);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateTimeField dateTimeField52 = chronology23.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(932, 17259926, 815, 79459491, 8003, (int) (byte) 0, 37439, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79459491 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 25]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        org.joda.time.Chronology chronology9 = localDate5.getChronology();
        org.joda.time.LocalDate localDate11 = localDate5.minusDays(100);
        org.joda.time.LocalDate.Property property12 = localDate5.dayOfMonth();
        org.joda.time.LocalDate.Property property13 = localDate5.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) (short) 1, 1, chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.millisOfSecond();
        int int5 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property4.setCopy(287);
        int int8 = timeOfDay7.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.withPeriodAdded(readablePeriod9, 1020000);
        org.joda.time.DateTime dateTime12 = timeOfDay7.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withYearOfCentury(656);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 656 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 999 + "'", int5 == 999);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 'a', dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 'a', dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate6, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(13);
        org.joda.time.DateTime dateTime13 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology14 = localDate6.getChronology();
        mutablePeriod2.add((long) '4', chronology14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(4320000000L, chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        boolean boolean18 = dateTimeField17.isLenient();
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        long long19 = dateTimeZone15.nextTransition((long) 79315175);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(36000001L, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = mutableDateTime22.toDateTime(dateTimeZone36);
        long long43 = dateTimeZone36.convertLocalToUTC(373248000000001969L, false, (-5820001L));
        long long45 = dateTimeZone15.getMillisKeepLocal(dateTimeZone36, (long) 647);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter6.withZone(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = dateTimeFormatter46.parseLocalDateTime("2035-02-21T22:05:20.932");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 79315175L + "'", long19 == 79315175L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 373247999860021969L + "'", long43 == 373247999860021969L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 647L + "'", long45 == 647L);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getWeekyear();
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay18.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay18.toDateMidnight();
        java.lang.String[] strArray29 = new java.lang.String[] { "weekyear", "weekyear" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        boolean boolean37 = strSet30.remove((java.lang.Object) readableDuration35);
        java.util.stream.Stream<java.lang.String> strStream38 = strSet30.parallelStream();
        boolean boolean39 = yearMonthDay18.equals((java.lang.Object) strSet30);
        boolean boolean40 = localDate5.equals((java.lang.Object) yearMonthDay18);
        java.lang.String str41 = yearMonthDay18.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = yearMonthDay18.getFieldType(0);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) dateMidnight49, periodType53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight49.dayOfYear();
        org.joda.time.DateTime dateTime56 = yearMonthDay18.toDateTime((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Period period57 = new org.joda.time.Period();
        org.joda.time.Period period59 = period57.plusMillis((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay18.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.withCenturyOfEra(1970);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType70 = periodType69.withSecondsRemoved();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (short) 100, (long) (byte) 0, periodType69, chronology71);
        org.joda.time.Period period74 = period72.minusHours(1);
        int int75 = period74.getSeconds();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight66.withPeriodAdded((org.joda.time.ReadablePeriod) period74, (int) (short) 1);
        org.joda.time.Period period78 = period74.normalizedStandard();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay18.minus((org.joda.time.ReadablePeriod) period78);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-23" + "'", str41, "2022-02-23");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds((int) '#');
        int int5 = mutablePeriod1.getHours();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) ' ');
        org.joda.time.LocalTime localTime15 = localTime13.withHourOfDay(20);
        java.lang.String str16 = localTime15.toString();
        org.joda.time.LocalTime localTime18 = localTime15.minusHours((-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int20 = localTime15.get(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType19.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod1.add(durationFieldType21, 53580003);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "20:38:13.568" + "'", str16, "20:38:13.568");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1L);
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.hourOfHalfday();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology10 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 'a', dateTimeZone15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate13.withDayOfMonth(13);
        long long21 = chronology10.set((org.joda.time.ReadablePartial) localDate19, 10L);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        boolean boolean25 = localDate19.equals((java.lang.Object) property24);
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundFloor();
        int int27 = mutableDateTime26.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1036800010L + "'", long21 == 1036800010L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.setSeconds((int) '#');
        int int5 = mutablePeriod1.getHours();
        mutablePeriod1.setYears(53);
        mutablePeriod1.setMinutes(1);
        mutablePeriod1.addSeconds(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = mutablePeriod1.getFieldType(79315175);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.time.ZoneId zoneId13 = timeZone12.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        java.time.ZoneId zoneId21 = timeZone20.toZoneId();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        boolean boolean23 = timeZone12.hasSameRules(timeZone20);
        calendar0.setTimeZone(timeZone20);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(2922789);
        java.util.TimeZone timeZone28 = calendar0.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone35);
        long long38 = dateTimeZone35.nextTransition((long) 1);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 13, dateTimeZone35);
        int int41 = dateTimeZone35.getOffsetFromLocal((long) 1970);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(1, (int) (byte) 1, 10, (int) (short) 0, 17);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withCenturyOfEra((int) (short) 10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withYear(17);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.dayOfMonth();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = property56.getAsText(locale57);
        java.lang.String str59 = dateTimeZone35.getShortName(0L, locale57);
        java.util.Locale.setDefault(locale57);
        java.lang.String str61 = timeZone28.getDisplayName(locale57);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61427868416190,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2922789,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=3,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513983810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=3,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 139980000 + "'", int41 == 139980000);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+38:53" + "'", str59, "+38:53");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Ora media di Greenwich" + "'", str61, "Ora media di Greenwich");
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setExtension('4', "java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtCurrentTime(dateTimeZone3);
        int int5 = instant0.compareTo((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 'a', dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = localDate11.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(chronology15);
        int int17 = dateTime4.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.centuries();
        int int24 = period22.get(durationFieldType23);
        org.joda.time.DateTime dateTime26 = dateTime4.withFieldAdded(durationFieldType23, 22);
        org.joda.time.DurationFieldType durationFieldType27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = dateTime26.withFieldAdded(durationFieldType27, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        java.lang.String str9 = periodType8.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period(552, 189, 36023888, 279, 402, 29, 28, (-800321), periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Hours" + "'", str9, "Hours");
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.joda.time.Period period1 = org.joda.time.Period.years(79429672);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 10);
        int int2 = mutablePeriod1.getSeconds();
        mutablePeriod1.addHours((int) (short) 0);
        mutablePeriod1.clear();
        org.joda.time.Period period6 = new org.joda.time.Period();
        org.joda.time.Period period8 = period6.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean10 = period8.isSupported(durationFieldType9);
        java.lang.String str11 = durationFieldType9.toString();
        int int12 = mutablePeriod1.get(durationFieldType9);
        int int13 = mutablePeriod1.getMillis();
        int int14 = mutablePeriod1.getYears();
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod1.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyears" + "'", str11, "weekyears");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set(9);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.getMutableDateTime();
        boolean boolean14 = dateMidnight6.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setMillisOfSecond(2);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.minuteOfDay();
        mutableDateTime13.addYears(999);
        mutableDateTime13.addMonths(79459491);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeField dateTimeField3 = localDate1.getField(1);
        java.lang.String str5 = dateTimeField3.getAsShortText((long) '4');
        long long8 = dateTimeField3.add(100L, 0);
        org.joda.time.DurationField durationField9 = dateTimeField3.getLeapDurationField();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        int int11 = calendar10.getMinimalDaysInFirstWeek();
        calendar10.set((int) (short) 1, 266, (int) (byte) 100);
        int int16 = calendar10.getMinimalDaysInFirstWeek();
        java.util.Date date22 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date22.setMonth((int) (short) 1);
        java.util.Date date30 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date30.setMonth((int) (short) 1);
        java.util.Date date38 = new java.util.Date((int) (short) 10, 1, 1961, 12, 70);
        date38.setMonth((int) (short) 1);
        boolean boolean41 = date30.before(date38);
        int int42 = date30.getHours();
        boolean boolean43 = date22.before(date30);
        date22.setMinutes(231);
        calendar10.setTime(date22);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.fromDateFields(date22);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(dateTimeZone54);
        boolean boolean57 = dateTimeZone54.equals((java.lang.Object) true);
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = dateTimeZone54.getName((long) 2, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTimeField3.getAsShortText((org.joda.time.ReadablePartial) localDate47, 143, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 143");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "gen" + "'", str5, "gen");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1731740940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1915,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=51,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 15 16:51:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Mon Feb 15 13:10:00 GMT 1915");
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Feb 15 13:10:00 GMT 1915");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+38:53" + "'", str61, "+38:53");
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 17);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        int int11 = property2.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime mutableDateTime13 = property2.add(10);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 'a', dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 'a', dateTimeZone21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate22.isSupported(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = localDate22.getChronology();
        org.joda.time.LocalDate localDate28 = localDate22.minusDays(100);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 17);
        mutableDateTime30.addMinutes(266);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight37.getZone();
        long long40 = dateTimeZone38.previousTransition((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.minusDays(17);
        org.joda.time.DateTime dateTime47 = dateMidnight46.toDateTimeISO();
        org.joda.time.DateTime dateTime49 = dateTime47.withMinuteOfHour(38);
        int int50 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime47);
        mutableDateTime30.setZone(dateTimeZone38);
        org.joda.time.DateTime dateTime52 = localDate28.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setRounding(dateTimeField55, 119);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 119");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 139980000 + "'", int50 == 139980000);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfMonth();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfFloorCopy();
        org.joda.time.Interval interval6 = property3.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Chronology chronology8 = interval6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.DateMidnight dateMidnight14 = property12.roundHalfFloorCopy();
        org.joda.time.Interval interval15 = property12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusDays(17);
        org.joda.time.DateTime dateTime22 = dateMidnight21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight25 = dateTime22.toDateMidnight();
        org.joda.time.LocalDate localDate26 = dateTime22.toLocalDate();
        org.joda.time.Period period31 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.LocalDate localDate32 = localDate26.minus((org.joda.time.ReadablePeriod) period31);
        boolean boolean33 = interval15.equals((java.lang.Object) period31);
        boolean boolean34 = interval6.isBefore((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime35 = interval15.getStart();
        org.joda.time.Interval interval36 = interval15.toInterval();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 'a', dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 'a', dateTimeZone41);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate39, (org.joda.time.ReadablePartial) localDate42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate42.isSupported(dateTimeFieldType44);
        int int46 = localDate42.getWeekyear();
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.months();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType52 = periodType51.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 'a', dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 'a', dateTimeZone60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate58, (org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate localDate64 = localDate58.withDayOfMonth(13);
        org.joda.time.DateTime dateTime65 = localDate58.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology66 = localDate58.getChronology();
        mutablePeriod54.add((long) '4', chronology66);
        org.joda.time.Chronology chronology68 = chronology66.withUTC();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, periodType51, chronology66);
        int int70 = mutablePeriod69.getMinutes();
        int[] intArray72 = chronology47.get((org.joda.time.ReadablePeriod) mutablePeriod69, (long) 292278993);
        org.joda.time.Period period73 = new org.joda.time.Period((java.lang.Object) interval36, chronology47);
        boolean boolean74 = interval36.containsNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 3, 9, 11, 18, 993]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.joda.time.Period period1 = org.joda.time.Period.years(189);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        int int9 = period7.get(durationFieldType8);
        boolean boolean10 = localTime0.isSupported(durationFieldType8);
        org.joda.time.Period period15 = new org.joda.time.Period(0, (int) '#', (int) '4', 8);
        org.joda.time.Period period16 = new org.joda.time.Period();
        org.joda.time.Period period18 = period16.minusMonths(53);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean20 = period18.isSupported(durationFieldType19);
        org.joda.time.Period period22 = period15.withFieldAdded(durationFieldType19, 0);
        org.joda.time.LocalTime localTime23 = localTime0.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = period22.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period22.getFieldType(566);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 'a', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 'a', dateTimeZone4);
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate5);
        org.joda.time.LocalDate localDate8 = localDate2.withDayOfMonth(13);
        org.joda.time.LocalDate localDate10 = localDate8.minusDays(32769);
        org.joda.time.Interval interval11 = localDate10.toInterval();
        boolean boolean13 = interval11.contains((long) 79334);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone19);
        long long22 = dateTimeZone19.nextTransition((long) 1);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        mutableDateTime25.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime25.set(dateTimeFieldType28, 1);
        org.joda.time.LocalDate.Property property31 = localDate23.property(dateTimeFieldType28);
        org.joda.time.LocalDate localDate32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate34 = localDate32.withWeekOfWeekyear(4);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        int int36 = calendar35.getMinimalDaysInFirstWeek();
        calendar35.set((int) (short) 1, 266, (int) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay41 = org.joda.time.YearMonthDay.fromCalendarFields(calendar35);
        org.joda.time.Period period42 = new org.joda.time.Period();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.Period period45 = period42.withPeriodType(periodType43);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate32, (org.joda.time.ReadablePartial) yearMonthDay41, periodType43);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay41.year();
        org.joda.time.YearMonthDay yearMonthDay48 = property47.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay50 = property47.setCopy(34);
        org.joda.time.Interval interval51 = yearMonthDay50.toInterval();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        boolean boolean53 = interval51.contains((org.joda.time.ReadableInstant) dateMidnight52);
        boolean boolean54 = interval11.overlaps((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTime dateTime55 = interval51.getStart();
        boolean boolean57 = interval51.isBefore((long) 186);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-61427868415606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=23,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=159,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=13,SECOND=4,MILLISECOND=394,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(1645513970165L);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("10:02:54.209");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"10:02:54.209\" is malformed at \":02:54.209\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}

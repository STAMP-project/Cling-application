import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        boolean boolean10 = node1.isEmpty();
        boolean boolean11 = node1.isNE();
        boolean boolean12 = node1.isComma();
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean14 = node1.isBlock();
        com.google.javascript.rhino.Node node15 = node1.cloneTree();
        com.google.javascript.rhino.Node node16 = node15.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node16);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        boolean boolean26 = node11.getBooleanProp(41);
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        boolean boolean32 = node27.hasChild(node29);
        boolean boolean33 = node29.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        java.lang.String str3 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str11 = jSDocInfo0.getMeaning();
        boolean boolean13 = jSDocInfo0.hasParameter("GE\n    EXPR_RESULT\n        NUMBER -1.0\n    NUMBER -1.0\n    SHEQ 10\n        NUMBER -1.0\n        NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.hasType();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo7.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo7.getReferences();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo7.getReferences();
        com.google.javascript.rhino.Node node11 = jSDocInfo7.getAssociatedNode();
        node1.setJSDocInfo(jSDocInfo7);
        jSDocInfo7.setLicense("NUMBER -1.0");
        int int15 = jSDocInfo7.getImplementedInterfaceCount();
        boolean boolean17 = jSDocInfo7.hasDescriptionForParameter("");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        boolean boolean28 = node26.isThis();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        boolean boolean42 = node36.isVar();
        com.google.javascript.rhino.Node node43 = node36.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node45.isVar();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        boolean boolean57 = node53.isWith();
        com.google.javascript.rhino.Node node58 = node45.srcref(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(130, node33, node36, node53, node62, 0, 15);
        com.google.javascript.rhino.Node node66 = node65.getFirstChild();
        boolean boolean67 = node65.isScript();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node69.hasChild(node73);
        boolean boolean75 = node69.isVar();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        java.lang.String str80 = node77.toString();
        boolean boolean81 = node77.isWith();
        com.google.javascript.rhino.Node node82 = node69.srcref(node77);
        boolean boolean83 = node77.isFor();
        boolean boolean84 = node77.isGetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node77);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(0, node26, node65, node77, 42, 46);
        jSDocInfo7.setAssociatedNode(node65);
        boolean boolean90 = jSDocInfo7.isNoAlias();
        boolean boolean91 = jSDocInfo7.isConsistentIdGenerator();
        java.lang.String str92 = jSDocInfo7.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = jSDocInfo7.getEnumParameterType();
        java.lang.String str94 = jSDocInfo7.getVersion();
        boolean boolean95 = jSDocInfo7.isExport();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER -1.0" + "'", str80, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(jSTypeExpression93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isInstanceOf();
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node7);
        boolean boolean10 = node7.isCatch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isFunction();
        boolean boolean14 = node12.isUnscopedQualifiedName();
        boolean boolean15 = node12.isEmpty();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        boolean boolean24 = node18.isVar();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        boolean boolean30 = node26.isWith();
        com.google.javascript.rhino.Node node31 = node18.srcref(node26);
        node18.detachChildren();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind35 = new com.google.javascript.jscomp.CodingConvention.Bind(node12, node18, node34);
        node34.setSourceFileForTesting("BITXOR 0\n");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(10, "java.io.IOException: BITXOR 0\n");
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        int int50 = node43.getLength();
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet54);
        java.lang.Object[] objArray57 = strSet54.toArray();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        int int62 = strList60.size();
        boolean boolean63 = strSet54.containsAll((java.util.Collection<java.lang.String>) strList60);
        java.util.Spliterator<java.lang.String> strSpliterator64 = strSet54.spliterator();
        boolean boolean65 = strSet54.isEmpty();
        boolean boolean67 = strSet54.add("NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList69 = jSDocInfo68.getExtendedInterfaces();
        java.lang.String str70 = jSDocInfo68.getReturnDescription();
        java.lang.String str71 = jSDocInfo68.getVersion();
        boolean boolean72 = jSDocInfo68.isNoAlias();
        java.lang.String str73 = jSDocInfo68.getFileOverview();
        boolean boolean74 = strSet54.contains((java.lang.Object) jSDocInfo68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList76 = jSDocInfo75.getExtendedInterfaces();
        java.lang.String str77 = jSDocInfo75.getReturnDescription();
        boolean boolean78 = jSDocInfo75.hasFileOverview();
        boolean boolean79 = strSet54.remove((java.lang.Object) boolean78);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node81 = node7.srcrefTree(node34);
        boolean boolean82 = node81.isRegExp();
        boolean boolean83 = node81.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[hi!]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        boolean boolean13 = staticSourceFile12.isExtern();
        int int15 = staticSourceFile12.getColumnOfOffset(39);
        int int17 = staticSourceFile12.getLineOfOffset(53);
        int int19 = staticSourceFile12.getLineOfOffset(2);
        java.lang.String str20 = staticSourceFile12.getName();
        int int22 = staticSourceFile12.getLineOfOffset(32);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str20, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(35, nodeArray3, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(10, nodeArray3, 100, 52);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray3);
        boolean boolean11 = node10.isBreak();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative13 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec14 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative13);
        com.google.javascript.rhino.Node node15 = null;
        com.google.javascript.rhino.Node node16 = assertionFunctionSpec14.getAssertedParam(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        boolean boolean22 = node18.isWith();
        boolean boolean23 = node18.isSyntheticBlock();
        boolean boolean24 = node18.isAnd();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec14.getAssertedType(node18, jSTypeRegistry25);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        boolean boolean31 = node28.isNull();
        boolean boolean32 = node28.isFunction();
        boolean boolean33 = node18.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node34 = node10.srcref(node18);
        boolean boolean35 = node18.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.hasOneChild();
        boolean boolean7 = node1.isDebugger();
        com.google.javascript.rhino.Node node8 = node1.cloneNode();
        boolean boolean9 = node1.isSyntheticBlock();
        com.google.javascript.rhino.InputId inputId10 = node1.getInputId();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        java.lang.String str15 = node12.toString();
        boolean boolean16 = node12.isWith();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int22 = node21.getChildCount();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node31 = node24.getParent();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isWith();
        com.google.javascript.rhino.Node node46 = node33.srcref(node41);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(130, node21, node24, node41, node50, 0, 15);
        com.google.javascript.rhino.Node node54 = node53.getFirstChild();
        com.google.javascript.rhino.Node node55 = node12.useSourceInfoFrom(node53);
        com.google.javascript.rhino.Node node56 = node53.cloneTree();
        java.lang.String str57 = node56.getQualifiedName();
        boolean boolean58 = node56.isNE();
        com.google.javascript.rhino.Node node59 = node1.srcrefTree(node56);
        boolean boolean60 = node56.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER -1.0" + "'", str15, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(130, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", 0, 12);
        node4.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        java.lang.String str14 = jSDocInfo9.getSourceName();
        java.lang.String str15 = jSDocInfo9.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo9.getThisType();
        boolean boolean17 = jSDocInfo9.hasModifies();
        java.lang.String str18 = jSDocInfo9.getLendsName();
        boolean boolean19 = jSDocInfo9.shouldPreserveTry();
        boolean boolean20 = jSDocInfo9.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getReturnType();
        node1.putProp(54, (java.lang.Object) jSDocInfo9);
        com.google.javascript.rhino.Node node24 = jSDocInfo9.getAssociatedNode();
        boolean boolean25 = jSDocInfo9.isConstructor();
        java.lang.String str26 = jSDocInfo9.getBlockDescription();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isInstanceOf();
        com.google.javascript.rhino.InputId inputId10 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(10, node8);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = null;
        node11.setJSDocInfo(jSDocInfo13);
        boolean boolean15 = node11.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(51, node6, (int) '#', (int) 'a');
        java.lang.String str10 = node9.getQualifiedName();
        int int12 = node9.getIntProp(4095);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((-1), node9, 0, 0);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(15, node15);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 41, 52, (int) (short) 100);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, node7, node9, node12);
        boolean boolean16 = node9.isBreak();
        com.google.javascript.rhino.Node node17 = node9.cloneNode();
        boolean boolean18 = node9.isScript();
        boolean boolean19 = node9.isTypeOf();
        boolean boolean20 = node9.isOptionalArg();
        com.google.javascript.rhino.Node node21 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo23.getParameterNames();
        boolean boolean26 = jSDocInfo23.hasParameter("hi!");
        com.google.javascript.rhino.Node node27 = jSDocInfo23.getAssociatedNode();
        jSDocInfo23.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str30 = jSDocInfo23.toString();
        boolean boolean31 = jSDocInfo23.containsDeclaration();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        boolean boolean37 = node33.isWith();
        int int39 = node33.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node33.new FileLevelJsDocBuilder();
        boolean boolean41 = node33.isNumber();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int47 = node46.getChildCount();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        boolean boolean55 = node49.isVar();
        com.google.javascript.rhino.Node node56 = node49.getParent();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        boolean boolean64 = node58.isVar();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        java.lang.String str69 = node66.toString();
        boolean boolean70 = node66.isWith();
        com.google.javascript.rhino.Node node71 = node58.srcref(node66);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(130, node46, node49, node66, node75, 0, 15);
        com.google.javascript.rhino.Node node79 = node78.getFirstChild();
        boolean boolean80 = node78.isLocalResultCall();
        boolean boolean81 = node78.isGetProp();
        com.google.javascript.rhino.Node node82 = node33.srcrefTree(node78);
        node33.setVarArgs(true);
        int int85 = node33.getCharno();
        node33.setVarArgs(false);
        jSDocInfo23.setAssociatedNode(node33);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(0, node33, (int) (byte) -1, (int) (byte) 100);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(52, node4, node91);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSDocInfo" + "'", str30, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER -1.0" + "'", str69, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 15 + "'", int85 == 15);
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        boolean boolean4 = jSDocInfo0.hasType();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isDefine();
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        strSet6.clear();
        java.lang.Object[] objArray8 = strSet6.toArray();
        strSet6.clear();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        int int4 = strList2.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean6 = strList2.remove((java.lang.Object) visibility5);
        boolean boolean8 = strList2.add("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getParameterNames();
        boolean boolean12 = jSDocInfo9.hasParameter("hi!");
        boolean boolean13 = jSDocInfo9.hasThisType();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo9.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo15.getParameterNames();
        boolean boolean17 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet16);
        strSet14.clear();
        boolean boolean19 = strList2.addAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        int int24 = strList22.size();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo26.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.stream();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        int int44 = node37.getLength();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.util.Spliterator<java.lang.String> strSpliterator51 = strSet48.spliterator();
        boolean boolean52 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet48);
        java.lang.Object[] objArray53 = strSet34.toArray();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.Node node61 = com.google.javascript.jscomp.NodeUtil.newExpr(node55);
        int int62 = node55.getLength();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean69 = strSet66.isEmpty();
        boolean boolean70 = strSet34.containsAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean71 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean72 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet27);
        int int73 = strSet27.size();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[hi!]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.InputId inputId27 = com.google.javascript.jscomp.NodeUtil.getInputId(node23);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship28 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node17, node23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        node38.setOptionalArg(true);
        node38.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        boolean boolean58 = node57.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node64 = node57.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node65 = node38.useSourceInfoFromForTree(node57);
        boolean boolean66 = node36.hasChild(node38);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        boolean boolean74 = node72.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection75 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node72);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node38, node72);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(44, node72, 42, 12);
        com.google.javascript.rhino.Node node80 = node8.srcrefTree(node72);
        node80.addSuppression("NUMBER -1.0");
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean85 = node84.isName();
        boolean boolean86 = node84.isSwitch();
        java.lang.String str87 = node84.toString();
        boolean boolean88 = node84.isNumber();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection89 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node84);
        boolean boolean90 = node84.isArrayLit();
        boolean boolean91 = node84.isParamList();
        com.google.javascript.rhino.Node node92 = node80.copyInformationFrom(node84);
        int int93 = node92.getType();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + subclassType15 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType15.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(nodeCollection75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "NUMBER -1.0" + "'", str87, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(nodeCollection89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 39 + "'", int93 == 39);
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setOptionalArg(true);
        java.lang.String str4 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative6 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec7 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative6);
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.Node node9 = assertionFunctionSpec7.getAssertedParam(node8);
        java.lang.String str10 = assertionFunctionSpec7.getFunctionName();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        node16.setType(2);
        com.google.javascript.rhino.Node node22 = node16.getLastSibling();
        com.google.javascript.rhino.Node node23 = assertionFunctionSpec7.getAssertedParam(node22);
        com.google.javascript.rhino.Node node24 = node1.copyInformationFromForTree(node22);
        node1.removeProp(41);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 44, 52, 37);
        node30.addSuppression("SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node62.setJSType(jSType64);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(45, node39, node62, 10, 2);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node71.hasChild(node75);
        com.google.javascript.rhino.Node node77 = com.google.javascript.jscomp.NodeUtil.newExpr(node71);
        boolean boolean78 = node77.isRegExp();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node80.isName();
        boolean boolean82 = node80.isSwitch();
        java.lang.String str83 = node80.toString();
        com.google.javascript.rhino.Node node84 = node77.useSourceInfoIfMissingFromForTree(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(50, node84);
        boolean boolean86 = node84.isGetterDef();
        boolean boolean87 = node84.isEmpty();
        boolean boolean88 = node84.isDo();
        boolean boolean89 = node84.isExprResult();
        boolean boolean90 = node84.isNoSideEffectsCall();
        com.google.javascript.jscomp.CodingConvention.Bind bind91 = new com.google.javascript.jscomp.CodingConvention.Bind(node30, node39, node84);
        node39.setVarArgs(false);
        boolean boolean94 = node39.isVar();
        boolean boolean95 = node39.isName();
        com.google.javascript.rhino.Node node96 = node1.copyInformationFrom(node39);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER -1.0" + "'", str83, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        int int9 = node2.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node2.new FileLevelJsDocBuilder();
        boolean boolean11 = node2.isAssignAdd();
        node2.setCharno(143361);
        com.google.javascript.rhino.Node node14 = null;
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        node24.setOptionalArg(true);
        node24.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node51 = node24.useSourceInfoFromForTree(node43);
        boolean boolean52 = node22.hasChild(node24);
        node22.setIsSyntheticBlock(true);
        boolean boolean55 = node22.isTypeOf();
        boolean boolean56 = node22.isOptionalArg();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node22.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node58 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(49, node2, node14, node22, node58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        boolean boolean37 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, node40, node42, node45);
        java.lang.String str49 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node40);
        node40.detachChildren();
        node40.addSuppression("InputId: java.io.IOException: NUMBER -1.0");
        boolean boolean53 = node40.isDo();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node40.getAncestors();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        node60.setType(2);
        boolean boolean66 = node60.isIn();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node60.setJSType(jSType67);
        int int69 = node60.getLineno();
        boolean boolean70 = node60.isGetProp();
        node40.addChildrenToFront(node60);
        com.google.javascript.rhino.Node node72 = node6.copyInformationFrom(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList74 = jSDocInfo73.getExtendedInterfaces();
        java.lang.String str75 = jSDocInfo73.getVersion();
        boolean boolean76 = jSDocInfo73.isInterface();
        boolean boolean77 = jSDocInfo73.isJavaDispatch();
        java.lang.String str78 = jSDocInfo73.getSourceName();
        java.lang.String str79 = jSDocInfo73.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression80 = jSDocInfo73.getThisType();
        boolean boolean81 = jSDocInfo73.hasModifies();
        java.lang.String str82 = jSDocInfo73.getLendsName();
        boolean boolean83 = jSDocInfo73.shouldPreserveTry();
        boolean boolean84 = jSDocInfo73.isNoCompile();
        node60.setJSDocInfo(jSDocInfo73);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSTypeExpressionList74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(jSTypeExpression80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        boolean boolean27 = node26.isGetterDef();
        java.util.Set<java.lang.String> strSet28 = node26.getDirectives();
        boolean boolean29 = node26.isDelProp();
        boolean boolean30 = node26.isAssignAdd();
        boolean boolean31 = node26.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isTypeOf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        double double41 = node39.getDouble();
        node24.addChildToFront(node39);
        node24.detachChildren();
        node24.setSourceFileForTesting("Named type with empty name component");
        boolean boolean46 = node24.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node24);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node24.setJSType(jSType48);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(staticSourceFile47);
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        node1.setLength(130);
        boolean boolean9 = node1.isUnscopedQualifiedName();
        node1.setSourceEncodedPositionForTree(16773220);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        boolean boolean11 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo12.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo12.getReferences();
        boolean boolean15 = jSDocInfo12.isJavaDispatch();
        java.lang.String str16 = jSDocInfo12.toString();
        boolean boolean17 = jSDocInfo12.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo18.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo18.setVisibility(visibility20);
        jSDocInfo12.setVisibility(visibility20);
        jSDocInfo0.setVisibility(visibility20);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JSDocInfo" + "'", str16, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node3.setOptionalArg(true);
        boolean boolean6 = node3.isAssign();
        java.lang.Object obj8 = node3.getProp((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node3.setJSType(jSType9);
        boolean boolean11 = node3.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        int int13 = node3.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.shouldPreserveTry();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("JSDocInfo");
        boolean boolean14 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node15 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.getDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0 0\n", jSTypeNative1);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        node1.setOptionalArg(true);
        int int25 = node1.getIntProp(38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        node7.setOptionalArg(true);
        node7.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        java.lang.String str32 = node29.toString();
        com.google.javascript.rhino.Node node33 = node26.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node34 = node7.useSourceInfoFromForTree(node26);
        boolean boolean35 = node7.hasOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        boolean boolean41 = node37.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.jscomp.CodingConvention.Bind bind57 = new com.google.javascript.jscomp.CodingConvention.Bind(node7, node37, node49);
        boolean boolean58 = node49.isNumber();
        jSDocInfo0.setAssociatedNode(node49);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER -1.0" + "'", str32, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile60);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        boolean boolean25 = node24.isRegExp();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean32 = node15.isEquivalentToTyped(node27);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(45, node15, node38, 10, 2);
        boolean boolean45 = node38.isFunction();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        java.lang.String str50 = node47.toString();
        boolean boolean51 = node47.isWith();
        boolean boolean52 = node47.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind53 = new com.google.javascript.jscomp.CodingConvention.Bind(node5, node38, node47);
        int int55 = node38.getIntProp(43);
        node38.removeProp(409642);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER -1.0" + "'", str30, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER -1.0" + "'", str50, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isTypeOf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        double double41 = node39.getDouble();
        node24.addChildToFront(node39);
        boolean boolean43 = node39.isQualifiedName();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        java.lang.String str48 = node45.toString();
        boolean boolean49 = node45.isVar();
        java.lang.String str50 = node45.getQualifiedName();
        com.google.javascript.rhino.InputId inputId51 = com.google.javascript.jscomp.NodeUtil.getInputId(node45);
        boolean boolean52 = node45.isQualifiedName();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        java.lang.String str60 = com.google.javascript.jscomp.NodeUtil.getSourceName(node54);
        node54.setSourceFileForTesting("hi!");
        boolean boolean63 = node54.isString();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        java.lang.String str68 = node65.toString();
        boolean boolean69 = node65.isWith();
        boolean boolean70 = node65.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo71.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection73 = jSDocInfo71.getReferences();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo71.getReferences();
        com.google.javascript.rhino.Node node75 = jSDocInfo71.getAssociatedNode();
        node65.setJSDocInfo(jSDocInfo71);
        com.google.javascript.rhino.Node node77 = node54.useSourceInfoIfMissingFromForTree(node65);
        boolean boolean78 = node65.isTry();
        boolean boolean79 = node65.isName();
        com.google.javascript.rhino.Node node80 = node45.clonePropsFrom(node65);
        boolean boolean81 = node39.isEquivalentTo(node45);
        boolean boolean82 = node39.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "NUMBER -1.0" + "'", str48, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "NUMBER -1.0" + "'", str68, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNull(strCollection73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet12.spliterator();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        int int31 = node24.getLength();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet35);
        java.lang.Object[] objArray38 = strSet35.toArray();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        int int43 = strList41.size();
        boolean boolean44 = strSet35.containsAll((java.util.Collection<java.lang.String>) strList41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo45.getParameterNames();
        boolean boolean48 = jSDocInfo45.hasParameter("hi!");
        boolean boolean49 = jSDocInfo45.hasThisType();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo51.getParameterNames();
        boolean boolean53 = strSet50.addAll((java.util.Collection<java.lang.String>) strSet52);
        strSet50.clear();
        boolean boolean55 = strList41.addAll((java.util.Collection<java.lang.String>) strSet50);
        boolean boolean56 = strSet12.addAll((java.util.Collection<java.lang.String>) strList41);
        java.util.Iterator<java.lang.String> strItor57 = strSet12.iterator();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative59 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec60 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative59);
        com.google.javascript.rhino.Node node61 = null;
        com.google.javascript.rhino.Node node62 = assertionFunctionSpec60.getAssertedParam(node61);
        java.lang.String str63 = assertionFunctionSpec60.getFunctionName();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        java.lang.String str71 = node65.getSourceFileName();
        com.google.javascript.rhino.Node node72 = assertionFunctionSpec60.getAssertedParam(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList74 = jSDocInfo73.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection75 = jSDocInfo73.getReferences();
        boolean boolean76 = jSDocInfo73.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo73.getReturnType();
        node65.setJSDocInfo(jSDocInfo73);
        boolean boolean79 = strSet12.remove((java.lang.Object) jSDocInfo73);
        boolean boolean80 = strSet12.isEmpty();
        int int81 = strSet12.size();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[hi!]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSTypeExpressionList74);
        org.junit.Assert.assertNull(strCollection75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        boolean boolean26 = node11.getBooleanProp(41);
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoFromForTree(node11);
        boolean boolean28 = node11.isGetElem();
        node11.setDouble((double) (byte) 10);
        boolean boolean31 = node11.isComma();
        int int32 = node11.getLineno();
        boolean boolean33 = node11.isSetterDef();
        boolean boolean34 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node11);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = node11.getExistingIntProp((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 10");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        boolean boolean9 = node1.isCase();
        boolean boolean10 = node1.isName();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        boolean boolean9 = jSDocInfo0.isExterns();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        int int12 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean10 = jSDocInfo0.hasParameter("NUMBER -1.0 [source_file: NUMBER -1.0\n]\n");
        jSDocInfo0.addSuppression("MOD Unknown class name");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean11 = node10.isNumber();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node18.isEquivalentToTyped(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(45, node18, node41, 10, 2);
        java.util.Set<java.lang.String> strSet48 = null;
        node18.setDirectives(strSet48);
        com.google.javascript.rhino.Node node50 = node10.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean51 = node18.isVoid();
        com.google.javascript.rhino.Node node52 = assertionFunctionSpec1.getAssertedParam(node18);
        java.lang.String str53 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]" + "'", str2, "EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]" + "'", str53, "EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]");
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        com.google.javascript.rhino.Node node12 = node2.getAncestor(45);
        com.google.javascript.rhino.Node node13 = node2.cloneNode();
        boolean boolean14 = node13.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("InputId: NUMBER 49.0 [input_id: InputId: ]");
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(50, "java.io.IOException");
        // The following exception was thrown during execution in test generation
        try {
            node2.setDouble((double) 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnStartLine();
        int int4 = typePosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo5.getParameterNames();
        boolean boolean8 = jSDocInfo5.hasParameter("hi!");
        boolean boolean9 = jSDocInfo5.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo5.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo5.getImplementedInterfaces();
        java.lang.String str12 = jSDocInfo5.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo5.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo5.getImplementedInterfaces();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        int int23 = node22.getType();
        jSDocInfo5.setAssociatedNode(node22);
        boolean boolean25 = node22.isLabel();
        boolean boolean26 = node22.isOr();
        int int27 = node22.getChildCount();
        typePosition0.setItem(node22);
        boolean boolean29 = node22.isScript();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 130 + "'", int23 == 130);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(36, 43, 409697);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isExpose();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        node1.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node10 = node1.removeChildren();
        com.google.javascript.rhino.Node node11 = node1.cloneTree();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        boolean boolean23 = node22.isRegExp();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node22.useSourceInfoIfMissingFromForTree(node25);
        java.lang.String str30 = node13.checkTreeEquals(node29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node37.isGetElem();
        node13.putProp((int) (short) 100, (java.lang.Object) boolean39);
        boolean boolean41 = node13.isGetProp();
        com.google.javascript.rhino.jstype.JSType jSType42 = node13.getJSType();
        int int43 = node13.getCharno();
        boolean boolean44 = node11.isEquivalentToTyped(node13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str30, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("Not declared as a type name");
        java.lang.String str14 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        java.lang.String str18 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node9);
        java.lang.String str19 = node9.toStringTree();
        jSDocInfo0.setAssociatedNode(node9);
        boolean boolean21 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str19, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        boolean boolean25 = strSet19.add("java.io.IOException: BITXOR 0\n");
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isDefine();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.toString();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        boolean boolean37 = node24.isTypeOf();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        double double41 = node39.getDouble();
        node24.addChildToFront(node39);
        com.google.javascript.rhino.Node node43 = node24.getLastChild();
        boolean boolean44 = node24.isObjectLit();
        boolean boolean45 = node24.isAssign();
        int int46 = node24.getChildCount();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node24.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNull(staticSourceFile47);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100\n");
        boolean boolean12 = jSDocInfo0.isExpose();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo6.getParameterNames();
        boolean boolean8 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet7);
        strSet5.clear();
        java.util.Iterator<java.lang.String> strItor10 = strSet5.iterator();
        java.util.Iterator<java.lang.String> strItor11 = strSet5.iterator();
        strSet5.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo13.getExtendedInterfaces();
        java.lang.String str15 = jSDocInfo13.getReturnDescription();
        java.lang.String str16 = jSDocInfo13.getVersion();
        jSDocInfo13.setDeprecated(true);
        boolean boolean19 = jSDocInfo13.hasBaseType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo13.getParameterNames();
        java.util.Iterator<java.lang.String> strItor21 = strSet20.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo22.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet23.stream();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node39 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        int int40 = node33.getLength();
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.util.Spliterator<java.lang.String> strSpliterator47 = strSet44.spliterator();
        boolean boolean48 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.Object[] objArray49 = strSet30.toArray();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        int int58 = node51.getLength();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet62);
        boolean boolean65 = strSet62.isEmpty();
        boolean boolean66 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet62);
        boolean boolean67 = strSet23.containsAll((java.util.Collection<java.lang.String>) strSet30);
        int int68 = strSet30.size();
        java.lang.Object[] objArray69 = strSet30.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo70.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection72 = jSDocInfo70.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = jSDocInfo70.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection74 = jSDocInfo70.getTypeNodes();
        java.util.Set<java.lang.String> strSet75 = jSDocInfo70.getParameterNames();
        boolean boolean76 = strSet30.addAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean77 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean78 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet20);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strItor21);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strSpliterator47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[hi!]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[hi!]");
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertNull(strCollection72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(nodeCollection74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        boolean boolean13 = staticSourceFile12.isExtern();
        int int15 = staticSourceFile12.getColumnOfOffset(39);
        boolean boolean16 = staticSourceFile12.isExtern();
        boolean boolean17 = staticSourceFile12.isExtern();
        int int19 = staticSourceFile12.getColumnOfOffset((int) '4');
        int int21 = staticSourceFile12.getColumnOfOffset(32);
        boolean boolean22 = staticSourceFile12.isExtern();
        int int24 = staticSourceFile12.getLineOffset((int) ' ');
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-2147483648) + "'", int24 == (-2147483648));
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getType();
        java.lang.String str4 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node2);
        java.lang.String str12 = node2.toStringTree();
        com.google.javascript.rhino.Node node13 = node2.getNext();
        boolean boolean14 = node13.isStringKey();
        boolean boolean15 = node13.isOptionalArg();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo17.getExtendedInterfaces();
        java.lang.String str19 = jSDocInfo17.getVersion();
        boolean boolean20 = jSDocInfo17.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo17.getType();
        boolean boolean23 = jSDocInfo17.hasParameterType("hi!");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo17.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo17.getTemplateTypeNames();
        node13.putProp(44, (java.lang.Object) jSDocInfo17);
        com.google.javascript.rhino.Node node27 = node13.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str12, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        java.util.Set<java.lang.String> strSet36 = null;
        node6.setDirectives(strSet36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        java.lang.String str56 = node39.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        boolean boolean65 = node63.isGetElem();
        node39.putProp((int) (short) 100, (java.lang.Object) boolean65);
        boolean boolean67 = node39.isGetProp();
        int int69 = node39.getIntProp((int) (byte) -1);
        node39.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node72 = node6.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node74.isName();
        boolean boolean76 = node74.isSwitch();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean79 = node74.hasChild(node78);
        com.google.javascript.rhino.Node node80 = com.google.javascript.jscomp.NodeUtil.newExpr(node74);
        boolean boolean81 = node74.isIn();
        boolean boolean82 = node74.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable83 = node74.children();
        com.google.javascript.rhino.Node node84 = node72.copyInformationFrom(node74);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node86 = node74.getChildAtIndex(40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(nodeIterable83);
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean63 = node50.isEquivalentToTyped(node62);
        java.lang.String str67 = node50.toString(true, true, true);
        boolean boolean68 = node50.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER -1.0" + "'", str67, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.isBreak();
        com.google.javascript.rhino.Node node12 = node4.cloneNode();
        boolean boolean13 = node4.isScript();
        java.lang.Object obj15 = node4.getProp(4095);
        boolean boolean16 = node4.isNull();
        boolean boolean17 = node4.isTrue();
        boolean boolean18 = node4.isOptionalArg();
        boolean boolean19 = node4.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.InputId inputId9 = null;
        node2.setInputId(inputId9);
        java.lang.Object obj12 = node2.getProp(52);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node14.setWasEmptyNode(true);
        boolean boolean17 = node14.isOr();
        boolean boolean18 = node14.isInstanceOf();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(4095, node2, node14, 130, 10);
        boolean boolean22 = node2.isFor();
        java.util.Set<java.lang.String> strSet23 = node2.getDirectives();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isFunction();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        boolean boolean14 = node8.isVar();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        java.lang.String str19 = node16.toString();
        boolean boolean20 = node16.isWith();
        com.google.javascript.rhino.Node node21 = node8.srcref(node16);
        boolean boolean22 = node16.isFor();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        boolean boolean27 = node24.isNull();
        boolean boolean28 = node24.isFunction();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        boolean boolean36 = node30.isVar();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isWith();
        com.google.javascript.rhino.Node node43 = node30.srcref(node38);
        java.lang.String str44 = node43.toString();
        boolean boolean45 = node43.isDec();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node56.setJSType(jSType61);
        boolean boolean63 = node56.isOptionalArg();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, node24, node43, node56, (int) (short) -1, 0);
        boolean boolean67 = node16.isDec();
        boolean boolean68 = node16.hasMoreThanOneChild();
        boolean boolean69 = node1.hasChild(node16);
        boolean boolean70 = node1.isParamList();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER -1.0" + "'", str19, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        boolean boolean14 = node8.isQualifiedName();
        boolean boolean15 = node8.isDec();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", 48, (int) (short) -1);
        boolean boolean20 = node19.isThis();
        com.google.javascript.rhino.Node node21 = node8.useSourceInfoFromForTree(node19);
        boolean boolean22 = node19.isContinue();
        boolean boolean23 = node19.isDo();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, node26, node28, node31);
        boolean boolean35 = node26.isTypeOf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        int int43 = node41.getLineno();
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        com.google.javascript.rhino.Node node45 = node26.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node56);
        node56.setCharno(31);
        java.lang.String str66 = node56.toString(false, true, true);
        java.lang.String str67 = node56.toString();
        boolean boolean68 = node56.isBreak();
        com.google.javascript.rhino.Node node69 = node45.useSourceInfoIfMissingFrom(node56);
        node19.addChildToBack(node56);
        com.google.javascript.rhino.jstype.JSType jSType71 = null;
        node19.setJSType(jSType71);
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER -1.0" + "'", str66, "NUMBER -1.0");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER -1.0" + "'", str67, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        node12.setSourceFileForTesting("Named type with empty name component");
        boolean boolean18 = node12.isLabelName();
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean21 = jSDocInfo0.hasParameter("Not declared as a constructor");
        boolean boolean22 = jSDocInfo0.isNoAlias();
        boolean boolean24 = jSDocInfo0.hasParameter("STRING BITXOR 0\n 41");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node26 = jSDocInfo0.getAssociatedNode();
        boolean boolean27 = node26.isContinue();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER -1.0", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        node4.setOptionalArg(true);
        node4.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node31 = node4.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.Node node32 = assertionFunctionSpec2.getAssertedParam(node4);
        boolean boolean33 = node4.isGetterDef();
        com.google.javascript.rhino.Node node34 = null;
        boolean boolean35 = node4.hasChild(node34);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node1.isNE();
        boolean boolean10 = node1.isObjectLit();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) ' ');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = node14.getJSType();
        boolean boolean16 = node14.isScript();
        boolean boolean17 = node14.isTry();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        node19.setOptionalArg(true);
        node19.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        boolean boolean39 = node38.isRegExp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node38.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node46 = node19.useSourceInfoFromForTree(node38);
        boolean boolean47 = node19.hasOneChild();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        java.lang.String str52 = node49.toString();
        boolean boolean53 = node49.isVar();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.Node node61 = com.google.javascript.jscomp.NodeUtil.newExpr(node55);
        boolean boolean62 = node61.isRegExp();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node68 = node61.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.jscomp.CodingConvention.Bind bind69 = new com.google.javascript.jscomp.CodingConvention.Bind(node19, node49, node61);
        boolean boolean70 = node49.isInstanceOf();
        com.google.javascript.rhino.Node node71 = node14.useSourceInfoIfMissingFrom(node49);
        boolean boolean72 = node71.isLocalResultCall();
        boolean boolean73 = node12.isEquivalentTo(node71);
        boolean boolean74 = node71.isDebugger();
        boolean boolean75 = node71.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node76 = node1.srcref(node71);
        com.google.javascript.rhino.InputId inputId77 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        boolean boolean78 = node1.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER -1.0" + "'", str52, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER -1.0" + "'", str67, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("java.io.IOException: NUMBER -1.0");
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        int int17 = node10.getLength();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.util.Spliterator<java.lang.String> strSpliterator24 = strSet21.spliterator();
        boolean boolean25 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.Object[] objArray26 = strSet7.toArray();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = strSet39.isEmpty();
        boolean boolean43 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        node49.setType(2);
        com.google.javascript.rhino.Node node55 = node49.getLastSibling();
        boolean boolean56 = strSet7.equals((java.lang.Object) node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo57.getExtendedInterfaces();
        java.lang.String str59 = jSDocInfo57.getVersion();
        boolean boolean60 = jSDocInfo57.isInterface();
        boolean boolean61 = jSDocInfo57.isJavaDispatch();
        java.lang.String str62 = jSDocInfo57.getSourceName();
        boolean boolean64 = jSDocInfo57.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean66 = jSDocInfo57.hasParameter("hi!");
        boolean boolean67 = strSet7.remove((java.lang.Object) jSDocInfo57);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo57.getParameterType("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo57.setVisibility(visibility70);
        boolean boolean72 = inputId1.equals((java.lang.Object) jSDocInfo57);
        boolean boolean73 = jSDocInfo57.isConsistentIdGenerator();
        java.lang.String str74 = jSDocInfo57.getOriginalCommentString();
        boolean boolean75 = jSDocInfo57.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[hi!]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1] [input_id: NUMBER -1.0]", (int) (byte) 100, 104);
        boolean boolean4 = node3.isArrayLit();
        node3.putBooleanProp(96, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node14.getJsDocBuilderForNode();
        boolean boolean19 = strSet5.equals((java.lang.Object) fileLevelJsDocBuilder18);
        strSet5.clear();
        strSet5.clear();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative23 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec24 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative23);
        java.lang.String str25 = assertionFunctionSpec24.getFunctionName();
        java.lang.String str26 = assertionFunctionSpec24.getFunctionName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        java.lang.String str31 = node28.toString();
        boolean boolean32 = node28.isWith();
        boolean boolean33 = node28.hasOneChild();
        boolean boolean34 = node28.isDebugger();
        com.google.javascript.rhino.Node node35 = node28.cloneNode();
        com.google.javascript.rhino.Node node36 = assertionFunctionSpec24.getAssertedParam(node35);
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node35.getIndexOfChild(node37);
        boolean boolean39 = strSet5.contains((java.lang.Object) node35);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo40 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER -1.0" + "'", str31, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("GT");
        java.lang.String str8 = jSDocInfo0.getMeaning();
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setCharno(2);
        boolean boolean5 = node1.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean29 = node12.isEquivalentToTyped(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(45, node12, node35, 10, 2);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        boolean boolean46 = node43.isVarArgs();
        boolean boolean47 = node12.hasChild(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        boolean boolean55 = node49.isVar();
        node49.setWasEmptyNode(false);
        boolean boolean58 = node43.hasChild(node49);
        com.google.javascript.rhino.Node node59 = node1.copyInformationFrom(node49);
        java.lang.String str60 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        boolean boolean61 = node1.isString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo1.getParameterNames();
        boolean boolean4 = jSDocInfo1.hasParameter("hi!");
        boolean boolean5 = jSDocInfo1.hasThisType();
        boolean boolean6 = jSDocInfo1.isIdGenerator();
        jSDocInfo1.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean9 = jSDocInfo1.isOverride();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        jSDocInfo1.setAssociatedNode(node17);
        boolean boolean21 = jSDocInfo1.hasParameter("Not declared as a type name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo1.getExtendedInterfaces();
        boolean boolean23 = jSDocInfo1.isConsistentIdGenerator();
        boolean boolean24 = jSDocInfo1.hasBaseType();
        com.google.javascript.rhino.Node node25 = jSDocInfo1.getAssociatedNode();
        boolean boolean26 = node25.isQuotedString();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative28 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec29 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Unknown class name", jSTypeNative28);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.InputId inputId42 = com.google.javascript.jscomp.NodeUtil.getInputId(node38);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node32, node38);
        boolean boolean44 = node38.isQualifiedName();
        boolean boolean45 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node46 = assertionFunctionSpec29.getAssertedParam(node38);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(47, node25, node38);
        com.google.javascript.rhino.InputId inputId48 = node38.getInputId();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + subclassType30 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType30.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(inputId48);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(46);
        node8.addChildrenToFront(node10);
        typePosition0.setItem(node8);
        boolean boolean13 = node8.isOr();
        int int14 = node8.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isFunction();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        boolean boolean19 = node13.isVar();
        com.google.javascript.rhino.Node node20 = node13.getParent();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        boolean boolean28 = node22.isVar();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        boolean boolean34 = node30.isWith();
        com.google.javascript.rhino.Node node35 = node22.srcref(node30);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(130, node10, node13, node30, node39, 0, 15);
        com.google.javascript.rhino.Node node43 = node1.useSourceInfoFromForTree(node39);
        boolean boolean44 = node43.hasOneChild();
        boolean boolean45 = node43.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node20);
        boolean boolean29 = node1.hasOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.isVar();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.jscomp.CodingConvention.Bind bind51 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node31, node43);
        com.google.javascript.rhino.InputId inputId53 = new com.google.javascript.rhino.InputId("");
        java.lang.String str54 = inputId53.getIdName();
        java.lang.String str55 = inputId53.getIdName();
        node31.setInputId(inputId53);
        boolean boolean57 = node31.isThrow();
        boolean boolean58 = node31.isGetProp();
        boolean boolean59 = node31.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException");
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "REGEXP 52");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException(throwable4);
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException(throwable10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException11);
        iOException7.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("NUMBER -1.0");
        java.io.IOException iOException18 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException17);
        iOException7.addSuppressed((java.lang.Throwable) iOException18);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException(throwable22);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException(throwable24);
        iOException23.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", (java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException("java.io.IOException: java.io.IOException", (java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException28);
        iOException7.addSuppressed((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException("EXPR_RESULT\n    NUMBER -1.0\n", (java.lang.Throwable) iOException29);
        java.lang.Throwable throwable33 = null;
        java.io.IOException iOException34 = new java.io.IOException(throwable33);
        java.lang.Throwable throwable35 = null;
        java.io.IOException iOException36 = new java.io.IOException(throwable35);
        iOException34.addSuppressed((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException("hi!", (java.lang.Throwable) iOException34);
        iOException29.addSuppressed((java.lang.Throwable) iOException38);
        java.lang.Throwable throwable40 = null;
        java.io.IOException iOException41 = new java.io.IOException(throwable40);
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        java.lang.Throwable[] throwableArray43 = iOException41.getSuppressed();
        java.lang.Throwable[] throwableArray44 = iOException41.getSuppressed();
        java.io.IOException iOException46 = new java.io.IOException("java.io.IOException");
        iOException41.addSuppressed((java.lang.Throwable) iOException46);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.lang.Throwable throwable50 = null;
        java.io.IOException iOException51 = new java.io.IOException(throwable50);
        java.lang.Throwable throwable52 = null;
        java.io.IOException iOException53 = new java.io.IOException(throwable52);
        iOException51.addSuppressed((java.lang.Throwable) iOException53);
        java.io.IOException iOException55 = new java.io.IOException("hi!", (java.lang.Throwable) iOException51);
        java.io.IOException iOException56 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.lang.Throwable[] throwableArray57 = iOException51.getSuppressed();
        iOException48.addSuppressed((java.lang.Throwable) iOException51);
        iOException38.addSuppressed((java.lang.Throwable) iOException48);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException38);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setOptionalArg(true);
        java.lang.String str4 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node5 = node1.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        java.lang.String str24 = node7.checkTreeEquals(node23);
        boolean boolean25 = node7.isScript();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        boolean boolean33 = node27.isVar();
        boolean boolean34 = node27.isBreak();
        node7.addChildrenToFront(node27);
        boolean boolean36 = node27.isBlock();
        com.google.javascript.rhino.Node node37 = node1.srcref(node27);
        com.google.javascript.rhino.Node node38 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str24, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor2 = strSet1.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet1.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo4.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo4.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo4.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo4.getTypeNodes();
        boolean boolean9 = strSet1.contains((java.lang.Object) jSDocInfo4);
        jSDocInfo4.setLicense("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo4.getVisibility();
        boolean boolean13 = jSDocInfo4.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo4.getThrownTypes();
        com.google.javascript.rhino.Node node15 = jSDocInfo4.getAssociatedNode();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(46);
        node8.addChildrenToFront(node10);
        typePosition0.setItem(node8);
        int int13 = typePosition0.getPositionOnEndLine();
        int int14 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        boolean boolean19 = node16.isNull();
        boolean boolean20 = node16.isFunction();
        node16.putBooleanProp(12, false);
        node16.setVarArgs(false);
        boolean boolean26 = node16.isSyntheticBlock();
        typePosition0.setItem(node16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.hasParameterType("InputId: java.io.IOException");
        java.lang.String str8 = jSDocInfo0.getMeaning();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        com.google.javascript.rhino.Node node3 = node1.cloneTree();
        int int4 = node1.getCharno();
        java.util.Set<java.lang.String> strSet5 = node1.getDirectives();
        java.lang.String str6 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        boolean boolean11 = node8.isNull();
        boolean boolean12 = node8.isFunction();
        node8.putBooleanProp(12, false);
        node8.setVarArgs(false);
        boolean boolean18 = node8.isAnd();
        boolean boolean19 = node8.isIn();
        node8.setSourceEncodedPosition((int) 'a');
        boolean boolean22 = node8.isAnd();
        com.google.javascript.rhino.Node node23 = node1.srcrefTree(node8);
        boolean boolean24 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        boolean boolean37 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        java.lang.String str56 = node39.checkTreeEquals(node55);
        int int58 = node55.getIntProp(100);
        com.google.javascript.rhino.Node node59 = node6.srcrefTree(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node69 = node6.copyInformationFromForTree(node67);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder70 = node6.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder70.append("InputId: Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean4 = node3.isVar();
        int int5 = node3.getChildCount();
        boolean boolean6 = node3.isNumber();
        java.lang.String str7 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node7.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node7);
        boolean boolean13 = node7.isNumber();
        java.lang.String str14 = node7.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        int int2 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation((int) (short) 0, (int) (byte) 1, 130, 16);
        int int8 = stringPosition0.getPositionOnStartLine();
        int int9 = stringPosition0.getEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER -1.0 0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0 0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        int int12 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 130 + "'", int9 == 130);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node15.hasChild(node19);
        com.google.javascript.rhino.Node node21 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        boolean boolean22 = node21.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        com.google.javascript.rhino.Node node28 = node21.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean29 = node12.isEquivalentToTyped(node24);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(45, node12, node35, 10, 2);
        java.util.Set<java.lang.String> strSet42 = null;
        node12.setDirectives(strSet42);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node45.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind52 = new com.google.javascript.jscomp.CodingConvention.Bind(node5, node12, node45);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.Node node61 = com.google.javascript.jscomp.NodeUtil.newExpr(node55);
        boolean boolean62 = node61.isRegExp();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        java.lang.String str67 = node64.toString();
        com.google.javascript.rhino.Node node68 = node61.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(50, node68);
        com.google.javascript.rhino.Node node70 = node12.srcref(node69);
        namePosition0.setItem(node69);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node73.hasChild(node77);
        com.google.javascript.rhino.Node node79 = com.google.javascript.jscomp.NodeUtil.newExpr(node73);
        int int80 = node79.getType();
        com.google.javascript.rhino.Node node81 = node79.getFirstChild();
        boolean boolean82 = node81.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList84 = jSDocInfo83.getExtendedInterfaces();
        java.lang.String str85 = jSDocInfo83.getReturnDescription();
        boolean boolean86 = jSDocInfo83.hasFileOverview();
        node81.setJSDocInfo(jSDocInfo83);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile88 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node81);
        com.google.javascript.rhino.Node node89 = node69.useSourceInfoFromForTree(node81);
        java.lang.String str90 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node69);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER -1.0" + "'", str67, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 130 + "'", int80 == 130);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(staticSourceFile88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean4 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException");
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        boolean boolean5 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isWith();
        int int13 = node7.getIntProp((int) ' ');
        boolean boolean14 = node7.isNE();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        com.google.javascript.rhino.Node node26 = node20.getLastSibling();
        com.google.javascript.rhino.Node node27 = node7.srcref(node26);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean53 = node52.isRegExp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node59 = node52.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean60 = node43.isEquivalentToTyped(node55);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node66.setJSType(jSType68);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(45, node43, node66, 10, 2);
        boolean boolean73 = node66.isFunction();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        boolean boolean79 = node75.isWith();
        boolean boolean80 = node75.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind81 = new com.google.javascript.jscomp.CodingConvention.Bind(node33, node66, node75);
        com.google.javascript.rhino.Node node82 = node7.useSourceInfoFrom(node75);
        jSDocInfo0.setAssociatedNode(node7);
        java.util.Set<java.lang.String> strSet84 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility85 = jSDocInfo0.getVisibility();
        jSDocInfo0.setDeprecated(true);
        boolean boolean88 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0" + "'", str58, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(visibility85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(35, nodeArray4, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409642, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray4);
        boolean boolean11 = node10.isAssignAdd();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        boolean boolean4 = node3.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isFunction();
        com.google.javascript.rhino.Node node8 = node6.cloneTree();
        boolean boolean9 = node6.isAnd();
        java.lang.String str10 = node3.checkTreeEquals(node6);
        node3.setSourceFileForTesting("java.io.IOException: Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.children();
        node3.setType((int) (short) 10);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection16 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n" + "'", str10, "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(nodeCollection16);
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = null;
        namePosition0.setItem(node4);
        int int6 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node7 = namePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        node1.setLength(130);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        int int17 = node10.getLength();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet21);
        boolean boolean25 = strSet21.add("");
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet21.spliterator();
        node1.setDirectives((java.util.Set<java.lang.String>) strSet21);
        boolean boolean28 = node1.isQuotedString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        node10.setOptionalArg(true);
        node10.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        boolean boolean30 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node37 = node10.useSourceInfoFromForTree(node29);
        boolean boolean38 = node8.hasChild(node10);
        node8.setIsSyntheticBlock(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        node8.putProp(45, (java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 1, node8, 15, (int) (short) 0);
        int int48 = node8.getLength();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        boolean boolean54 = node50.isWith();
        boolean boolean55 = node50.isBreak();
        node50.setLength(130);
        boolean boolean58 = node50.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = node50.getStaticSourceFile();
        com.google.javascript.rhino.Node node60 = node50.cloneTree();
        com.google.javascript.rhino.Node node61 = node8.useSourceInfoFromForTree(node50);
        com.google.javascript.rhino.InputId inputId62 = node50.getInputId();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable63 = node50.getAncestors();
        boolean boolean64 = node50.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(staticSourceFile59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(inputId62);
        org.junit.Assert.assertNotNull(ancestorIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = node1.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node1.setJSType(jSType17);
        com.google.javascript.rhino.Node node19 = null;
        boolean boolean20 = node1.hasChild(node19);
        com.google.javascript.rhino.Node node21 = node1.removeFirstChild();
        boolean boolean22 = node1.isDo();
        boolean boolean23 = node1.isQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet12.spliterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        java.lang.String str23 = com.google.javascript.jscomp.NodeUtil.getSourceName(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean25 = strSet12.equals((java.lang.Object) node24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        int int41 = node34.getLength();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.String str48 = node31.checkTreeEquals(node34);
        node31.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType51 = node31.getJSType();
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        boolean boolean53 = strSet12.remove((java.lang.Object) node52);
        boolean boolean54 = node52.isAssignAdd();
        java.lang.String str55 = com.google.javascript.jscomp.NodeUtil.getSourceName(node52);
        boolean boolean56 = node52.isString();
        boolean boolean57 = node52.isContinue();
        int int58 = node52.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node27 = node20.removeFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        java.lang.String str30 = jSDocInfo28.getVersion();
        boolean boolean31 = jSDocInfo28.isInterface();
        java.lang.String str32 = jSDocInfo28.getLendsName();
        java.lang.String str33 = jSDocInfo28.getOriginalCommentString();
        node20.setJSDocInfo(jSDocInfo28);
        boolean boolean35 = jSDocInfo28.isHidden();
        boolean boolean36 = jSDocInfo28.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo28.getImplementedInterfaces();
        com.google.javascript.rhino.Node node38 = jSDocInfo28.getAssociatedNode();
        boolean boolean39 = jSDocInfo28.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo28.getEnumParameterType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        boolean boolean66 = jSDocInfo55.hasModifies();
        java.lang.String str67 = jSDocInfo55.getReturnDescription();
        int int68 = jSDocInfo55.getParameterCount();
        boolean boolean69 = jSDocInfo55.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList70 = jSDocInfo55.getThrownTypes();
        java.lang.String str71 = jSDocInfo55.getSourceName();
        java.lang.String str72 = jSDocInfo55.getFileOverview();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        java.lang.String str66 = jSDocInfo55.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo55.getThisType();
        boolean boolean69 = jSDocInfo55.hasParameter("Named type with empty name component");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo55.getEnumParameterType();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        boolean boolean9 = node5.isOr();
        boolean boolean10 = node5.isQualifiedName();
        boolean boolean11 = node5.isCase();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec13 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.InputId inputId26 = com.google.javascript.jscomp.NodeUtil.getInputId(node22);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship27 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node16, node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, node30, node32, node35);
        boolean boolean39 = node32.wasEmptyNode();
        java.lang.String str40 = node32.getQualifiedName();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node43 = node32.copyInformationFrom(node42);
        java.lang.Object obj45 = node42.getProp(4);
        boolean boolean46 = node16.isEquivalentToTyped(node42);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = null;
        com.google.javascript.rhino.jstype.JSType jSType48 = assertionFunctionSpec13.getAssertedType(node16, jSTypeRegistry47);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        boolean boolean58 = node57.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node64 = node57.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(50, node64);
        boolean boolean66 = node64.isGetterDef();
        boolean boolean67 = node64.isTry();
        int int68 = node64.getType();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.rhino.jstype.JSType jSType70 = assertionFunctionSpec13.getAssertedType(node64, jSTypeRegistry69);
        com.google.javascript.rhino.Node node71 = node5.copyInformationFromForTree(node64);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + subclassType14 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType14.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 130 + "'", int68 == 130);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.lang.String str10 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative18 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec19 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        boolean boolean35 = node34.isRegExp();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        java.lang.String str40 = node37.toString();
        com.google.javascript.rhino.Node node41 = node34.useSourceInfoIfMissingFromForTree(node37);
        boolean boolean42 = node25.isEquivalentToTyped(node37);
        com.google.javascript.rhino.Node node43 = assertionFunctionSpec19.getAssertedParam(node25);
        node25.setSourceEncodedPosition(53);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        boolean boolean53 = node47.isVar();
        node47.setWasEmptyNode(false);
        boolean boolean56 = node47.isFalse();
        boolean boolean57 = node47.isArrayLit();
        java.lang.String str58 = node47.toStringTree();
        boolean boolean59 = node25.hasChild(node47);
        com.google.javascript.rhino.Node node60 = node10.useSourceInfoFrom(node25);
        boolean boolean61 = node60.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER -1.0" + "'", str40, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0\n" + "'", str58, "NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        int int10 = node3.getLength();
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet14.spliterator();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        java.lang.String str25 = com.google.javascript.jscomp.NodeUtil.getSourceName(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        boolean boolean27 = strSet14.equals((java.lang.Object) node26);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        int int43 = node36.getLength();
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet47);
        java.lang.String str50 = node33.checkTreeEquals(node36);
        node33.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType53 = node33.getJSType();
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node33);
        boolean boolean55 = strSet14.remove((java.lang.Object) node54);
        boolean boolean56 = node54.isBreak();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = null;
        com.google.javascript.rhino.jstype.JSType jSType58 = assertionFunctionSpec1.getAssertedType(node54, jSTypeRegistry57);
        node54.setSourceFileForTesting("java.io.IOException: java.io.IOException: NUMBER -1.0");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSType58);
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node40.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node7, node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(50, node63);
        com.google.javascript.rhino.Node node65 = node7.srcref(node64);
        node65.removeProp(0);
        boolean boolean68 = node65.isLabelName();
        node65.setLineno(54);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node72.hasChild(node76);
        com.google.javascript.rhino.Node node78 = com.google.javascript.jscomp.NodeUtil.newExpr(node72);
        boolean boolean79 = node78.isRegExp();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean82 = node81.isName();
        boolean boolean83 = node81.isSwitch();
        java.lang.String str84 = node81.toString();
        com.google.javascript.rhino.Node node85 = node78.useSourceInfoIfMissingFromForTree(node81);
        int int86 = node78.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node78.children();
        boolean boolean88 = node78.isDo();
        com.google.javascript.rhino.Node node89 = node78.removeChildren();
        int int90 = node65.getIndexOfChild(node78);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "NUMBER -1.0" + "'", str84, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(nodeIterable87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.hasOneChild();
        boolean boolean7 = node1.isLocalResultCall();
        boolean boolean8 = node1.isQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        boolean boolean17 = node15.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection18 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node15);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        boolean boolean32 = node26.isVar();
        com.google.javascript.rhino.Node node33 = node26.getParent();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        boolean boolean47 = node43.isWith();
        com.google.javascript.rhino.Node node48 = node35.srcref(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(130, node23, node26, node43, node52, 0, 15);
        java.lang.String str56 = node15.checkTreeEquals(node23);
        com.google.javascript.rhino.Node node57 = node23.getLastSibling();
        boolean boolean58 = node23.isContinue();
        boolean boolean59 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node23);
        com.google.javascript.rhino.Node node60 = node1.useSourceInfoIfMissingFrom(node23);
        boolean boolean61 = node1.isTrue();
        node1.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeCollection18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getStartLine();
        namePosition0.setPositionInformation((int) (short) 1, (-1), 44, 4095);
        int int10 = namePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node1.getJsDocBuilderForNode();
        boolean boolean11 = node1.isName();
        boolean boolean12 = node1.isInstanceOf();
        node1.setSourceFileForTesting("Named type with empty name component");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node9.isFor();
        boolean boolean16 = node9.isGetterDef();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec18 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int24 = node23.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        boolean boolean32 = node26.isVar();
        com.google.javascript.rhino.Node node33 = node26.getParent();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        boolean boolean47 = node43.isWith();
        com.google.javascript.rhino.Node node48 = node35.srcref(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(130, node23, node26, node43, node52, 0, 15);
        boolean boolean56 = node43.isTypeOf();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        double double60 = node58.getDouble();
        node43.addChildToFront(node58);
        node43.detachChildren();
        com.google.javascript.rhino.Node node63 = node43.getFirstChild();
        com.google.javascript.rhino.Node node64 = assertionFunctionSpec18.getAssertedParam(node63);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        java.lang.String str69 = node66.toString();
        boolean boolean70 = node66.isWith();
        int int72 = node66.getIntProp((int) ' ');
        boolean boolean73 = node66.isNE();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node75.hasChild(node79);
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node79.setJSType(jSType81);
        node79.setType(2);
        com.google.javascript.rhino.Node node85 = node79.getLastSibling();
        com.google.javascript.rhino.Node node86 = node66.srcref(node85);
        node85.putBooleanProp(0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry90 = null;
        com.google.javascript.rhino.jstype.JSType jSType91 = assertionFunctionSpec18.getAssertedType(node85, jSTypeRegistry90);
        java.lang.String str92 = node85.getQualifiedName();
        node9.addChildrenToFront(node85);
        boolean boolean94 = node85.isScript();
        boolean boolean95 = node85.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + (-1.0d) + "'", double60 == (-1.0d));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER -1.0" + "'", str69, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.hasParameter("Not declared as a type name");
        boolean boolean9 = jSDocInfo0.isConstant();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        jSDocInfo0.addSuppression("java.io.IOException: hi!");
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node10.setJSType(jSType12);
        com.google.javascript.rhino.InputId inputId14 = com.google.javascript.jscomp.NodeUtil.getInputId(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship15 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node4, node10);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 100, node18, node20, node23);
        boolean boolean27 = node20.wasEmptyNode();
        java.lang.String str28 = node20.getQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node31 = node20.copyInformationFrom(node30);
        java.lang.Object obj33 = node30.getProp(4);
        boolean boolean34 = node4.isEquivalentToTyped(node30);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = null;
        com.google.javascript.rhino.jstype.JSType jSType36 = assertionFunctionSpec1.getAssertedType(node4, jSTypeRegistry35);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        boolean boolean46 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(50, node52);
        boolean boolean54 = node52.isGetterDef();
        boolean boolean55 = node52.isTry();
        int int56 = node52.getType();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = null;
        com.google.javascript.rhino.jstype.JSType jSType58 = assertionFunctionSpec1.getAssertedType(node52, jSTypeRegistry57);
        boolean boolean59 = node52.isNumber();
        org.junit.Assert.assertTrue("'" + subclassType2 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType2.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(inputId14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 130 + "'", int56 == 130);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        node1.setCharno(2);
        boolean boolean5 = node1.isObjectLit();
        java.lang.String str6 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node1);
        boolean boolean7 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo55.getParameterType("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        java.lang.String str68 = jSDocInfo55.getReturnDescription();
        boolean boolean69 = jSDocInfo55.isNoAlias();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean9 = jSDocInfo0.hasParameter("hi!");
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        boolean boolean17 = node15.isGetterDef();
        boolean boolean18 = node15.isVar();
        // The following exception was thrown during execution in test generation
        try {
            node15.setDouble((double) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EXPR_RESULT is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet43.spliterator();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        com.google.javascript.rhino.Node node60 = com.google.javascript.jscomp.NodeUtil.newExpr(node54);
        int int61 = node54.getLength();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet65);
        java.util.Spliterator<java.lang.String> strSpliterator68 = strSet65.spliterator();
        boolean boolean69 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet65);
        java.util.stream.Stream<java.lang.String> strStream70 = strSet51.parallelStream();
        boolean boolean71 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.Object[] objArray72 = strSet43.toArray();
        int int73 = strSet43.size();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isComma();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        int int14 = node7.getLength();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean22 = node7.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node7.setJSType(jSType23);
        boolean boolean25 = node7.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFromForTree(node29);
        node7.setVarArgs(false);
        com.google.javascript.rhino.Node node33 = node1.srcref(node7);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        boolean boolean42 = node36.isVar();
        com.google.javascript.rhino.InputId inputId43 = null;
        node36.setInputId(inputId43);
        java.lang.Object obj46 = node36.getProp(52);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node48.setWasEmptyNode(true);
        boolean boolean51 = node48.isOr();
        boolean boolean52 = node48.isInstanceOf();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(4095, node36, node48, 130, 10);
        int int56 = node48.getLength();
        boolean boolean57 = node48.isQualifiedName();
        boolean boolean58 = node48.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType59 = node48.getJSType();
        com.google.javascript.rhino.Node node60 = node48.removeChildren();
        java.lang.String str61 = node7.checkTreeEquals(node48);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        double double6 = node4.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.rhino.jstype.JSType jSType8 = assertionFunctionSpec2.getAssertedType(node4, jSTypeRegistry7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.InputId inputId32 = null;
        node26.setInputId(inputId32);
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec2.getAssertedParam(node26);
        int int35 = node34.getSideEffectFlags();
        boolean boolean36 = node34.isSwitch();
        node34.putIntProp(130, (int) (byte) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) -1, "EXPR_RESULT 32", 44, (int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        java.lang.String str5 = stringPosition0.getItem();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        stringPosition0.setItem("InputId: Unknown class name");
        int int10 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        java.lang.String str5 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node1);
        boolean boolean6 = node1.isDec();
        boolean boolean7 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(11);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(53, "java.io.IOException: java.io.IOException");
        boolean boolean4 = node3.isOr();
        node3.setCharno((int) (short) 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.InputId inputId16 = com.google.javascript.jscomp.NodeUtil.getInputId(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node24.getType();
        com.google.javascript.rhino.Node node26 = node12.copyInformationFromForTree(node24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(0, node3, node26, 15, 8);
        java.lang.Object obj31 = node29.getProp(49);
        boolean boolean32 = node29.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(inputId16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 130 + "'", int25 == 130);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("NUMBER 100.0 100\n");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(35, nodeArray5, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(48, nodeArray5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(409642, nodeArray5, (int) (byte) -1, 97);
        com.google.javascript.rhino.Node node13 = assertionFunctionSpec1.getAssertedParam(node12);
        java.lang.String str14 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 100.0 100\n" + "'", str14, "NUMBER 100.0 100\n");
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        boolean boolean23 = node17.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        boolean boolean29 = node25.isWith();
        com.google.javascript.rhino.Node node30 = node17.srcref(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        boolean boolean39 = node38.isRegExp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node38.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 0, node25, node41, node51, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node58 = node10.srcref(node57);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newExpr(node60);
        node60.setOptionalArg(true);
        boolean boolean69 = node10.hasChild(node60);
        boolean boolean70 = node10.isThrow();
        node10.setDouble((double) (short) 100);
        int int73 = node10.getLineno();
        boolean boolean74 = node10.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo27.getExtendedInterfaces();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        boolean boolean34 = node30.isVar();
        jSDocInfo27.setAssociatedNode(node30);
        boolean boolean36 = node30.isContinue();
        com.google.javascript.rhino.Node node37 = node14.clonePropsFrom(node30);
        node37.setLineno(38);
        com.google.javascript.rhino.Node node41 = node37.getAncestor(4095);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(45, "BITXOR 0\n", 41, 111);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.jstype.JSType jSType49 = null;
        node47.setJSType(jSType49);
        node47.setType(2);
        com.google.javascript.rhino.Node node53 = node47.getLastSibling();
        boolean boolean54 = strSet5.equals((java.lang.Object) node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        boolean boolean62 = jSDocInfo55.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean64 = jSDocInfo55.hasParameter("hi!");
        boolean boolean65 = strSet5.remove((java.lang.Object) jSDocInfo55);
        boolean boolean66 = jSDocInfo55.hasModifies();
        java.lang.String str67 = jSDocInfo55.getReturnDescription();
        int int68 = jSDocInfo55.getParameterCount();
        boolean boolean69 = jSDocInfo55.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList70 = jSDocInfo55.getThrownTypes();
        boolean boolean71 = jSDocInfo55.isExport();
        boolean boolean72 = jSDocInfo55.isImplicitCast();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = null;
        jSDocInfo0.setVisibility(visibility12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        boolean boolean17 = node15.isGetterDef();
        boolean boolean18 = node15.isVar();
        boolean boolean19 = node15.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node23.setOptionalArg(true);
        boolean boolean26 = node23.isAssign();
        java.lang.Object obj28 = node23.getProp((int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node23.setJSType(jSType29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo31.getParameterNames();
        boolean boolean34 = jSDocInfo31.hasParameter("hi!");
        boolean boolean35 = jSDocInfo31.hasThisType();
        boolean boolean36 = jSDocInfo31.isIdGenerator();
        jSDocInfo31.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean39 = jSDocInfo31.isOverride();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        jSDocInfo31.setAssociatedNode(node47);
        boolean boolean50 = node47.isCatch();
        boolean boolean51 = node47.hasChildren();
        boolean boolean52 = node23.isEquivalentTo(node47);
        java.lang.String str53 = node23.toStringTree();
        boolean boolean54 = node23.isStringKey();
        com.google.javascript.rhino.Node node55 = node15.srcrefTree(node23);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isExprResult();
        boolean boolean58 = node55.isInc();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n" + "'", str53, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        java.lang.String str11 = jSDocInfo0.getLicense();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        boolean boolean13 = jSDocInfo0.isInterface();
        boolean boolean14 = jSDocInfo0.isIdGenerator();
        boolean boolean15 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 10, (int) (short) -1, 27);
        boolean boolean4 = node3.isVar();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isAnd();
        boolean boolean7 = node3.isOnlyModifiesThisCall();
        boolean boolean8 = node3.isFalse();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        com.google.javascript.rhino.InputId inputId10 = com.google.javascript.jscomp.NodeUtil.getInputId(node6);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        int int19 = node12.getLength();
        boolean boolean20 = node12.isNew();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        int int29 = node22.getLength();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet33);
        boolean boolean37 = node22.getBooleanProp(41);
        com.google.javascript.rhino.Node node38 = node12.useSourceInfoFromForTree(node22);
        boolean boolean39 = node22.isGetElem();
        com.google.javascript.rhino.Node node40 = node6.useSourceInfoFrom(node22);
        node40.setOptionalArg(false);
        node40.setVarArgs(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        node50.setType(2);
        boolean boolean56 = node50.isIn();
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node node65 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        boolean boolean66 = node63.isFunction();
        com.google.javascript.rhino.Node node67 = node50.srcref(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(51, node40, node50);
        com.google.javascript.rhino.Node node69 = node40.cloneNode();
        boolean boolean70 = node69.isVar();
        boolean boolean71 = node69.isWhile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node2.isTypeOf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        int int19 = node17.getLineno();
        java.util.Set<java.lang.String> strSet20 = node17.getDirectives();
        com.google.javascript.rhino.Node node21 = node2.useSourceInfoFrom(node17);
        com.google.javascript.rhino.InputId inputId22 = com.google.javascript.jscomp.NodeUtil.getInputId(node2);
        boolean boolean23 = node2.isOptionalArg();
        com.google.javascript.rhino.Node node24 = node2.cloneTree();
        java.lang.String str25 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node2);
        boolean boolean26 = node2.isEmpty();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        boolean boolean36 = node28.isNew();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        int int45 = node38.getLength();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet49);
        boolean boolean53 = node38.getBooleanProp(41);
        com.google.javascript.rhino.Node node54 = node28.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        boolean boolean59 = node54.hasChild(node56);
        boolean boolean60 = node56.isVar();
        boolean boolean61 = node56.isVar();
        com.google.javascript.rhino.Node node62 = node56.cloneNode();
        com.google.javascript.rhino.Node node63 = node2.useSourceInfoFromForTree(node56);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(35, nodeArray5, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(0, nodeArray5, 4, 27);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(45, nodeArray5, (int) '#', 4);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) ' ', nodeArray5);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        boolean boolean26 = node25.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(50, node32);
        com.google.javascript.rhino.Node node34 = node16.clonePropsFrom(node33);
        boolean boolean35 = node33.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER -1.0" + "'", str31, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isNumber();
        boolean boolean46 = node41.isComma();
        boolean boolean47 = node41.isDebugger();
        boolean boolean48 = node41.isWith();
        node5.addChildrenToBack(node41);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = null;
        node5.setStaticSourceFile(staticSourceFile50);
        boolean boolean52 = node5.isContinue();
        boolean boolean53 = node5.isNot();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node9.isFor();
        boolean boolean16 = node9.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            node9.setString("EXPR_RESULT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int5 = node4.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node14 = node7.getParent();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        boolean boolean22 = node16.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        java.lang.String str27 = node24.toString();
        boolean boolean28 = node24.isWith();
        com.google.javascript.rhino.Node node29 = node16.srcref(node24);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(130, node4, node7, node24, node33, 0, 15);
        com.google.javascript.rhino.Node node37 = node36.getFirstChild();
        java.util.Set<java.lang.String> strSet38 = null;
        node37.setDirectives(strSet38);
        boolean boolean40 = node37.isScript();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n", (int) (byte) 0, 39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        boolean boolean49 = node46.isExprResult();
        int int50 = node44.getIndexOfChild(node46);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable51 = node44.getAncestors();
        int int52 = node44.getLineno();
        boolean boolean53 = node44.isGetterDef();
        boolean boolean54 = node44.isAnd();
        int int55 = node37.getIndexOfChild(node44);
        boolean boolean56 = node44.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "NUMBER -1.0" + "'", str27, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        int int26 = node14.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node27 = node20.removeFirstChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        java.lang.String str30 = jSDocInfo28.getVersion();
        boolean boolean31 = jSDocInfo28.isInterface();
        java.lang.String str32 = jSDocInfo28.getLendsName();
        java.lang.String str33 = jSDocInfo28.getOriginalCommentString();
        node20.setJSDocInfo(jSDocInfo28);
        boolean boolean35 = jSDocInfo28.isHidden();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo28.getParameterNames();
        boolean boolean37 = jSDocInfo28.hasModifies();
        boolean boolean38 = jSDocInfo28.containsDeclaration();
        boolean boolean39 = jSDocInfo28.isExport();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection5 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n");
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        int int10 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strCollection5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.getIdName();
        java.lang.String str4 = inputId1.toString();
        java.lang.String str5 = inputId1.toString();
        java.lang.String str6 = inputId1.getIdName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        boolean boolean25 = node24.isRegExp();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean32 = node15.isEquivalentToTyped(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        node15.setStaticSourceFile(staticSourceFile33);
        int int35 = node15.getType();
        boolean boolean36 = node15.isThrow();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 1, node9, node15, 41, (int) (byte) 100);
        int int40 = node9.getCharno();
        boolean boolean41 = inputId1.equals((java.lang.Object) node9);
        node9.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        boolean boolean48 = node47.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isFunction();
        com.google.javascript.rhino.Node node52 = node50.cloneTree();
        boolean boolean53 = node50.isAnd();
        java.lang.String str54 = node47.checkTreeEquals(node50);
        node47.setSourceFileForTesting("java.io.IOException: Unknown class name");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node47.children();
        node47.setType((int) (short) 10);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: java.io.IOException");
        node62.setOptionalArg(false);
        java.lang.String str65 = node62.getSourceFileName();
        boolean boolean66 = node62.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            node9.replaceChild(node47, node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "InputId: " + "'", str4, "InputId: ");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "InputId: " + "'", str5, "InputId: ");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER -1.0" + "'", str30, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 39 + "'", int35 == 39);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n" + "'", str54, "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 100);
        boolean boolean2 = node1.isFor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        java.lang.String str5 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) '#', 4095, 38, 39);
        int int11 = stringPosition0.getStartLine();
        int int12 = stringPosition0.getPositionOnEndLine();
        int int13 = stringPosition0.getStartLine();
        int int14 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 39 + "'", int12 == 39);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 39 + "'", int14 == 39);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.lang.String str10 = jSDocInfo0.getLendsName();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        boolean boolean12 = jSDocInfo0.hasBaseType();
        boolean boolean13 = jSDocInfo0.isNoSideEffects();
        boolean boolean14 = jSDocInfo0.isNoCompile();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection15 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeCollection15);
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setOptionalArg(true);
        java.lang.String str4 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node5 = node1.removeChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        java.lang.String str24 = node7.checkTreeEquals(node23);
        boolean boolean25 = node7.isScript();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        boolean boolean33 = node27.isVar();
        boolean boolean34 = node27.isBreak();
        node7.addChildrenToFront(node27);
        boolean boolean36 = node27.isBlock();
        com.google.javascript.rhino.Node node37 = node1.srcref(node27);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isFunction();
        boolean boolean41 = node39.isUnscopedQualifiedName();
        boolean boolean42 = node39.isEmpty();
        boolean boolean43 = node39.isEmpty();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node45.isVar();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        boolean boolean57 = node53.isWith();
        com.google.javascript.rhino.Node node58 = node45.srcref(node53);
        node45.detachChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind62 = new com.google.javascript.jscomp.CodingConvention.Bind(node39, node45, node61);
        int int64 = node61.getIntProp(0);
        com.google.javascript.rhino.Node node65 = node37.useSourceInfoIfMissingFromForTree(node61);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str24, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 1.0f, 2, (int) (short) 100);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        node5.setOptionalArg(true);
        node5.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        boolean boolean25 = node24.isRegExp();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        java.lang.String str30 = node27.toString();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node32 = node5.useSourceInfoFromForTree(node24);
        boolean boolean33 = node5.hasOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        boolean boolean39 = node35.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.jscomp.CodingConvention.Bind bind55 = new com.google.javascript.jscomp.CodingConvention.Bind(node5, node35, node47);
        boolean boolean56 = node47.isNumber();
        boolean boolean57 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node47);
        node47.detachChildren();
        node3.addChildToBack(node47);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER -1.0" + "'", str30, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative2 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec3 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative2);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        boolean boolean19 = node18.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node18.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean26 = node9.isEquivalentToTyped(node21);
        com.google.javascript.rhino.Node node27 = assertionFunctionSpec3.getAssertedParam(node9);
        boolean boolean28 = node27.isGetterDef();
        boolean boolean29 = node27.isAssign();
        node27.setType(8);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        java.lang.String str36 = node35.toStringTree();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isFunction();
        boolean boolean40 = node38.isUnscopedQualifiedName();
        boolean boolean41 = node38.isEmpty();
        com.google.javascript.rhino.Node node42 = node35.srcref(node38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(10, node27, node42);
        boolean boolean44 = node43.isSwitch();
        int int45 = node43.getChildCount();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BITXOR 0\n" + "'", str36, "BITXOR 0\n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node17.getType();
        com.google.javascript.rhino.Node node19 = node5.copyInformationFromForTree(node17);
        boolean boolean20 = node19.isFunction();
        boolean boolean21 = node19.hasMoreThanOneChild();
        node19.setCharno(10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo24.getExtendedInterfaces();
        java.lang.String str26 = jSDocInfo24.getVersion();
        boolean boolean27 = jSDocInfo24.isInterface();
        boolean boolean28 = jSDocInfo24.isJavaDispatch();
        boolean boolean29 = jSDocInfo24.isIdGenerator();
        java.lang.String str30 = jSDocInfo24.getReturnDescription();
        java.lang.String str31 = jSDocInfo24.getDeprecationReason();
        boolean boolean32 = jSDocInfo24.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo33.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection35 = jSDocInfo33.getReferences();
        boolean boolean36 = jSDocInfo33.isJavaDispatch();
        boolean boolean37 = jSDocInfo33.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo33.getBaseType();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        int int43 = strList41.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean45 = strList41.remove((java.lang.Object) visibility44);
        jSDocInfo33.setVisibility(visibility44);
        jSDocInfo24.setVisibility(visibility44);
        node19.setJSDocInfo(jSDocInfo24);
        boolean boolean49 = jSDocInfo24.isNoAlias();
        boolean boolean50 = jSDocInfo24.hasBaseType();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo24.getModifies();
        boolean boolean52 = strSet51.isEmpty();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 130 + "'", int18 == 130);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNull(strCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "", 45, 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidSimpleName("STRING Not declared as a constructor\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node3.setOptionalArg(true);
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isVoid();
        boolean boolean8 = node3.isGetElem();
        int int9 = node3.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        boolean boolean10 = node1.isVoid();
        boolean boolean11 = node1.isLocalResultCall();
        boolean boolean12 = node1.isInstanceOf();
        boolean boolean13 = node1.isWhile();
        boolean boolean14 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        node21.setType(2);
        int int27 = node15.getIndexOfChild(node21);
        boolean boolean28 = node21.isCase();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node30.setWasEmptyNode(true);
        boolean boolean33 = node30.isOr();
        boolean boolean34 = node30.isNumber();
        node30.putIntProp((int) (short) 0, 51);
        node30.setType(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType42 = node41.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        boolean boolean52 = node46.isVar();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        boolean boolean58 = node54.isWith();
        com.google.javascript.rhino.Node node59 = node46.srcref(node54);
        boolean boolean60 = node54.isFor();
        boolean boolean61 = node54.isAssign();
        boolean boolean62 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, node21, node30, node41, node54, (int) (short) 10, 31);
        boolean boolean66 = node41.isOptionalArg();
        boolean boolean67 = node41.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node9);
        com.google.javascript.rhino.Node node16 = node9.removeChildren();
        com.google.javascript.rhino.jstype.JSType jSType17 = node9.getJSType();
        boolean boolean18 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node19 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isAssignAdd();
        node8.setLineno(36);
        boolean boolean12 = node8.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(23);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.isBreak();
        com.google.javascript.rhino.Node node12 = node4.cloneNode();
        boolean boolean13 = node4.isScript();
        boolean boolean14 = node4.isTypeOf();
        boolean boolean15 = node4.isOptionalArg();
        node4.setCharno((int) (short) 10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasModifies();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 49 + "'", int2 == 49);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 52);
        node1.addSuppression("java.io.IOException");
        node1.setLength(24);
        boolean boolean6 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isDefine();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative2 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec3 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative2);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        boolean boolean19 = node18.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node18.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean26 = node9.isEquivalentToTyped(node21);
        com.google.javascript.rhino.Node node27 = assertionFunctionSpec3.getAssertedParam(node9);
        boolean boolean28 = node27.isGetterDef();
        boolean boolean29 = node27.isAssign();
        node27.setType(8);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        java.lang.String str36 = node35.toStringTree();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isFunction();
        boolean boolean40 = node38.isUnscopedQualifiedName();
        boolean boolean41 = node38.isEmpty();
        com.google.javascript.rhino.Node node42 = node35.srcref(node38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(10, node27, node42);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        double double47 = node45.getDouble();
        com.google.javascript.rhino.Node node48 = node42.srcref(node45);
        boolean boolean49 = node48.isFalse();
        boolean boolean50 = node48.isName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "BITXOR 0\n" + "'", str36, "BITXOR 0\n");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + (-1.0d) + "'", double47 == (-1.0d));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getPositionOnStartLine();
        int int4 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isLocalResultCall();
        namePosition0.setItem(node6);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        boolean boolean15 = node14.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo16.getParameterNames();
        boolean boolean19 = jSDocInfo16.hasParameter("hi!");
        boolean boolean20 = jSDocInfo16.containsDeclaration();
        java.lang.String str21 = jSDocInfo16.getOriginalCommentString();
        boolean boolean23 = jSDocInfo16.hasDescriptionForParameter("Not declared as a type name");
        int int24 = jSDocInfo16.getExtendedInterfacesCount();
        boolean boolean25 = jSDocInfo16.hasModifies();
        java.lang.String str26 = jSDocInfo16.getOriginalCommentString();
        boolean boolean27 = jSDocInfo16.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo16.getVisibility();
        node14.setJSDocInfo(jSDocInfo16);
        node14.setIsSyntheticBlock(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(visibility28);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, (int) (short) 100);
        boolean boolean6 = node5.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        node8.setOptionalArg(true);
        node8.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node35 = node8.useSourceInfoFromForTree(node27);
        boolean boolean36 = node27.isFor();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node5, node27);
        boolean boolean38 = node5.isAnd();
        com.google.javascript.rhino.Node node39 = node5.getLastChild();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        boolean boolean10 = node1.isString();
        boolean boolean11 = node1.isSwitch();
        boolean boolean12 = node1.isString();
        boolean boolean13 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        boolean boolean4 = jSDocInfo0.hasType();
        jSDocInfo0.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        boolean boolean12 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(2, (int) '#', (int) 'a');
        int int4 = node3.getSourcePosition();
        boolean boolean5 = node3.isAnd();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 143457 + "'", int4 == 143457);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isNot();
        java.lang.String str4 = node1.getSourceFileName();
        boolean boolean5 = node1.isContinue();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node1.setJSType(jSType10);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor13 = ancestorIterable12.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(ancestorIterable12);
        org.junit.Assert.assertNotNull(nodeItor13);
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        java.lang.String str9 = node1.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean10 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isVar();
        boolean boolean7 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node2);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        boolean boolean15 = node9.isVar();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        boolean boolean21 = node17.isWith();
        com.google.javascript.rhino.Node node22 = node9.srcref(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        node28.setType(2);
        int int34 = node22.getIndexOfChild(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo35.getExtendedInterfaces();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isVar();
        jSDocInfo35.setAssociatedNode(node38);
        boolean boolean44 = node38.isContinue();
        com.google.javascript.rhino.Node node45 = node22.clonePropsFrom(node38);
        boolean boolean46 = node2.hasChild(node45);
        int int47 = node2.getCharno();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        node49.detachChildren();
        java.lang.String str53 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node49);
        boolean boolean54 = node49.isDec();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 1, node2, node49, (int) 'a', 47);
        boolean boolean58 = node57.isIf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        strSet5.clear();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags9.setMutatesArguments();
        boolean boolean11 = strSet5.contains((java.lang.Object) sideEffectFlags9);
        java.util.Spliterator<java.lang.String> strSpliterator12 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSpliterator12);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, (int) (byte) 1, 4095);
        boolean boolean4 = node3.isQuotedString();
        boolean boolean5 = node3.isNew();
        // The following exception was thrown during execution in test generation
        try {
            node3.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection21 = jSDocInfo0.getTypeNodes();
        boolean boolean22 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean25 = jSDocInfo0.isExpose();
        java.lang.String str26 = jSDocInfo0.getVersion();
        boolean boolean27 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        com.google.javascript.rhino.Node node3 = node1.cloneTree();
        int int4 = node1.getCharno();
        boolean boolean5 = node1.isAssign();
        boolean boolean6 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        node1.setVarArgs(false);
        boolean boolean9 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isExport();
        boolean boolean7 = jSDocInfo0.isConstant();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        boolean boolean11 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        boolean boolean47 = node46.isRegExp();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node46.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean54 = node37.isEquivalentToTyped(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node56.hasChild(node60);
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(45, node37, node60, 10, 2);
        boolean boolean67 = node60.isFunction();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        java.lang.String str72 = node69.toString();
        boolean boolean73 = node69.isWith();
        boolean boolean74 = node69.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind75 = new com.google.javascript.jscomp.CodingConvention.Bind(node27, node60, node69);
        com.google.javascript.rhino.Node node76 = node1.useSourceInfoFrom(node69);
        com.google.javascript.rhino.Node node77 = node1.getLastChild();
        com.google.javascript.rhino.Node node78 = node1.cloneTree();
        java.util.Set<java.lang.String> strSet79 = node1.getDirectives();
        boolean boolean80 = node1.isVoid();
        boolean boolean81 = node1.isFunction();
        boolean boolean82 = node1.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER -1.0" + "'", str52, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "NUMBER -1.0" + "'", str72, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node2.isTypeOf();
        boolean boolean12 = node2.isCatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.toString();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int5 = namePosition4.getPositionOnStartLine();
        int int6 = namePosition4.getStartLine();
        int int7 = namePosition4.getPositionOnStartLine();
        int int8 = namePosition4.getPositionOnStartLine();
        int int9 = namePosition4.getPositionOnStartLine();
        int int10 = namePosition4.getEndLine();
        com.google.javascript.rhino.Node node11 = namePosition4.getItem();
        boolean boolean12 = inputId1.equals((java.lang.Object) namePosition4);
        int int13 = namePosition4.getEndLine();
        int int14 = namePosition4.getStartLine();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "InputId: " + "'", str3, "InputId: ");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        int int6 = strSet5.size();
        int int7 = strSet5.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo8.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo8.getReferences();
        boolean boolean11 = jSDocInfo8.isJavaDispatch();
        boolean boolean12 = jSDocInfo8.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo8.getBaseType();
        boolean boolean14 = jSDocInfo8.isNoSideEffects();
        boolean boolean15 = strSet5.contains((java.lang.Object) boolean14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo16.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection18 = jSDocInfo16.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = jSDocInfo16.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = jSDocInfo16.getTypeNodes();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo16.getParameterNames();
        boolean boolean22 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean23 = strSet21.isEmpty();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(strCollection18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isVar();
        java.lang.String str7 = node2.getQualifiedName();
        boolean boolean8 = node2.isNull();
        com.google.javascript.rhino.Node node9 = node2.getParent();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isFunction();
        boolean boolean17 = node15.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFrom(node15);
        boolean boolean19 = node18.isQuotedString();
        com.google.javascript.rhino.Node node20 = node2.srcref(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node18.siblings();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) 'a', node18, (int) (short) 0, 25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node26 = node18.getAncestor((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        boolean boolean9 = node5.isOr();
        boolean boolean10 = node5.isQualifiedName();
        java.lang.String str11 = node5.toString();
        boolean boolean12 = node5.isGetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER -1.0" + "'", str11, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("java.io.IOException: java.io.IOException: java.io.IOException: java.io.IOException: hi!", throwable1);
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean8 = jSDocInfo0.hasParameter("Not declared as a type name");
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        java.lang.String str14 = jSDocInfo9.getSourceName();
        java.lang.String str15 = jSDocInfo9.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo9.getThisType();
        boolean boolean17 = jSDocInfo9.hasModifies();
        java.lang.String str18 = jSDocInfo9.getLendsName();
        boolean boolean19 = jSDocInfo9.shouldPreserveTry();
        boolean boolean20 = jSDocInfo9.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getReturnType();
        node1.putProp(54, (java.lang.Object) jSDocInfo9);
        boolean boolean24 = jSDocInfo9.isJavaDispatch();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative26 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec27 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative26);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        boolean boolean51 = node34.isEquivalentToTyped(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node57.setJSType(jSType59);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(45, node34, node57, 10, 2);
        boolean boolean64 = node57.isVarArgs();
        boolean boolean65 = node57.hasMoreThanOneChild();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry66 = null;
        com.google.javascript.rhino.jstype.JSType jSType67 = assertionFunctionSpec27.getAssertedType(node57, jSTypeRegistry66);
        jSDocInfo9.setAssociatedNode(node57);
        boolean boolean69 = node57.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node7.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.isExpose();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        boolean boolean11 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node29.isVarArgs();
        boolean boolean37 = node29.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        boolean boolean43 = node40.isNull();
        boolean boolean44 = node40.isComma();
        boolean boolean45 = node40.hasMoreThanOneChild();
        boolean boolean46 = node40.isDo();
        boolean boolean47 = node40.isExprResult();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(29, 0, 4095);
        com.google.javascript.rhino.Node node52 = node51.getLastChild();
        boolean boolean53 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node51);
        com.google.javascript.rhino.Node node54 = node51.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(4095, node40, node54, 29, 44);
        int int58 = node29.getIndexOfChild(node54);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("java.io.IOException: java.io.IOException: NUMBER -1.0\n", 16, 51);
        node4.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, node4, 30, 50);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean11 = jSDocInfo0.hasParameterType("java.io.IOException: java.io.IOException");
        boolean boolean12 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER -1.0\n");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        boolean boolean10 = node9.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node16 = node9.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node12.setJSType(jSType17);
        boolean boolean19 = node12.isOr();
        int int20 = node12.getChildCount();
        boolean boolean21 = node12.isCase();
        com.google.javascript.rhino.Node node22 = node1.useSourceInfoIfMissingFrom(node12);
        boolean boolean23 = node12.isHook();
        java.lang.String str24 = node12.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER -1.0" + "'", str15, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        java.lang.String str4 = node3.toStringTree();
        boolean boolean5 = node3.isSwitch();
        node3.setOptionalArg(false);
        int int8 = node3.getLength();
        boolean boolean9 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "BITXOR 0\n" + "'", str4, "BITXOR 0\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        int int8 = node5.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node5.getJSDocInfo();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        boolean boolean26 = node25.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean33 = node16.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(45, node16, node39, 10, 2);
        boolean boolean46 = node39.isFunction();
        boolean boolean47 = node39.isFor();
        com.google.javascript.rhino.jstype.JSType jSType48 = node39.getJSType();
        boolean boolean49 = node5.isEquivalentTo(node39);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER -1.0" + "'", str31, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(32);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        double double6 = node4.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        com.google.javascript.rhino.jstype.JSType jSType8 = assertionFunctionSpec2.getAssertedType(node4, jSTypeRegistry7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean31 = node14.isEquivalentToTyped(node26);
        com.google.javascript.rhino.InputId inputId32 = null;
        node26.setInputId(inputId32);
        com.google.javascript.rhino.Node node34 = assertionFunctionSpec2.getAssertedParam(node26);
        boolean boolean35 = node34.isDelProp();
        com.google.javascript.rhino.Node node36 = node34.getLastChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node36);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(staticSourceFile37);
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        java.lang.String[] strArray15 = new java.lang.String[] { "java.io.IOException: hi!", "Unknown class name", "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1]\n", "NUMBER -1.0 [source_file: NUMBER -1.0\n]\n", "Node tree inequality:\nTree1:\nNUMBER 100.0 100\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 100.0 100\n\n\nSubtree2: NUMBER -1.0\n", "EXPR_RESULT\n    NUMBER -1.0\n", "InputId: Named type with empty name component", "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", "java.io.IOException: Unknown class name", "Node tree inequality:\nTree1:\nSTRING BITXOR 0\n 4095\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: STRING BITXOR 0\n 4095\n\n\nSubtree2: NUMBER -1.0\n", "Unknown class name", "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", "java.io.IOException: hi!", "NUMBER -1.0\n", "InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet16.spliterator();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        int int27 = node20.getLength();
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet31);
        boolean boolean35 = strSet31.add("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo36.getExtendedInterfaces();
        java.lang.String str38 = jSDocInfo36.getVersion();
        boolean boolean39 = jSDocInfo36.isInterface();
        boolean boolean40 = jSDocInfo36.isJavaDispatch();
        java.lang.String str41 = jSDocInfo36.getSourceName();
        boolean boolean43 = jSDocInfo36.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean44 = jSDocInfo36.isNoCompile();
        boolean boolean45 = jSDocInfo36.isExpose();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.InputId inputId55 = com.google.javascript.jscomp.NodeUtil.getInputId(node51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node57.hasChild(node61);
        com.google.javascript.rhino.Node node63 = com.google.javascript.jscomp.NodeUtil.newExpr(node57);
        int int64 = node63.getType();
        com.google.javascript.rhino.Node node65 = node51.copyInformationFromForTree(node63);
        jSDocInfo36.setAssociatedNode(node51);
        boolean boolean67 = strSet31.contains((java.lang.Object) node51);
        boolean boolean68 = strSet16.equals((java.lang.Object) node51);
        boolean boolean69 = node51.isGetProp();
        boolean boolean70 = node51.isExprResult();
        node51.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strSpliterator18);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId55);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 130 + "'", int64 == 130);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean10 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node13 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(41, node5);
        boolean boolean7 = node6.isWith();
        boolean boolean8 = node6.isCase();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        boolean boolean15 = node10.hasOneChild();
        node10.setLength(48);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(0, node6, node10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node18.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str22 = node5.checkTreeEquals(node8);
        node5.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType25 = node5.getJSType();
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        boolean boolean27 = node5.isObjectLit();
        int int28 = node5.getSourcePosition();
        boolean boolean29 = node5.isFunction();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        boolean boolean21 = jSDocInfo0.isDefine();
        java.lang.String str22 = jSDocInfo0.getDeprecationReason();
        boolean boolean23 = jSDocInfo0.isExterns();
        boolean boolean24 = jSDocInfo0.isExpose();
        boolean boolean25 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.stream();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet22.spliterator();
        boolean boolean26 = strSet8.retainAll((java.util.Collection<java.lang.String>) strSet22);
        java.lang.Object[] objArray27 = strSet8.toArray();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        int int36 = node29.getLength();
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet40);
        boolean boolean43 = strSet40.isEmpty();
        boolean boolean44 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet40);
        boolean boolean45 = strSet1.containsAll((java.util.Collection<java.lang.String>) strSet8);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node56.setJSType(jSType61);
        boolean boolean63 = node56.isGetterDef();
        boolean boolean64 = node56.isNoSideEffectsCall();
        boolean boolean65 = strSet8.remove((java.lang.Object) boolean64);
        java.util.Iterator<java.lang.String> strItor66 = strSet8.iterator();
        strSet8.clear();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        node69.detachChildren();
        boolean boolean73 = node69.isDebugger();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean80 = node75.hasChild(node79);
        boolean boolean81 = node79.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection82 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node79);
        node79.setWasEmptyNode(false);
        boolean boolean85 = node69.isEquivalentTo(node79);
        boolean boolean86 = node79.isNew();
        boolean boolean87 = node79.isWhile();
        boolean boolean88 = node79.isIn();
        boolean boolean89 = strSet8.contains((java.lang.Object) node79);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[hi!]");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeCollection82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.InputId inputId20 = com.google.javascript.jscomp.NodeUtil.getInputId(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        int int29 = node22.getLength();
        boolean boolean30 = node22.isNew();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        int int39 = node32.getLength();
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet43);
        boolean boolean47 = node32.getBooleanProp(41);
        com.google.javascript.rhino.Node node48 = node22.useSourceInfoFromForTree(node32);
        boolean boolean49 = node32.isGetElem();
        com.google.javascript.rhino.Node node50 = node16.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        boolean boolean56 = node52.isNumber();
        boolean boolean57 = node52.isComma();
        boolean boolean58 = node52.isDebugger();
        boolean boolean59 = node52.isWith();
        node16.addChildrenToBack(node52);
        node52.setCharno(39);
        boolean boolean63 = node52.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node52.getJsDocBuilderForNode();
        boolean boolean65 = strSet10.contains((java.lang.Object) node52);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node67.setWasEmptyNode(true);
        boolean boolean70 = node67.isOr();
        boolean boolean71 = node67.isNumber();
        node67.putIntProp((int) (short) 0, 51);
        boolean boolean75 = node67.isOr();
        boolean boolean76 = node67.isFalse();
        boolean boolean77 = node67.hasMoreThanOneChild();
        boolean boolean78 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node67);
        boolean boolean79 = strSet10.remove((java.lang.Object) node67);
        boolean boolean80 = node67.isAdd();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        int int11 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isVoid();
        boolean boolean21 = node16.isArrayLit();
        boolean boolean22 = node16.isDec();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 135167, 3);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isNumber();
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isWith();
        node2.setVarArgs(true);
        boolean boolean12 = node2.isBlock();
        node2.setVarArgs(false);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        boolean boolean23 = node22.isGetElem();
        com.google.javascript.rhino.Node node24 = node22.cloneTree();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(24, node2, node22);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node1.new FileLevelJsDocBuilder();
        boolean boolean10 = node1.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isFunction();
        boolean boolean14 = node12.isUnscopedQualifiedName();
        boolean boolean15 = node12.isEmpty();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 100, node19, node21, node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        boolean boolean36 = node30.isVar();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isWith();
        com.google.javascript.rhino.Node node43 = node30.srcref(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        boolean boolean52 = node51.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node51.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node60.hasChild(node64);
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node54, node64, (int) (byte) 0, (int) '#');
        boolean boolean71 = node24.isEquivalentTo(node64);
        com.google.javascript.rhino.Node node72 = node12.useSourceInfoFromForTree(node24);
        boolean boolean73 = node24.isLabelName();
        node24.setSourceEncodedPositionForTree(17);
        com.google.javascript.rhino.Node node76 = node1.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean77 = node76.isOr();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(46);
        node4.addChildrenToFront(node6);
        int int8 = node6.getChildCount();
        boolean boolean9 = node6.hasMoreThanOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node6.children();
        node6.setLength(135167);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isFunction();
        com.google.javascript.rhino.Node node16 = node14.cloneTree();
        int int17 = node14.getCharno();
        boolean boolean18 = node14.isAssign();
        java.lang.String str19 = node14.getQualifiedName();
        boolean boolean20 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        node26.setType(2);
        com.google.javascript.rhino.Node node32 = node26.getLastSibling();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        node38.setType(2);
        com.google.javascript.rhino.Node node44 = node38.getLastSibling();
        boolean boolean45 = node38.isRegExp();
        boolean boolean46 = node38.isGetProp();
        int int47 = node32.getIndexOfChild(node38);
        com.google.javascript.rhino.Node node48 = node14.copyInformationFromForTree(node38);
        node6.addChildToBack(node48);
        java.util.Set<java.lang.String> strSet50 = node48.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(strSet50);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 100);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        boolean boolean9 = node7.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node18.getLength();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.String str32 = node15.checkTreeEquals(node18);
        node15.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType35 = node15.getJSType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        int int37 = node7.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isFunction();
        boolean boolean45 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFrom(node43);
        boolean boolean47 = node46.isQuotedString();
        node46.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node46);
        boolean boolean51 = staticSourceFile50.isExtern();
        int int53 = staticSourceFile50.getColumnOfOffset(39);
        boolean boolean54 = staticSourceFile50.isExtern();
        boolean boolean55 = staticSourceFile50.isExtern();
        int int57 = staticSourceFile50.getLineOfOffset(1);
        node15.setStaticSourceFile(staticSourceFile50);
        java.lang.String str59 = staticSourceFile50.getName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str59, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isIf();
        com.google.javascript.rhino.Node node20 = node1.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        java.lang.String str39 = node22.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        boolean boolean48 = node46.isGetElem();
        node22.putProp((int) (short) 100, (java.lang.Object) boolean48);
        boolean boolean50 = node22.isCatch();
        boolean boolean51 = node22.isRegExp();
        java.lang.String str52 = node1.checkTreeEquals(node22);
        boolean boolean53 = node1.isThrow();
        boolean boolean54 = node1.isExprResult();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str39, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        boolean boolean9 = node1.isNew();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        boolean boolean26 = node11.getBooleanProp(41);
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoFromForTree(node11);
        boolean boolean28 = node11.isGetElem();
        node11.setDouble((double) (byte) 10);
        boolean boolean31 = node11.isComma();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 41, (int) ' ');
        boolean boolean37 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node41.setOptionalArg(true);
        boolean boolean44 = node41.isAssign();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(43, node36, node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        node51.setType(2);
        com.google.javascript.rhino.Node node57 = node51.getLastSibling();
        com.google.javascript.rhino.Node node58 = node41.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.Node node59 = node11.srcrefTree(node58);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        boolean boolean71 = node70.isRegExp();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node70.useSourceInfoIfMissingFromForTree(node73);
        java.lang.String str78 = node61.checkTreeEquals(node77);
        boolean boolean79 = node61.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection80 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node61);
        boolean boolean81 = node61.isTrue();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node61.setJSType(jSType82);
        int int84 = node58.getIndexOfChild(node61);
        node58.setCharno(25);
        boolean boolean87 = node58.isObjectLit();
        boolean boolean88 = node58.isLocalResultCall();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection89 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node58);
        boolean boolean90 = node58.wasEmptyNode();
        com.google.javascript.rhino.Node node91 = node58.detachFromParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER -1.0" + "'", str76, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str78, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeCollection80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeCollection89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node20);
        boolean boolean29 = node1.hasOneChild();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        boolean boolean35 = node31.isVar();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.jscomp.CodingConvention.Bind bind51 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node31, node43);
        boolean boolean52 = node43.isNumber();
        boolean boolean53 = node43.isIn();
        node43.setSourceFileForTesting("InputId: NUMBER 49.0 [input_id: InputId: ]");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node2.new FileLevelJsDocBuilder();
        java.lang.String str9 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node2);
        com.google.javascript.rhino.Node node10 = node2.removeChildren();
        boolean boolean11 = node2.isParamList();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        boolean boolean17 = node13.isNumber();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection18 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node13);
        boolean boolean19 = node13.isArrayLit();
        boolean boolean20 = node13.isParamList();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node13.children();
        com.google.javascript.rhino.Node node22 = node2.copyInformationFrom(node13);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        node28.setType(2);
        com.google.javascript.rhino.Node node34 = node28.getLastSibling();
        boolean boolean35 = node34.isQuotedString();
        boolean boolean36 = node34.isAssign();
        boolean boolean37 = node34.isCatch();
        boolean boolean38 = node34.isArrayLit();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node22, node34);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(nodeCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setLicense("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str9 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        int int19 = node12.getLength();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node12.setDirectives((java.util.Set<java.lang.String>) strSet23);
        boolean boolean27 = strSet23.add("");
        java.lang.Object[] objArray28 = strSet23.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo29.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet30.stream();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        int int47 = node40.getLength();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.util.Spliterator<java.lang.String> strSpliterator54 = strSet51.spliterator();
        boolean boolean55 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.Object[] objArray56 = strSet37.toArray();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        int int65 = node58.getLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet69);
        boolean boolean72 = strSet69.isEmpty();
        boolean boolean73 = strSet37.containsAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean74 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet37);
        boolean boolean76 = strSet30.contains((java.lang.Object) 39);
        boolean boolean77 = strSet23.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.stream.Stream<java.lang.String> strStream78 = strSet30.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream79 = strSet30.parallelStream();
        boolean boolean80 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, ]");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[hi!]");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.String str31 = node14.checkTreeEquals(node17);
        node14.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType34 = node14.getJSType();
        com.google.javascript.rhino.Node node35 = node1.copyInformationFrom(node14);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        node37.setOptionalArg(true);
        node37.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.Node node64 = node37.useSourceInfoFromForTree(node56);
        boolean boolean65 = node37.hasOneChild();
        java.lang.String str66 = node1.checkTreeEquals(node37);
        node1.removeProp((int) '#');
        boolean boolean69 = node1.isCase();
        boolean boolean70 = node1.isObjectLit();
        node1.detachChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        boolean boolean25 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        int int33 = node31.getLineno();
        java.util.Set<java.lang.String> strSet34 = node31.getDirectives();
        java.lang.String str35 = com.google.javascript.jscomp.NodeUtil.getSourceName(node31);
        boolean boolean36 = node31.isDelProp();
        node31.setType(15);
        boolean boolean39 = node31.isDelProp();
        node17.addChildrenToBack(node31);
        boolean boolean41 = node17.isGetProp();
        boolean boolean42 = node17.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        boolean boolean4 = node1.isNull();
        boolean boolean5 = node1.isComma();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        int int14 = node7.getLength();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet18);
        boolean boolean22 = node7.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node7.setJSType(jSType23);
        boolean boolean25 = node7.isVar();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFromForTree(node29);
        node7.setVarArgs(false);
        com.google.javascript.rhino.Node node33 = node1.srcref(node7);
        double double34 = node33.getDouble();
        boolean boolean35 = node33.isIf();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node33.setJSType(jSType36);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable38 = node33.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor39 = ancestorIterable38.iterator();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-1.0d) + "'", double34 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(ancestorIterable38);
        org.junit.Assert.assertNotNull(nodeItor39);
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        int int11 = node5.getLineno();
        boolean boolean12 = node5.isNot();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node27.removeChildren();
        boolean boolean29 = node27.isNot();
        node27.setOptionalArg(false);
        int int32 = node5.getIndexOfChild(node27);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setWasEmptyNode(true);
        boolean boolean4 = node1.isOr();
        boolean boolean5 = node1.isInstanceOf();
        boolean boolean6 = node1.isBlock();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        java.lang.String str14 = node8.getSourceFileName();
        boolean boolean15 = node8.isWith();
        java.lang.Object obj17 = node8.getProp(0);
        boolean boolean18 = node8.isWhile();
        node1.addChildrenToFront(node8);
        double double20 = node8.getDouble();
        // The following exception was thrown during execution in test generation
        try {
            node8.setString("java.io.IOException: java.io.IOException: BITXOR 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int4 = node3.getChildCount();
        boolean boolean5 = node3.isFor();
        boolean boolean6 = node3.isNew();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        java.lang.String str9 = node3.toString();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isCase();
        boolean boolean12 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 100.0 100" + "'", str9, "NUMBER 100.0 100");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 0, 4095);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node3);
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isFunction();
        boolean boolean10 = node8.isUnscopedQualifiedName();
        boolean boolean11 = node8.isEmpty();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        boolean boolean20 = node14.isVar();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        boolean boolean26 = node22.isWith();
        com.google.javascript.rhino.Node node27 = node14.srcref(node22);
        node14.detachChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind31 = new com.google.javascript.jscomp.CodingConvention.Bind(node8, node14, node30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isWith();
        com.google.javascript.rhino.Node node46 = node33.srcref(node41);
        node33.detachChildren();
        int int48 = node33.getLineno();
        com.google.javascript.rhino.Node node49 = node30.copyInformationFrom(node33);
        int int50 = node6.getIndexOfChild(node49);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node6.children();
        boolean boolean52 = node6.isVarArgs();
        java.lang.Object obj54 = node6.getProp(24);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        boolean boolean12 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27 + "'", int7 == 27);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 30, 2);
        boolean boolean4 = node3.isBlock();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        int int11 = node4.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node4.new FileLevelJsDocBuilder();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node4);
        namePosition0.setItem(node4);
        boolean boolean15 = node4.isCase();
        boolean boolean16 = node4.isDec();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(38, "SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        boolean boolean6 = jSDocInfo0.isConstant();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        java.lang.String str7 = node4.toString();
        boolean boolean8 = node4.isNumber();
        boolean boolean9 = node4.isComma();
        boolean boolean10 = node4.isDebugger();
        boolean boolean11 = node4.isWith();
        namePosition0.setItem(node4);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 1.0f, 50, (int) ' ');
        com.google.javascript.rhino.Node node17 = node4.useSourceInfoFrom(node16);
        node16.setLength(10);
        boolean boolean20 = node16.isOr();
        boolean boolean21 = node16.isNot();
        boolean boolean22 = node16.isName();
        boolean boolean23 = node16.isDec();
        boolean boolean24 = node16.isInc();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER -1.0" + "'", str7, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        int int4 = strList2.size();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        int int9 = strList7.size();
        boolean boolean10 = strList2.removeAll((java.util.Collection<java.lang.String>) strList7);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        int int19 = node18.getType();
        com.google.javascript.rhino.Node node20 = node18.getFirstChild();
        boolean boolean21 = strList7.contains((java.lang.Object) node20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        boolean boolean38 = node37.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean45 = node28.isEquivalentToTyped(node40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(45, node28, node51, 10, 2);
        boolean boolean58 = node51.isVarArgs();
        java.lang.String str59 = com.google.javascript.jscomp.NodeUtil.getSourceName(node51);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node64 = node61.removeChildren();
        boolean boolean65 = node61.isRegExp();
        com.google.javascript.jscomp.CodingConvention.Bind bind66 = new com.google.javascript.jscomp.CodingConvention.Bind(node20, node51, node61);
        boolean boolean67 = node61.isNull();
        boolean boolean68 = node61.isDo();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 130 + "'", int19 == 130);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER -1.0" + "'", str43, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getEndLine();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node5 = namePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.newExpr(node7);
        int int14 = node7.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node7.new FileLevelJsDocBuilder();
        boolean boolean16 = node7.isAssignAdd();
        boolean boolean17 = node7.isBreak();
        node7.setSourceEncodedPositionForTree(42);
        boolean boolean20 = node7.isGetterDef();
        java.lang.String str21 = node7.getQualifiedName();
        int int22 = node7.getType();
        namePosition0.setItem(node7);
        namePosition0.setPositionInformation(39, (int) (short) 0, 46, 100);
        com.google.javascript.rhino.Node node29 = namePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 39 + "'", int22 == 39);
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.jstype.JSType jSType40 = node21.getJSType();
        boolean boolean41 = node21.isParamList();
        boolean boolean42 = node21.isInstanceOf();
        boolean boolean43 = node21.isVoid();
        node21.setIsSyntheticBlock(false);
        boolean boolean46 = node21.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node21.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        node9.setOptionalArg(true);
        node9.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFromForTree(node28);
        boolean boolean37 = node7.hasChild(node9);
        boolean boolean38 = node7.isSyntheticBlock();
        boolean boolean39 = node7.isVar();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node40 = node7.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node1.setOptionalArg(true);
        java.lang.String str4 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node5 = node1.removeChildren();
        boolean boolean6 = node1.isObjectLit();
        boolean boolean7 = node1.isWith();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node2.isTypeOf();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        int int19 = node17.getLineno();
        java.util.Set<java.lang.String> strSet20 = node17.getDirectives();
        com.google.javascript.rhino.Node node21 = node2.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        boolean boolean30 = node29.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        com.google.javascript.rhino.Node node36 = node29.useSourceInfoIfMissingFromForTree(node32);
        node32.setCharno(31);
        java.lang.String str42 = node32.toString(false, true, true);
        java.lang.String str43 = node32.toString();
        boolean boolean44 = node32.isBreak();
        com.google.javascript.rhino.Node node45 = node21.useSourceInfoIfMissingFrom(node32);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = node21.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING Node tree inequality:?Tree1:?NUMBER -1.0???Tree2:?EXPR_RESULT?    NUMBER -1.0???Subtree1: NUMBER -1.0???Subtree2: EXPR_RESULT?    NUMBER -1.0? is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER -1.0" + "'", str43, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
        java.lang.String str2 = inputId1.toString();
        java.lang.String str3 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n" + "'", str2, "InputId: Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n" + "'", str3, "Node tree inequality:\nTree1:\nNUMBER 1.0 [empty_block: 1]\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 1.0 [empty_block: 1]\n\n\nSubtree2: NUMBER -1.0\n");
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("JSDocInfo");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        node11.setOptionalArg(true);
        node11.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node38 = node11.useSourceInfoFromForTree(node30);
        boolean boolean39 = node9.hasChild(node11);
        boolean boolean40 = node11.isReturn();
        boolean boolean41 = node11.isParamList();
        node11.putIntProp(36, 27);
        boolean boolean45 = node11.isCatch();
        com.google.javascript.rhino.Node node46 = assertionFunctionSpec1.getAssertedParam(node11);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean48 = typePosition47.hasBrackets();
        int int49 = typePosition47.getEndLine();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node51);
        boolean boolean58 = node57.isRegExp();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean61 = node60.isName();
        boolean boolean62 = node60.isSwitch();
        java.lang.String str63 = node60.toString();
        com.google.javascript.rhino.Node node64 = node57.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node60.setJSType(jSType65);
        boolean boolean67 = node60.isOr();
        int int68 = node60.getChildCount();
        boolean boolean69 = node60.isCase();
        boolean boolean70 = node60.isThis();
        typePosition47.setItem(node60);
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = null;
        com.google.javascript.rhino.jstype.JSType jSType73 = assertionFunctionSpec1.getAssertedType(node60, jSTypeRegistry72);
        java.lang.String str74 = assertionFunctionSpec1.getFunctionName();
        java.lang.String str75 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JSDocInfo" + "'", str74, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "JSDocInfo" + "'", str75, "JSDocInfo");
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        int int11 = node5.getLineno();
        boolean boolean12 = node5.isContinue();
        boolean boolean13 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node1.setJSType(jSType10);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable12 = node1.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nSTRING Unknown class name\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: STRING Unknown class name\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 [opt_arg: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(ancestorIterable12);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isGetElem();
        boolean boolean9 = node7.isTypeOf();
        boolean boolean10 = node7.isAnd();
        boolean boolean11 = node7.isThrow();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isFunction();
        boolean boolean19 = node17.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node20 = node13.useSourceInfoIfMissingFrom(node17);
        boolean boolean21 = node20.isQuotedString();
        node20.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node20);
        boolean boolean25 = staticSourceFile24.isExtern();
        int int27 = staticSourceFile24.getColumnOfOffset(39);
        int int29 = staticSourceFile24.getLineOfOffset(53);
        int int31 = staticSourceFile24.getLineOfOffset(54);
        int int33 = staticSourceFile24.getColumnOfOffset(40962);
        node7.setStaticSourceFile(staticSourceFile24);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(staticSourceFile24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        boolean boolean13 = staticSourceFile12.isExtern();
        boolean boolean14 = staticSourceFile12.isExtern();
        java.lang.String str15 = staticSourceFile12.getName();
        int int17 = staticSourceFile12.getColumnOfOffset((int) (short) 10);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str15, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isNumber();
        boolean boolean7 = node2.isComma();
        boolean boolean8 = node2.isDebugger();
        boolean boolean9 = node2.isWith();
        node2.setVarArgs(true);
        boolean boolean12 = node2.isBlock();
        typePosition0.setItem(node2);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node14.isTry();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isWith();
        com.google.javascript.rhino.Node node46 = node33.srcref(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        boolean boolean55 = node54.isRegExp();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node54.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 0, node41, node57, node67, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node74 = node26.srcref(node73);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node76.isName();
        boolean boolean78 = node76.isSwitch();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node76.hasChild(node80);
        com.google.javascript.rhino.Node node82 = com.google.javascript.jscomp.NodeUtil.newExpr(node76);
        node76.setOptionalArg(true);
        boolean boolean85 = node26.hasChild(node76);
        boolean boolean86 = node26.isFalse();
        boolean boolean87 = node26.isCatch();
        boolean boolean88 = node26.isIf();
        com.google.javascript.rhino.Node node89 = node14.srcref(node26);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isIf();
        com.google.javascript.rhino.Node node20 = node1.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        java.lang.String str39 = node22.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        boolean boolean48 = node46.isGetElem();
        node22.putProp((int) (short) 100, (java.lang.Object) boolean48);
        boolean boolean50 = node22.isCatch();
        boolean boolean51 = node22.isRegExp();
        java.lang.String str52 = node1.checkTreeEquals(node22);
        boolean boolean53 = node22.isInc();
        boolean boolean54 = node22.isDec();
        com.google.javascript.rhino.Node node55 = node22.cloneNode();
        boolean boolean56 = node22.isSyntheticBlock();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        boolean boolean61 = node58.isNull();
        boolean boolean62 = node58.isRegExp();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node70 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        boolean boolean71 = node70.isRegExp();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        java.lang.String str76 = node73.toString();
        com.google.javascript.rhino.Node node77 = node70.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean78 = node70.isDefaultCase();
        node58.addChildToBack(node70);
        boolean boolean80 = node58.isCase();
        boolean boolean81 = node22.hasChild(node58);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str39, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER -1.0" + "'", str76, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        boolean boolean21 = node14.isRegExp();
        boolean boolean22 = node14.isGetProp();
        boolean boolean23 = node14.isOptionalArg();
        int int25 = node14.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node14.getLastSibling();
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFromForTree(node14);
        java.lang.Object obj29 = node1.getProp(44);
        boolean boolean30 = node1.hasMoreThanOneChild();
        boolean boolean31 = node1.isThrow();
        com.google.javascript.rhino.Node node32 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnEndLine();
        int int3 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) ' ');
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        boolean boolean6 = node4.isScript();
        boolean boolean7 = node4.isTry();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        node9.setOptionalArg(true);
        node9.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFromForTree(node28);
        boolean boolean37 = node9.hasOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        java.lang.String str42 = node39.toString();
        boolean boolean43 = node39.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        boolean boolean52 = node51.isRegExp();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        java.lang.String str57 = node54.toString();
        com.google.javascript.rhino.Node node58 = node51.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.jscomp.CodingConvention.Bind bind59 = new com.google.javascript.jscomp.CodingConvention.Bind(node9, node39, node51);
        boolean boolean60 = node39.isInstanceOf();
        com.google.javascript.rhino.Node node61 = node4.useSourceInfoIfMissingFrom(node39);
        boolean boolean62 = node61.isLocalResultCall();
        boolean boolean63 = node2.isEquivalentTo(node61);
        boolean boolean64 = node61.isDebugger();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node61);
        boolean boolean66 = node61.isInc();
        com.google.javascript.rhino.Node node67 = null;
        boolean boolean68 = node61.hasChild(node67);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER -1.0" + "'", str42, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "NUMBER -1.0" + "'", str57, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isOptionalArg();
        boolean boolean18 = node10.hasChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 100, node21, node23, node26);
        boolean boolean30 = node23.isBreak();
        com.google.javascript.rhino.Node node31 = node23.cloneNode();
        boolean boolean32 = node23.isScript();
        boolean boolean33 = node23.isTypeOf();
        com.google.javascript.rhino.Node node34 = node10.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node35 = node10.getLastChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo36.getExtendedInterfaces();
        java.lang.String str38 = jSDocInfo36.getVersion();
        boolean boolean39 = jSDocInfo36.isInterface();
        boolean boolean40 = jSDocInfo36.isJavaDispatch();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo36.getModifies();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        node52.setCharno(31);
        java.lang.String str62 = node52.toString(false, true, true);
        java.lang.String str63 = node52.toString();
        boolean boolean64 = strSet41.contains((java.lang.Object) node52);
        com.google.javascript.rhino.Node node65 = node10.clonePropsFrom(node52);
        java.lang.Class<?> wildcardClass66 = node65.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER -1.0" + "'", str63, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("EXPR_RESULT\n    NUMBER -1.0\n", 39, (int) (short) -1);
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(35, nodeArray8, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(0, nodeArray8, 4, 27);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(10, nodeArray8);
        boolean boolean16 = node15.isSyntheticBlock();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isFunction();
        com.google.javascript.rhino.Node node20 = node18.cloneTree();
        int int21 = node18.getCharno();
        boolean boolean22 = node18.isAssign();
        java.lang.String str23 = node18.getQualifiedName();
        com.google.javascript.rhino.Node node24 = node18.cloneTree();
        boolean boolean25 = node18.isHook();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node4, node15, node18, 0, (int) ' ');
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative30 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec31 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        double double35 = node33.getDouble();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = null;
        com.google.javascript.rhino.jstype.JSType jSType37 = assertionFunctionSpec31.getAssertedType(node33, jSTypeRegistry36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean53 = node52.isRegExp();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        java.lang.String str58 = node55.toString();
        com.google.javascript.rhino.Node node59 = node52.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean60 = node43.isEquivalentToTyped(node55);
        com.google.javascript.rhino.InputId inputId61 = null;
        node55.setInputId(inputId61);
        com.google.javascript.rhino.Node node63 = assertionFunctionSpec31.getAssertedParam(node55);
        boolean boolean64 = node63.isDebugger();
        boolean boolean65 = node63.isVoid();
        boolean boolean66 = node63.hasChildren();
        com.google.javascript.rhino.Node node67 = node18.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean68 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node67);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeArray8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + (-1.0d) + "'", double35 == (-1.0d));
        org.junit.Assert.assertNull(jSType37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NUMBER -1.0" + "'", str58, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection3 = jSDocInfo0.getMarkers();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.isConstant();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(markerCollection3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(markerCollection8);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        boolean boolean36 = node6.isLocalResultCall();
        boolean boolean37 = node6.isAssignAdd();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        java.lang.String str56 = node39.checkTreeEquals(node55);
        int int58 = node55.getIntProp(100);
        com.google.javascript.rhino.Node node59 = node6.srcrefTree(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node69 = node6.copyInformationFromForTree(node67);
        com.google.javascript.rhino.Node node70 = node67.getLastChild();
        node67.setLength(4);
        boolean boolean73 = node67.isVoid();
        boolean boolean74 = node67.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnEndLine();
        java.lang.String str4 = stringPosition0.getItem();
        stringPosition0.setItem("BITXOR java.io.IOException: BITXOR 0\n\n");
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.jstype.JSType jSType19 = node17.getJSType();
        boolean boolean20 = node17.isInc();
        boolean boolean21 = node17.isAdd();
        boolean boolean22 = node17.isString();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        boolean boolean31 = node30.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        java.lang.String str36 = node33.toString();
        com.google.javascript.rhino.Node node37 = node30.useSourceInfoIfMissingFromForTree(node33);
        int int38 = node30.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node30.children();
        boolean boolean40 = node30.isInstanceOf();
        boolean boolean41 = node30.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable42 = node30.getAncestors();
        node30.setType(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.lang.String str47 = jSDocInfo45.getVersion();
        boolean boolean48 = jSDocInfo45.hasModifies();
        boolean boolean50 = jSDocInfo45.hasDescriptionForParameter("");
        java.lang.String str51 = jSDocInfo45.getSourceName();
        boolean boolean52 = jSDocInfo45.isDefine();
        java.lang.String str53 = jSDocInfo45.getMeaning();
        boolean boolean54 = jSDocInfo45.isDefine();
        boolean boolean55 = jSDocInfo45.isIdGenerator();
        node30.setJSDocInfo(jSDocInfo45);
        com.google.javascript.rhino.Node node57 = node17.useSourceInfoFromForTree(node30);
        boolean boolean58 = node57.isGetElem();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NUMBER -1.0" + "'", str36, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ancestorIterable42);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet12.spliterator();
        int int16 = strSet12.size();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node18.getLength();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        int int37 = strList35.size();
        boolean boolean38 = strSet29.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.util.Spliterator<java.lang.String> strSpliterator39 = strSet29.spliterator();
        int int40 = strSet29.size();
        boolean boolean41 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.Spliterator<java.lang.String> strSpliterator42 = strSet12.spliterator();
        java.lang.Object obj43 = null;
        boolean boolean44 = strSet12.equals(obj43);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[hi!]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("");
        java.lang.String str2 = inputId1.getIdName();
        java.lang.String str3 = inputId1.toString();
        java.lang.String str4 = inputId1.getIdName();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative6 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec7 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        boolean boolean23 = node22.isRegExp();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node22.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean30 = node13.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node31 = assertionFunctionSpec7.getAssertedParam(node13);
        boolean boolean32 = node31.isGetterDef();
        boolean boolean33 = node31.isAssign();
        node31.setType(8);
        boolean boolean36 = inputId1.equals((java.lang.Object) node31);
        boolean boolean37 = node31.isTry();
        boolean boolean38 = node31.isInc();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 100, node41, node43, node46);
        boolean boolean50 = node43.isBreak();
        com.google.javascript.rhino.Node node51 = node43.cloneNode();
        boolean boolean52 = node43.isScript();
        java.lang.Object obj54 = node43.getProp(4095);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.lang.String str57 = jSDocInfo55.getVersion();
        boolean boolean58 = jSDocInfo55.isInterface();
        boolean boolean59 = jSDocInfo55.isJavaDispatch();
        java.lang.String str60 = jSDocInfo55.getSourceName();
        java.lang.String str61 = jSDocInfo55.getFileOverview();
        boolean boolean62 = jSDocInfo55.isExport();
        boolean boolean63 = jSDocInfo55.hasReturnType();
        java.lang.String str64 = jSDocInfo55.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo55.getBaseType();
        int int66 = jSDocInfo55.getExtendedInterfacesCount();
        boolean boolean67 = jSDocInfo55.isNoAlias();
        node43.setJSDocInfo(jSDocInfo55);
        com.google.javascript.rhino.Node node69 = node31.clonePropsFrom(node43);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "InputId: " + "'", str3, "InputId: ");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        boolean boolean21 = jSDocInfo0.isDefine();
        boolean boolean22 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNull(strCollection24);
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(29, 0, 4095);
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node3);
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isFunction();
        boolean boolean10 = node8.isUnscopedQualifiedName();
        boolean boolean11 = node8.isEmpty();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        boolean boolean20 = node14.isVar();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        boolean boolean26 = node22.isWith();
        com.google.javascript.rhino.Node node27 = node14.srcref(node22);
        node14.detachChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind31 = new com.google.javascript.jscomp.CodingConvention.Bind(node8, node14, node30);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node33.isName();
        boolean boolean35 = node33.isSwitch();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node33.hasChild(node37);
        boolean boolean39 = node33.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        boolean boolean45 = node41.isWith();
        com.google.javascript.rhino.Node node46 = node33.srcref(node41);
        node33.detachChildren();
        int int48 = node33.getLineno();
        com.google.javascript.rhino.Node node49 = node30.copyInformationFrom(node33);
        int int50 = node6.getIndexOfChild(node49);
        boolean boolean51 = node49.hasChildren();
        node49.putIntProp(2, 409697);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation((int) (byte) -1, 0, 42, 17);
        int int6 = stringPosition0.getEndLine();
        stringPosition0.setItem("InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str9 = stringPosition0.getItem();
        stringPosition0.setItem("NUMBER 31.0");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str9, "InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node25.isGetElem();
        node1.putProp((int) (short) 100, (java.lang.Object) boolean27);
        boolean boolean29 = node1.isCatch();
        boolean boolean30 = node1.isSwitch();
        boolean boolean31 = node1.isThrow();
        node1.setDouble((double) 36);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo45.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = jSDocInfo45.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection49 = jSDocInfo45.getTypeNodes();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        boolean boolean51 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet50);
        int int52 = strSet43.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo53.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet54.stream();
        boolean boolean56 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isFunction();
        boolean boolean64 = node62.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node65 = node58.useSourceInfoIfMissingFrom(node62);
        boolean boolean66 = node58.isNE();
        boolean boolean67 = strSet43.contains((java.lang.Object) boolean66);
        java.lang.Object[] objArray68 = strSet43.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList70 = jSDocInfo69.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection71 = jSDocInfo69.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = jSDocInfo69.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection73 = jSDocInfo69.getTypeNodes();
        jSDocInfo69.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList76 = jSDocInfo69.getImplementedInterfaces();
        boolean boolean77 = strSet43.contains((java.lang.Object) jSTypeExpressionList76);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(nodeCollection49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(jSTypeExpressionList70);
        org.junit.Assert.assertNull(strCollection71);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(nodeCollection73);
        org.junit.Assert.assertNotNull(jSTypeExpressionList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        int int51 = node44.getLength();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object[] objArray58 = strSet55.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        int int63 = strList61.size();
        boolean boolean64 = strSet55.containsAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo65.getParameterNames();
        boolean boolean68 = jSDocInfo65.hasParameter("hi!");
        boolean boolean69 = jSDocInfo65.hasThisType();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo65.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo71.getParameterNames();
        boolean boolean73 = strSet70.addAll((java.util.Collection<java.lang.String>) strSet72);
        strSet70.clear();
        boolean boolean75 = strList61.addAll((java.util.Collection<java.lang.String>) strSet70);
        node26.setDirectives(strSet70);
        boolean boolean77 = node26.isNot();
        com.google.javascript.rhino.Node node78 = node26.removeFirstChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[hi!]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node1.isIn();
        boolean boolean9 = node1.isLabel();
        java.lang.String str10 = node1.toString();
        boolean boolean11 = node1.isEmpty();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        boolean boolean28 = node27.isRegExp();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        com.google.javascript.rhino.Node node34 = node27.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean35 = node18.isEquivalentToTyped(node30);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node41.setJSType(jSType43);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(45, node18, node41, 10, 2);
        boolean boolean48 = node18.isLocalResultCall();
        boolean boolean49 = node18.isNull();
        com.google.javascript.rhino.Node node50 = node1.useSourceInfoIfMissingFromForTree(node18);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        boolean boolean8 = node5.isRegExp();
        node5.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        com.google.javascript.rhino.jstype.JSType jSType40 = node21.getJSType();
        boolean boolean41 = node21.isParamList();
        boolean boolean42 = node21.isInstanceOf();
        boolean boolean43 = node21.isVoid();
        boolean boolean44 = node21.wasEmptyNode();
        int int45 = node21.getType();
        boolean boolean46 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node21);
        com.google.javascript.rhino.Node node47 = node21.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 39 + "'", int45 == 39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node2);
        java.lang.String str12 = node2.toStringTree();
        boolean boolean13 = node2.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = node2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING Node tree inequality:?Tree1:?NUMBER -1.0???Tree2:?EXPR_RESULT?    NUMBER -1.0???Subtree1: NUMBER -1.0???Subtree2: EXPR_RESULT?    NUMBER -1.0? is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str12, "STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node7.getJsDocBuilderForNode();
        int int12 = node7.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(27);
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        boolean boolean9 = node7.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node7);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int16 = node15.getChildCount();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        boolean boolean24 = node18.isVar();
        com.google.javascript.rhino.Node node25 = node18.getParent();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        boolean boolean33 = node27.isVar();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        boolean boolean39 = node35.isWith();
        com.google.javascript.rhino.Node node40 = node27.srcref(node35);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(130, node15, node18, node35, node44, 0, 15);
        java.lang.String str48 = node7.checkTreeEquals(node15);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node56 = com.google.javascript.jscomp.NodeUtil.newExpr(node50);
        boolean boolean57 = node56.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        java.lang.String str62 = node59.toString();
        com.google.javascript.rhino.Node node63 = node56.useSourceInfoIfMissingFromForTree(node59);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node59.setJSType(jSType64);
        boolean boolean66 = node59.isGetterDef();
        boolean boolean67 = node59.isNoSideEffectsCall();
        node59.removeProp((int) (short) 100);
        boolean boolean70 = node59.isFunction();
        boolean boolean71 = node59.isStringKey();
        java.lang.String str72 = node15.checkTreeEquals(node59);
        com.google.javascript.rhino.Node node73 = node1.useSourceInfoFrom(node59);
        boolean boolean74 = node73.isRegExp();
        boolean boolean75 = node73.isCall();
        com.google.javascript.rhino.Node node76 = node73.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str48, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "NUMBER -1.0" + "'", str62, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 100.0 100\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 100.0 100\n\n\nSubtree2: NUMBER -1.0\n" + "'", str72, "Node tree inequality:\nTree1:\nNUMBER 100.0 100\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: NUMBER 100.0 100\n\n\nSubtree2: NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor2 = strSet1.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet1.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo4.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo4.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo4.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo4.getTypeNodes();
        boolean boolean9 = strSet1.contains((java.lang.Object) jSDocInfo4);
        java.util.stream.Stream<java.lang.String> strStream10 = strSet1.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet1.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator12 = strSet1.spliterator();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strSpliterator12);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isScript();
        boolean boolean6 = node3.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        int int13 = node1.getLineno();
        boolean boolean14 = node1.isDebugger();
        boolean boolean15 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node1);
        boolean boolean16 = node1.isOr();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        boolean boolean33 = node32.isRegExp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        java.lang.String str38 = node35.toString();
        com.google.javascript.rhino.Node node39 = node32.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean40 = node23.isEquivalentToTyped(node35);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(45, node23, node46, 10, 2);
        java.lang.Object obj54 = node46.getProp(49);
        node46.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node57 = node46.getParent();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo59.getParameterNames();
        jSDocInfo59.addSuppression("Named type with empty name component");
        java.lang.String str63 = jSDocInfo59.toString();
        boolean boolean64 = jSDocInfo59.hasType();
        node46.setJSDocInfo(jSDocInfo59);
        node1.setJSDocInfo(jSDocInfo59);
        boolean boolean67 = jSDocInfo59.isInterface();
        boolean boolean68 = jSDocInfo59.isOverride();
        java.lang.String str69 = jSDocInfo59.getBlockDescription();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(staticSourceFile58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "JSDocInfo" + "'", str63, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo12.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo12.getReferences();
        boolean boolean15 = jSDocInfo12.isJavaDispatch();
        boolean boolean16 = jSDocInfo12.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo12.getBaseType();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        int int22 = strList20.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean24 = strList20.remove((java.lang.Object) visibility23);
        jSDocInfo12.setVisibility(visibility23);
        boolean boolean26 = jSDocInfo12.hasBaseType();
        java.lang.String str27 = jSDocInfo12.getMeaning();
        java.util.Set<java.lang.String> strSet28 = jSDocInfo12.getSuppressions();
        boolean boolean29 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        int int38 = node31.getLength();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet42);
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet42.spliterator();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        com.google.javascript.rhino.Node node60 = com.google.javascript.jscomp.NodeUtil.newExpr(node54);
        int int61 = node54.getLength();
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet65);
        java.util.Spliterator<java.lang.String> strSpliterator68 = strSet65.spliterator();
        boolean boolean69 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet65);
        java.lang.Object[] objArray70 = strSet51.toArray();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node72.hasChild(node76);
        com.google.javascript.rhino.Node node78 = com.google.javascript.jscomp.NodeUtil.newExpr(node72);
        int int79 = node72.getLength();
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet83);
        boolean boolean86 = strSet83.isEmpty();
        boolean boolean87 = strSet51.containsAll((java.util.Collection<java.lang.String>) strSet83);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo88.getParameterNames();
        boolean boolean90 = strSet51.containsAll((java.util.Collection<java.lang.String>) strSet89);
        java.util.Spliterator<java.lang.String> strSpliterator91 = strSet89.spliterator();
        boolean boolean92 = strSet42.retainAll((java.util.Collection<java.lang.String>) strSet89);
        boolean boolean93 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = strSet28.add("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER -1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[hi!]");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(strSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isWith();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        node16.setOptionalArg(true);
        node16.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.Node node35 = com.google.javascript.jscomp.NodeUtil.newExpr(node29);
        boolean boolean36 = node35.isRegExp();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        com.google.javascript.rhino.Node node42 = node35.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node43 = node16.useSourceInfoFromForTree(node35);
        boolean boolean44 = node14.hasChild(node16);
        com.google.javascript.rhino.Node node45 = node2.useSourceInfoFromForTree(node16);
        node2.setSourceEncodedPositionForTree((int) (byte) 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) ' ', node2);
        boolean boolean49 = node2.isNull();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node10 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getThisType();
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean14 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isNumber();
        boolean boolean6 = node1.isComma();
        boolean boolean7 = node1.isDebugger();
        boolean boolean8 = node1.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType9 = node1.getJSType();
        boolean boolean10 = node1.isEmpty();
        boolean boolean11 = node1.isNE();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        boolean boolean16 = node15.isBreak();
        com.google.javascript.rhino.Node node17 = node1.clonePropsFrom(node15);
        java.lang.String str18 = node15.getSourceFileName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        boolean boolean17 = node15.isGetterDef();
        boolean boolean18 = node15.isEmpty();
        boolean boolean19 = node15.isFromExterns();
        boolean boolean20 = node15.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        java.lang.String str4 = stringPosition0.getItem();
        int int5 = stringPosition0.getEndLine();
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node1.setJSType(jSType3);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo5.getExtendedInterfaces();
        java.lang.String str7 = jSDocInfo5.getVersion();
        boolean boolean8 = jSDocInfo5.isInterface();
        boolean boolean9 = jSDocInfo5.isNoAlias();
        boolean boolean10 = jSDocInfo5.isHidden();
        boolean boolean11 = jSDocInfo5.isDeprecated();
        jSDocInfo5.setLicense("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str14 = jSDocInfo5.getSourceName();
        boolean boolean15 = jSDocInfo5.isNoCompile();
        node1.setJSDocInfo(jSDocInfo5);
        java.util.Collection<java.lang.String> strCollection17 = jSDocInfo5.getReferences();
        java.lang.String str18 = jSDocInfo5.getBlockDescription();
        boolean boolean19 = jSDocInfo5.isExport();
        boolean boolean20 = jSDocInfo5.hasBaseType();
        boolean boolean21 = jSDocInfo5.hasModifies();
        boolean boolean22 = jSDocInfo5.isDefine();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strCollection17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray9 = iOException8.getSuppressed();
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException(throwable11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException12);
        iOException8.addSuppressed((java.lang.Throwable) iOException14);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException18 = new java.io.IOException("BITXOR 0\n");
        iOException14.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.io.IOException iOException21 = new java.io.IOException("GT", (java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException("java.io.IOException: NUMBER -1.0\n", (java.lang.Throwable) iOException20);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException22);
        org.junit.Assert.assertNotNull(throwableArray9);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("BITXOR 0\n", 4095, (int) (byte) 100);
        boolean boolean4 = node3.isSwitch();
        node3.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: java.io.IOException", 37, 16773220);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        java.util.Set<java.lang.String> strSet8 = node5.getDirectives();
        java.lang.String str9 = com.google.javascript.jscomp.NodeUtil.getSourceName(node5);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node19);
        boolean boolean26 = node25.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        java.lang.String str31 = node28.toString();
        com.google.javascript.rhino.Node node32 = node25.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean33 = node16.isEquivalentToTyped(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(45, node16, node39, 10, 2);
        boolean boolean46 = node39.isVarArgs();
        boolean boolean47 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node39);
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node50 = node5.useSourceInfoIfMissingFrom(node39);
        boolean boolean51 = node50.isLabel();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER -1.0" + "'", str31, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.isInterface();
        jSDocInfo0.setDeprecated(true);
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        boolean boolean9 = node7.isThis();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.Node node24 = com.google.javascript.jscomp.NodeUtil.newExpr(node18);
        int int25 = node18.getLength();
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.String str32 = node15.checkTreeEquals(node18);
        node15.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType35 = node15.getJSType();
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node15);
        int int37 = node7.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isFunction();
        boolean boolean45 = node43.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node46 = node39.useSourceInfoIfMissingFrom(node43);
        boolean boolean47 = node46.isQuotedString();
        node46.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile50 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node46);
        boolean boolean51 = staticSourceFile50.isExtern();
        int int53 = staticSourceFile50.getColumnOfOffset(39);
        boolean boolean54 = staticSourceFile50.isExtern();
        boolean boolean55 = staticSourceFile50.isExtern();
        int int57 = staticSourceFile50.getLineOfOffset(1);
        node15.setStaticSourceFile(staticSourceFile50);
        boolean boolean59 = node15.isLabelName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(jSType35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        boolean boolean17 = node15.isGetterDef();
        boolean boolean18 = node15.isEmpty();
        boolean boolean19 = node15.isDo();
        boolean boolean20 = node15.isExprResult();
        boolean boolean21 = node15.isNoSideEffectsCall();
        boolean boolean22 = node15.isAnd();
        boolean boolean23 = node15.isDo();
        boolean boolean24 = node15.isBreak();
        boolean boolean25 = node15.wasEmptyNode();
        boolean boolean26 = node15.isDelProp();
        com.google.javascript.rhino.Node node27 = node15.removeFirstChild();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node27.getAncestors();
        node27.setSourceFileForTesting("NUMBER 100.0 100\n");
        java.lang.String str31 = node27.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet34.isEmpty();
        boolean boolean41 = strSet34.add("STRING STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(52, "ERROR");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 100.0 4095\n", (-1), 96);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        com.google.javascript.rhino.Node node11 = node5.getLastSibling();
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        node5.setWasEmptyNode(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(inputId12);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        int int4 = strList2.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean6 = strList2.remove((java.lang.Object) visibility5);
        java.util.Spliterator<java.lang.String> strSpliterator7 = strList2.spliterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        int int16 = node9.getLength();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        int int28 = strList26.size();
        boolean boolean29 = strSet20.containsAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet20.spliterator();
        boolean boolean31 = strList2.containsAll((java.util.Collection<java.lang.String>) strSet20);
        int int32 = strSet20.size();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        int int41 = node34.getLength();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object[] objArray48 = strSet45.toArray();
        int int49 = strSet45.size();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isFunction();
        boolean boolean53 = node51.isNot();
        boolean boolean54 = strSet45.contains((java.lang.Object) boolean53);
        strSet45.clear();
        int int56 = strSet45.size();
        boolean boolean57 = strSet45.isEmpty();
        boolean boolean58 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet45);
        java.lang.Object[] objArray59 = strSet20.toArray();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSpliterator7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[hi!]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[hi!]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.isHidden();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node1.setWasEmptyNode(true);
        boolean boolean4 = node1.isArrayLit();
        boolean boolean5 = node1.isIn();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        boolean boolean16 = node14.isComma();
        boolean boolean17 = node14.isName();
        boolean boolean18 = node14.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node14.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node7.isUnscopedQualifiedName();
        java.lang.String str12 = node7.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str22 = node5.checkTreeEquals(node8);
        node5.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType25 = node5.getJSType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        boolean boolean42 = node41.isRegExp();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        java.lang.String str47 = node44.toString();
        com.google.javascript.rhino.Node node48 = node41.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean49 = node32.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node51.hasChild(node55);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node55.setJSType(jSType57);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(45, node32, node55, 10, 2);
        boolean boolean62 = node55.isVarArgs();
        boolean boolean63 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node55);
        boolean boolean64 = node55.isEmpty();
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(35, nodeArray69, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, nodeArray69, 4, 27);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(0, nodeArray69);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(53, nodeArray69);
        boolean boolean78 = node77.isArrayLit();
        boolean boolean79 = node77.isLabelName();
        node77.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node82 = node77.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChildAfter(node55, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "NUMBER -1.0" + "'", str47, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node82);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0, 3, (int) ' ');
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        node1.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node14);
        boolean boolean21 = node20.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        java.lang.String str26 = node23.toString();
        com.google.javascript.rhino.Node node27 = node20.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoFromForTree(node20);
        boolean boolean29 = node20.isFor();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        boolean boolean38 = node37.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node40.setJSType(jSType45);
        boolean boolean47 = node40.isOr();
        int int48 = node40.getChildCount();
        com.google.javascript.rhino.Node node49 = node20.srcrefTree(node40);
        int int50 = node40.getLength();
        node40.putBooleanProp(4, true);
        boolean boolean54 = node40.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER -1.0" + "'", str26, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER -1.0" + "'", str43, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo45.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = jSDocInfo45.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection49 = jSDocInfo45.getTypeNodes();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        boolean boolean51 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet50);
        int int52 = strSet43.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo53.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet54.stream();
        boolean boolean56 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet54);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet54.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo58.getExtendedInterfaces();
        java.lang.String str60 = jSDocInfo58.getReturnDescription();
        boolean boolean61 = jSDocInfo58.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo58.getExtendedInterfaces();
        boolean boolean63 = jSDocInfo58.isExterns();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo58.getModifies();
        java.util.Iterator<java.lang.String> strItor65 = strSet64.iterator();
        java.lang.Object[] objArray66 = strSet64.toArray();
        strSet64.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(nodeCollection49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node9.isFor();
        boolean boolean16 = node9.isGetterDef();
        boolean boolean17 = node9.isFor();
        boolean boolean18 = node9.hasMoreThanOneChild();
        boolean boolean19 = node9.isNot();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        boolean boolean24 = node21.isVarArgs();
        boolean boolean25 = node21.isVar();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node33 = com.google.javascript.jscomp.NodeUtil.newExpr(node27);
        node27.setOptionalArg(true);
        node27.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        boolean boolean47 = node46.isRegExp();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        java.lang.String str52 = node49.toString();
        com.google.javascript.rhino.Node node53 = node46.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node54 = node27.useSourceInfoFromForTree(node46);
        boolean boolean55 = node27.hasOneChild();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        boolean boolean61 = node57.isVar();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        boolean boolean70 = node69.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node76 = node69.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.jscomp.CodingConvention.Bind bind77 = new com.google.javascript.jscomp.CodingConvention.Bind(node27, node57, node69);
        boolean boolean78 = node57.isInstanceOf();
        com.google.javascript.rhino.Node node79 = node21.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.jstype.JSType jSType80 = node57.getJSType();
        int int81 = node57.getLength();
        com.google.javascript.rhino.InputId inputId83 = new com.google.javascript.rhino.InputId("Not declared as a constructor");
        node57.setInputId(inputId83);
        node9.setInputId(inputId83);
        boolean boolean86 = node9.isFalse();
        node9.setLineno((int) (short) 1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER -1.0" + "'", str52, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER -1.0" + "'", str75, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        java.io.IOException iOException2 = new java.io.IOException("NUMBER -1.0\n");
        java.io.IOException iOException3 = new java.io.IOException("InputId: Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (java.lang.Throwable) iOException2);
        java.lang.String str4 = iOException2.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.io.IOException: NUMBER -1.0\n" + "'", str4, "java.io.IOException: NUMBER -1.0\n");
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 97);
        node1.setLength(163937);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) '4', "EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]");
        typePosition0.setItem(node8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        int int7 = node1.getIntProp((int) ' ');
        boolean boolean8 = node1.isNE();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        com.google.javascript.rhino.Node node21 = node1.srcref(node20);
        node20.setOptionalArg(false);
        boolean boolean24 = node20.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getPositionOnEndLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(409642, 40962, 45, 50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 409642?end-line: 45");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(markerCollection7);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        int int4 = strList2.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean6 = strList2.remove((java.lang.Object) visibility5);
        boolean boolean8 = strList2.add("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo9.getParameterNames();
        boolean boolean12 = jSDocInfo9.hasParameter("hi!");
        boolean boolean13 = jSDocInfo9.hasThisType();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo9.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo15.getParameterNames();
        boolean boolean17 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet16);
        strSet14.clear();
        boolean boolean19 = strList2.addAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        int int24 = strList22.size();
        boolean boolean25 = strSet14.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo26.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.stream();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        int int44 = node37.getLength();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.util.Spliterator<java.lang.String> strSpliterator51 = strSet48.spliterator();
        boolean boolean52 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet48);
        java.lang.Object[] objArray53 = strSet34.toArray();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.Node node61 = com.google.javascript.jscomp.NodeUtil.newExpr(node55);
        int int62 = node55.getLength();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean69 = strSet66.isEmpty();
        boolean boolean70 = strSet34.containsAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean71 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean72 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet27);
        int int73 = strSet14.size();
        java.util.Iterator<java.lang.String> strItor74 = strSet14.iterator();
        int int75 = strSet14.size();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strSpliterator51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[hi!]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node4 = namePosition0.getItem();
        int int5 = namePosition0.getEndLine();
        int int6 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        java.lang.String str14 = node11.toString();
        com.google.javascript.rhino.Node node15 = node8.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(50, node15);
        java.lang.String str17 = node15.getSourceFileName();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, node20, node22, node25);
        boolean boolean29 = node22.isBreak();
        com.google.javascript.rhino.Node node30 = node22.cloneNode();
        boolean boolean31 = node15.isEquivalentTo(node30);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        boolean boolean41 = node40.isRegExp();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node40.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(50, node47);
        boolean boolean49 = node47.isGetterDef();
        boolean boolean50 = node47.isEmpty();
        boolean boolean51 = node47.isDo();
        boolean boolean52 = node47.isExprResult();
        int int53 = node15.getIndexOfChild(node47);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        boolean boolean65 = node64.isRegExp();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node67.isName();
        boolean boolean69 = node67.isSwitch();
        java.lang.String str70 = node67.toString();
        com.google.javascript.rhino.Node node71 = node64.useSourceInfoIfMissingFromForTree(node67);
        java.lang.String str72 = node55.checkTreeEquals(node71);
        com.google.javascript.rhino.Node node73 = node15.srcref(node55);
        com.google.javascript.rhino.Node node74 = node15.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo75 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER -1.0" + "'", str14, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER -1.0" + "'", str70, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str72, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        boolean boolean20 = jSDocInfo0.hasParameter("Not declared as a type name");
        java.lang.String str21 = jSDocInfo0.getDeprecationReason();
        boolean boolean22 = jSDocInfo0.containsDeclaration();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo0.getModifies();
        java.lang.String str24 = jSDocInfo0.getReturnDescription();
        int int25 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, node2, node4, node7);
        boolean boolean11 = node4.isBreak();
        com.google.javascript.rhino.Node node12 = node4.cloneNode();
        boolean boolean14 = node4.getBooleanProp(8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = node4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER -1.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node12.getType();
        boolean boolean14 = node12.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node12);
        boolean boolean16 = jSDocInfo0.isHidden();
        int int17 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str18 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 130 + "'", int13 == 130);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str4 = jSDocInfo0.getLendsName();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(35, nodeArray4, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409642, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        int int19 = node12.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node12.new FileLevelJsDocBuilder();
        boolean boolean21 = node12.isAssignAdd();
        boolean boolean22 = node12.isRegExp();
        com.google.javascript.rhino.Node node23 = node10.srcref(node12);
        boolean boolean24 = node10.isThis();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        boolean boolean5 = node1.isDebugger();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node11.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node11);
        node11.setWasEmptyNode(false);
        boolean boolean17 = node1.isEquivalentTo(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo18.getExtendedInterfaces();
        boolean boolean21 = jSDocInfo18.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isFunction();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isEmpty();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        boolean boolean36 = node30.isVar();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isWith();
        com.google.javascript.rhino.Node node43 = node30.srcref(node38);
        node30.detachChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node24, node30, node46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        boolean boolean59 = node53.isComma();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        java.lang.String str73 = node70.toString();
        com.google.javascript.rhino.Node node74 = node67.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node70.setJSType(jSType75);
        boolean boolean77 = node70.isBlock();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, node51, node53, node70, 10, (int) (short) 10);
        boolean boolean81 = node24.hasChildren();
        jSDocInfo18.setAssociatedNode(node24);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable84 = node1.getAncestors();
        boolean boolean85 = node1.isNE();
        com.google.javascript.rhino.Node node86 = node1.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER -1.0" + "'", str73, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(ancestorIterable84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        boolean boolean24 = strSet19.isEmpty();
        boolean boolean26 = strSet19.add("java.io.IOException: java.io.IOException");
        int int27 = strSet19.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo28.getExtendedInterfaces();
        java.lang.String str30 = jSDocInfo28.getVersion();
        boolean boolean31 = jSDocInfo28.isInterface();
        boolean boolean32 = jSDocInfo28.isJavaDispatch();
        java.lang.String str33 = jSDocInfo28.getSourceName();
        boolean boolean34 = jSDocInfo28.hasType();
        java.lang.String str35 = jSDocInfo28.getVersion();
        java.lang.String str36 = jSDocInfo28.getDescription();
        boolean boolean37 = strSet19.contains((java.lang.Object) str36);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        boolean boolean8 = node5.isAdd();
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        com.google.javascript.rhino.Node node10 = node5.getLastSibling();
        boolean boolean11 = node5.isGetElem();
        com.google.javascript.rhino.Node node12 = node5.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = node12.isBreak();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        boolean boolean5 = jSDocInfo0.isConstant();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        boolean boolean21 = node14.isRegExp();
        boolean boolean22 = node14.isGetProp();
        boolean boolean23 = node14.isOptionalArg();
        int int25 = node14.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node14.getLastSibling();
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFromForTree(node14);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        java.lang.String str52 = com.google.javascript.jscomp.NodeUtil.getSourceName(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean54 = strSet41.equals((java.lang.Object) node53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet41.spliterator();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        int int60 = strList58.size();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        int int65 = strList63.size();
        boolean boolean66 = strList58.removeAll((java.util.Collection<java.lang.String>) strList63);
        java.io.IOException iOException68 = new java.io.IOException("Not declared as a type name");
        java.io.IOException iOException70 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable throwable71 = null;
        java.io.IOException iOException72 = new java.io.IOException(throwable71);
        java.lang.Exception[] exceptionArray73 = new java.lang.Exception[] { iOException68, iOException70, iOException72 };
        java.lang.Exception[] exceptionArray74 = strList58.toArray(exceptionArray73);
        boolean boolean75 = strSet41.containsAll((java.util.Collection<java.lang.String>) strList58);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node77 = node1.getLastSibling();
        int int78 = node1.getSourceOffset();
        boolean boolean79 = node1.isBreak();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(exceptionArray73);
        org.junit.Assert.assertNotNull(exceptionArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getBlockDescription();
        jSDocInfo0.setLicense("NUMBER -1.0 0 [input_id: InputId: ]");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, (int) (byte) 100, 43);
        boolean boolean4 = node3.isNew();
        node3.setDouble((double) 8);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, node9, node11, node14);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node14.getJsDocBuilderForNode();
        boolean boolean19 = strSet5.equals((java.lang.Object) fileLevelJsDocBuilder18);
        strSet5.clear();
        strSet5.clear();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        boolean boolean45 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet41);
        java.lang.Object[] objArray46 = strSet27.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        int int55 = node48.getLength();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet59);
        boolean boolean62 = strSet59.isEmpty();
        boolean boolean63 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet59);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet65 = jSDocInfo64.getParameterNames();
        boolean boolean66 = strSet27.containsAll((java.util.Collection<java.lang.String>) strSet65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList68 = jSDocInfo67.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection69 = jSDocInfo67.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = jSDocInfo67.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection71 = jSDocInfo67.getTypeNodes();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo67.getParameterNames();
        boolean boolean73 = strSet65.containsAll((java.util.Collection<java.lang.String>) strSet72);
        int int74 = strSet65.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo75.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream77 = strSet76.stream();
        boolean boolean78 = strSet65.containsAll((java.util.Collection<java.lang.String>) strSet76);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node80.isName();
        boolean boolean82 = node80.isSwitch();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean85 = node84.isFunction();
        boolean boolean86 = node84.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node87 = node80.useSourceInfoIfMissingFrom(node84);
        boolean boolean88 = node80.isNE();
        boolean boolean89 = strSet65.contains((java.lang.Object) boolean88);
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet65.spliterator();
        boolean boolean91 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet65);
        com.google.javascript.rhino.Node node96 = com.google.javascript.rhino.Node.newString(36, "Named type with empty name component", 50, (int) (short) 0);
        boolean boolean97 = strSet5.equals((java.lang.Object) 36);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[hi!]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList68);
        org.junit.Assert.assertNull(strCollection69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(nodeCollection71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSpliterator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isNoAlias();
        boolean boolean16 = jSDocInfo11.isHidden();
        boolean boolean17 = jSDocInfo11.isDeprecated();
        node1.setJSDocInfo(jSDocInfo11);
        java.lang.String str19 = jSDocInfo11.getBlockDescription();
        boolean boolean20 = jSDocInfo11.isExport();
        boolean boolean21 = jSDocInfo11.isConstructor();
        java.lang.String str22 = jSDocInfo11.getLendsName();
        boolean boolean23 = jSDocInfo11.hasTypedefType();
        boolean boolean24 = jSDocInfo11.hasThisType();
        java.lang.String str25 = jSDocInfo11.toString();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JSDocInfo" + "'", str25, "JSDocInfo");
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException2.getSuppressed();
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException(throwable6);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException(throwable8);
        iOException7.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("hi!", (java.lang.Throwable) iOException7);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException7);
        iOException2.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]\n    NUMBER -1.0\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: EXPR_RESULT [synthetic: 1] [is_var_args_param: JSDocInfo]\n    NUMBER -1.0\n\n\nSubtree2: NUMBER -1.0\n", (java.lang.Throwable) iOException12);
        java.lang.Throwable throwable15 = null;
        java.io.IOException iOException16 = new java.io.IOException(throwable15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.lang.Throwable[] throwableArray18 = iOException16.getSuppressed();
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException(throwable20);
        java.lang.Throwable throwable22 = null;
        java.io.IOException iOException23 = new java.io.IOException(throwable22);
        iOException21.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException("hi!", (java.lang.Throwable) iOException21);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException21);
        iOException16.addSuppressed((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException16);
        iOException12.addSuppressed((java.lang.Throwable) iOException16);
        java.lang.Throwable throwable32 = null;
        java.io.IOException iOException33 = new java.io.IOException(throwable32);
        java.lang.Throwable throwable34 = null;
        java.io.IOException iOException35 = new java.io.IOException(throwable34);
        iOException33.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("hi!", (java.lang.Throwable) iOException33);
        java.lang.Throwable[] throwableArray38 = iOException37.getSuppressed();
        java.lang.Throwable throwable40 = null;
        java.io.IOException iOException41 = new java.io.IOException(throwable40);
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        java.io.IOException iOException43 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException41);
        iOException37.addSuppressed((java.lang.Throwable) iOException43);
        java.io.IOException iOException47 = new java.io.IOException("NUMBER -1.0");
        java.io.IOException iOException48 = new java.io.IOException("NUMBER -1.0\n", (java.lang.Throwable) iOException47);
        iOException37.addSuppressed((java.lang.Throwable) iOException48);
        java.lang.Throwable throwable52 = null;
        java.io.IOException iOException53 = new java.io.IOException(throwable52);
        java.lang.Throwable throwable54 = null;
        java.io.IOException iOException55 = new java.io.IOException(throwable54);
        iOException53.addSuppressed((java.lang.Throwable) iOException55);
        java.io.IOException iOException57 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", (java.lang.Throwable) iOException55);
        java.io.IOException iOException58 = new java.io.IOException("java.io.IOException: java.io.IOException", (java.lang.Throwable) iOException57);
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException58);
        iOException37.addSuppressed((java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException("EXPR_RESULT\n    NUMBER -1.0\n", (java.lang.Throwable) iOException59);
        iOException12.addSuppressed((java.lang.Throwable) iOException59);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node25.isGetElem();
        node1.putProp((int) (short) 100, (java.lang.Object) boolean27);
        boolean boolean29 = node1.isCatch();
        boolean boolean30 = node1.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newExpr(node32);
        boolean boolean39 = node38.isRegExp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        java.lang.String str44 = node41.toString();
        com.google.javascript.rhino.Node node45 = node38.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        boolean boolean54 = node48.isVar();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        boolean boolean60 = node56.isWith();
        com.google.javascript.rhino.Node node61 = node48.srcref(node56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.Node node69 = com.google.javascript.jscomp.NodeUtil.newExpr(node63);
        boolean boolean70 = node69.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node72.isName();
        boolean boolean74 = node72.isSwitch();
        java.lang.String str75 = node72.toString();
        com.google.javascript.rhino.Node node76 = node69.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean79 = node78.isName();
        boolean boolean80 = node78.isSwitch();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean83 = node78.hasChild(node82);
        com.google.javascript.rhino.jstype.JSType jSType84 = null;
        node82.setJSType(jSType84);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) 0, node56, node72, node82, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node89 = node41.srcref(node88);
        com.google.javascript.rhino.Node node90 = node1.useSourceInfoFrom(node89);
        boolean boolean91 = node89.hasChildren();
        boolean boolean92 = node89.isQuotedString();
        com.google.javascript.rhino.Node node93 = node89.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable94 = node93.children();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER -1.0" + "'", str44, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "NUMBER -1.0" + "'", str75, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node93);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasThisType();
        boolean boolean9 = jSDocInfo0.isHidden();
        int int10 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        boolean boolean5 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean13 = jSDocInfo0.isNoCompile();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        boolean boolean14 = node2.isNumber();
        boolean boolean15 = node2.isContinue();
        boolean boolean16 = node2.isCatch();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean2 = node1.isDelProp();
        boolean boolean3 = node1.wasEmptyNode();
        com.google.javascript.rhino.jstype.JSType jSType4 = node1.getJSType();
        boolean boolean5 = node1.wasEmptyNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 44, 52, 37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node3.siblings();
        boolean boolean5 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(35, nodeArray6, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(40, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(409642, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray6);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(52, nodeArray6, 50, (int) '4');
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray6);
        boolean boolean17 = node16.isVarArgs();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node1.getJsDocBuilderForNode();
        boolean boolean11 = node1.isName();
        node1.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        node9.setOptionalArg(true);
        node9.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node36 = node9.useSourceInfoFromForTree(node28);
        boolean boolean37 = node7.hasChild(node9);
        node7.setIsSyntheticBlock(true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo41.getParameterNames();
        node7.putProp(45, (java.lang.Object) jSDocInfo41);
        java.util.Collection<java.lang.String> strCollection44 = jSDocInfo41.getReferences();
        boolean boolean45 = jSDocInfo41.isNoShadow();
        boolean boolean46 = jSDocInfo41.hasEnumParameterType();
        boolean boolean47 = jSDocInfo41.isExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(strCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str9 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("GT");
        boolean boolean14 = jSDocInfo0.isExterns();
        boolean boolean15 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean16 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int3 = namePosition2.getPositionOnStartLine();
        int int4 = namePosition2.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isNumber();
        boolean boolean11 = node6.isComma();
        boolean boolean12 = node6.isDebugger();
        boolean boolean13 = node6.isWith();
        namePosition2.setItem(node6);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 1.0f, 50, (int) ' ');
        com.google.javascript.rhino.Node node19 = node6.useSourceInfoFrom(node18);
        node18.setLength(10);
        boolean boolean22 = node18.isOr();
        com.google.javascript.rhino.Node node23 = assertionFunctionSpec1.getAssertedParam(node18);
        boolean boolean24 = node23.isIf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        boolean boolean51 = node50.isRegExp();
        node42.addChildToBack(node50);
        node50.setLineno(50);
        boolean boolean55 = node50.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        java.lang.String str7 = node4.toString();
        boolean boolean8 = node4.isWith();
        int int10 = node4.getIntProp((int) ' ');
        boolean boolean11 = node4.isNE();
        com.google.javascript.rhino.jstype.JSType jSType12 = node4.getJSType();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition13 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int14 = namePosition13.getPositionOnStartLine();
        int int15 = namePosition13.getStartLine();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        boolean boolean21 = node17.isNumber();
        boolean boolean22 = node17.isComma();
        boolean boolean23 = node17.isDebugger();
        boolean boolean24 = node17.isWith();
        namePosition13.setItem(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        java.lang.String str30 = node27.toString();
        boolean boolean31 = node27.isWith();
        int int33 = node27.getIntProp((int) ' ');
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node27.new FileLevelJsDocBuilder();
        int int35 = node17.getIndexOfChild(node27);
        node4.addChildToFront(node27);
        boolean boolean37 = node27.isRegExp();
        typePosition0.setItem(node27);
        int int39 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node40 = typePosition0.getItem();
        boolean boolean41 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node42 = typePosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER -1.0" + "'", str7, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER -1.0" + "'", str30, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 23, 27);
        boolean boolean4 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node15 = node14.removeChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(41, node20);
        java.lang.String str22 = node14.checkTreeEquals(node20);
        boolean boolean23 = node20.isVoid();
        boolean boolean24 = node20.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str22, "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException(throwable8);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException(throwable10);
        iOException9.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("hi!", (java.lang.Throwable) iOException9);
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        java.lang.Object[] objArray15 = strSet5.toArray((java.lang.Object[]) throwableArray14);
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo16.getExtendedInterfaces();
        java.lang.String str18 = jSDocInfo16.getVersion();
        boolean boolean19 = jSDocInfo16.isInterface();
        boolean boolean20 = jSDocInfo16.isJavaDispatch();
        java.lang.String str21 = jSDocInfo16.getSourceName();
        java.lang.String str22 = jSDocInfo16.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo16.getThisType();
        boolean boolean24 = jSDocInfo16.isHidden();
        boolean boolean25 = jSDocInfo16.hasBaseType();
        java.lang.String str26 = jSDocInfo16.getSourceName();
        boolean boolean27 = strSet5.equals((java.lang.Object) jSDocInfo16);
        strSet5.clear();
        int int29 = strSet5.size();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int40 = namePosition39.getPositionOnStartLine();
        int int41 = namePosition39.getPositionOnStartLine();
        int int42 = namePosition39.getStartLine();
        boolean boolean43 = strSet12.equals((java.lang.Object) namePosition39);
        strSet12.clear();
        java.lang.String[] strArray45 = new java.lang.String[] {};
        java.lang.String[][] strArray46 = new java.lang.String[][] { strArray45 };
        java.lang.String[] strArray47 = new java.lang.String[] {};
        java.lang.String[][] strArray48 = new java.lang.String[][] { strArray47 };
        java.lang.String[][][] strArray49 = new java.lang.String[][][] { strArray46, strArray48 };
        java.lang.String[][][] strArray50 = strSet12.toArray(strArray49);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        java.lang.String str8 = node5.toString();
        boolean boolean9 = node5.isNumber();
        boolean boolean10 = node5.isComma();
        boolean boolean11 = node5.isDebugger();
        boolean boolean12 = node5.isWith();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node14.isName();
        boolean boolean16 = node14.isSwitch();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node14.hasChild(node18);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.String str35 = node18.checkTreeEquals(node21);
        node18.setSourceEncodedPosition((int) 'a');
        com.google.javascript.rhino.jstype.JSType jSType38 = node18.getJSType();
        com.google.javascript.rhino.Node node39 = node5.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 100, node42, node44, node47);
        boolean boolean51 = node44.wasEmptyNode();
        com.google.javascript.rhino.Node node52 = node18.useSourceInfoIfMissingFrom(node44);
        java.util.Set<java.lang.String> strSet53 = node18.getDirectives();
        typePosition0.setItem(node18);
        int int55 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node56 = typePosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(23, 51, (int) (byte) 1, 40962);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 23?end-line: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER -1.0" + "'", str8, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(jSType38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.isExterns();
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean10 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        boolean boolean46 = node40.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node7, node40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node49.isName();
        boolean boolean51 = node49.isSwitch();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node49.hasChild(node53);
        com.google.javascript.rhino.Node node55 = com.google.javascript.jscomp.NodeUtil.newExpr(node53);
        boolean boolean56 = node55.isNumber();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node66.hasChild(node70);
        com.google.javascript.rhino.Node node72 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        boolean boolean73 = node72.isRegExp();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node75.isName();
        boolean boolean77 = node75.isSwitch();
        java.lang.String str78 = node75.toString();
        com.google.javascript.rhino.Node node79 = node72.useSourceInfoIfMissingFromForTree(node75);
        boolean boolean80 = node63.isEquivalentToTyped(node75);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean83 = node82.isName();
        boolean boolean84 = node82.isSwitch();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean87 = node82.hasChild(node86);
        com.google.javascript.rhino.jstype.JSType jSType88 = null;
        node86.setJSType(jSType88);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(45, node63, node86, 10, 2);
        java.util.Set<java.lang.String> strSet93 = null;
        node63.setDirectives(strSet93);
        com.google.javascript.rhino.Node node95 = node55.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node96 = node40.useSourceInfoIfMissingFrom(node55);
        boolean boolean97 = node96.isNoSideEffectsCall();
        boolean boolean98 = node96.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER -1.0" + "'", str78, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        java.lang.Object[] objArray7 = strSet6.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strSet6.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        int int2 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean18 = node10.isDefaultCase();
        typePosition0.setItem(node10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        jSDocInfo0.setDeprecated(false);
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection11);
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        java.util.Set<java.lang.String> strSet8 = node5.getDirectives();
        java.lang.String str9 = com.google.javascript.jscomp.NodeUtil.getSourceName(node5);
        boolean boolean10 = node5.isDelProp();
        node5.setIsSyntheticBlock(false);
        node5.putIntProp((int) '#', 135167);
        boolean boolean16 = node5.isArrayLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(130);
        com.google.javascript.rhino.Node node7 = node1.clonePropsFrom(node6);
        boolean boolean8 = node6.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean3 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isFunction();
        boolean boolean8 = node6.isUnscopedQualifiedName();
        boolean boolean9 = node6.isEmpty();
        boolean boolean10 = node6.isEmpty();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        boolean boolean18 = node12.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.isWith();
        com.google.javascript.rhino.Node node25 = node12.srcref(node20);
        node12.detachChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind29 = new com.google.javascript.jscomp.CodingConvention.Bind(node6, node12, node28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isComma();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node43.hasChild(node47);
        com.google.javascript.rhino.Node node49 = com.google.javascript.jscomp.NodeUtil.newExpr(node43);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node52.isName();
        boolean boolean54 = node52.isSwitch();
        java.lang.String str55 = node52.toString();
        com.google.javascript.rhino.Node node56 = node49.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node52.setJSType(jSType57);
        boolean boolean59 = node52.isBlock();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, node33, node35, node52, 10, (int) (short) 10);
        boolean boolean63 = node6.hasChildren();
        jSDocInfo0.setAssociatedNode(node6);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, (int) (byte) 1, 4095);
        boolean boolean69 = node68.isQuotedString();
        com.google.javascript.rhino.Node node70 = node6.srcref(node68);
        boolean boolean71 = node6.hasOneChild();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = node6.getStaticSourceFile();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "NUMBER -1.0" + "'", str55, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(staticSourceFile72);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = node1.getSourceFileName();
        boolean boolean8 = node1.isIn();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        node14.setType(2);
        com.google.javascript.rhino.Node node20 = node14.getLastSibling();
        boolean boolean21 = node14.isRegExp();
        boolean boolean22 = node14.isGetProp();
        boolean boolean23 = node14.isOptionalArg();
        int int25 = node14.getIntProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node14.getLastSibling();
        com.google.javascript.rhino.Node node27 = node1.useSourceInfoIfMissingFromForTree(node14);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection28 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet41.spliterator();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        java.lang.String str52 = com.google.javascript.jscomp.NodeUtil.getSourceName(node46);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        boolean boolean54 = strSet41.equals((java.lang.Object) node53);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strSet41.spliterator();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        int int60 = strList58.size();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        int int65 = strList63.size();
        boolean boolean66 = strList58.removeAll((java.util.Collection<java.lang.String>) strList63);
        java.io.IOException iOException68 = new java.io.IOException("Not declared as a type name");
        java.io.IOException iOException70 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable throwable71 = null;
        java.io.IOException iOException72 = new java.io.IOException(throwable71);
        java.lang.Exception[] exceptionArray73 = new java.lang.Exception[] { iOException68, iOException70, iOException72 };
        java.lang.Exception[] exceptionArray74 = strList58.toArray(exceptionArray73);
        boolean boolean75 = strSet41.containsAll((java.util.Collection<java.lang.String>) strList58);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 10, 50, 31);
        boolean boolean81 = node80.isHook();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean84 = node83.isName();
        boolean boolean85 = node83.isSwitch();
        boolean boolean86 = node83.isNull();
        boolean boolean87 = node83.isFunction();
        node83.putBooleanProp(12, false);
        node83.setVarArgs(false);
        boolean boolean93 = node80.isEquivalentToTyped(node83);
        boolean boolean94 = strSet41.contains((java.lang.Object) node83);
        boolean boolean95 = node83.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeCollection28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(exceptionArray73);
        org.junit.Assert.assertNotNull(exceptionArray74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        com.google.javascript.rhino.Node[] nodeArray1 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(35, nodeArray1, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        java.lang.String str9 = node6.toString();
        boolean boolean10 = node6.isWith();
        boolean boolean11 = node6.hasOneChild();
        boolean boolean12 = node6.isDebugger();
        com.google.javascript.rhino.Node node13 = node6.cloneNode();
        boolean boolean14 = node6.isSyntheticBlock();
        boolean boolean15 = node6.isTypeOf();
        node4.addChildrenToFront(node6);
        boolean boolean17 = node4.isOptionalArg();
        java.lang.String str18 = node4.getQualifiedName();
        boolean boolean19 = node4.isThrow();
        boolean boolean20 = node4.isSetterDef();
        org.junit.Assert.assertNotNull(nodeArray1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER -1.0" + "'", str9, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasType();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node1.isNE();
        boolean boolean10 = node1.isObjectLit();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        boolean boolean18 = node12.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        boolean boolean24 = node20.isWith();
        com.google.javascript.rhino.Node node25 = node12.srcref(node20);
        boolean boolean26 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node20);
        com.google.javascript.rhino.Node node27 = node20.removeChildren();
        com.google.javascript.rhino.Node node28 = node1.useSourceInfoIfMissingFrom(node20);
        boolean boolean29 = node20.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType2 = node1.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType3 = null;
        node1.setJSType(jSType3);
        java.lang.Object obj6 = node1.getProp(44);
        node1.setOptionalArg(true);
        java.lang.String str9 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node21);
        boolean boolean39 = node21.isTrue();
        boolean boolean40 = node1.isEquivalentToTyped(node21);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isFunction();
        boolean boolean48 = node46.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node49 = node42.useSourceInfoIfMissingFrom(node46);
        boolean boolean50 = node49.isQuotedString();
        node49.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node49);
        boolean boolean54 = staticSourceFile53.isExtern();
        int int56 = staticSourceFile53.getColumnOfOffset(39);
        node1.setStaticSourceFile(staticSourceFile53);
        int int59 = staticSourceFile53.getLineOfOffset(40);
        boolean boolean60 = staticSourceFile53.isExtern();
        java.lang.String str61 = staticSourceFile53.getName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType2);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str61, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType3 = node2.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        node2.setJSType(jSType4);
        java.lang.Object obj7 = node2.getProp(44);
        node2.setOptionalArg(true);
        java.lang.String str10 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        java.lang.String str15 = node12.toString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(130);
        com.google.javascript.rhino.Node node18 = node12.clonePropsFrom(node17);
        boolean boolean19 = node12.isStringKey();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, node2, node12, 31, 37);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        java.lang.String str31 = node25.getSourceFileName();
        boolean boolean32 = node25.isVar();
        boolean boolean33 = node25.isReturn();
        node22.putProp(2, (java.lang.Object) node25);
        boolean boolean35 = node25.isTypeOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER -1.0" + "'", str15, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n", 31, 4);
        boolean boolean4 = node3.isFalse();
        boolean boolean5 = node3.isDec();
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        boolean boolean23 = node22.isRegExp();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        java.lang.String str28 = node25.toString();
        com.google.javascript.rhino.Node node29 = node22.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean30 = node13.isEquivalentToTyped(node25);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(45, node13, node36, 10, 2);
        java.util.Set<java.lang.String> strSet43 = null;
        node13.setDirectives(strSet43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        boolean boolean52 = node46.isComma();
        com.google.javascript.jscomp.CodingConvention.Bind bind53 = new com.google.javascript.jscomp.CodingConvention.Bind(node6, node13, node46);
        boolean boolean54 = node13.isHook();
        int int55 = node13.getLength();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node57.hasChild(node61);
        com.google.javascript.rhino.Node node63 = com.google.javascript.jscomp.NodeUtil.newExpr(node57);
        node57.setOptionalArg(true);
        node57.putBooleanProp((int) (short) -1, true);
        boolean boolean69 = node57.hasChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean76 = node71.hasChild(node75);
        com.google.javascript.rhino.Node node77 = com.google.javascript.jscomp.NodeUtil.newExpr(node71);
        boolean boolean78 = node77.isRegExp();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean81 = node80.isName();
        boolean boolean82 = node80.isSwitch();
        java.lang.String str83 = node80.toString();
        com.google.javascript.rhino.Node node84 = node77.useSourceInfoIfMissingFromForTree(node80);
        com.google.javascript.rhino.jstype.JSType jSType85 = null;
        node80.setJSType(jSType85);
        boolean boolean87 = node80.isGetterDef();
        boolean boolean88 = node80.isNoSideEffectsCall();
        node57.addChildrenToBack(node80);
        node57.putIntProp(39, (int) (short) 1);
        com.google.javascript.rhino.Node node93 = node13.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node94 = node3.useSourceInfoIfMissingFrom(node57);
        com.google.javascript.rhino.Node node96 = node94.getChildAtIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = node96.isAssignAdd();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER -1.0" + "'", str28, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER -1.0" + "'", str83, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(node96);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING Not declared as a type name 16");
        int int2 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        boolean boolean6 = node1.isBreak();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo7.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo7.getReferences();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo7.getReferences();
        com.google.javascript.rhino.Node node11 = jSDocInfo7.getAssociatedNode();
        node1.setJSDocInfo(jSDocInfo7);
        jSDocInfo7.setLicense("NUMBER -1.0");
        int int15 = jSDocInfo7.getImplementedInterfaceCount();
        boolean boolean17 = jSDocInfo7.hasDescriptionForParameter("");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        boolean boolean28 = node26.isThis();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int34 = node33.getChildCount();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        boolean boolean42 = node36.isVar();
        com.google.javascript.rhino.Node node43 = node36.getParent();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        boolean boolean51 = node45.isVar();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        java.lang.String str56 = node53.toString();
        boolean boolean57 = node53.isWith();
        com.google.javascript.rhino.Node node58 = node45.srcref(node53);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(130, node33, node36, node53, node62, 0, 15);
        com.google.javascript.rhino.Node node66 = node65.getFirstChild();
        boolean boolean67 = node65.isScript();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node69.isName();
        boolean boolean71 = node69.isSwitch();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node69.hasChild(node73);
        boolean boolean75 = node69.isVar();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node77.isName();
        boolean boolean79 = node77.isSwitch();
        java.lang.String str80 = node77.toString();
        boolean boolean81 = node77.isWith();
        com.google.javascript.rhino.Node node82 = node69.srcref(node77);
        boolean boolean83 = node77.isFor();
        boolean boolean84 = node77.isGetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node77);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(0, node26, node65, node77, 42, 46);
        jSDocInfo7.setAssociatedNode(node65);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo7.getTypedefType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER -1.0" + "'", str56, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "NUMBER -1.0" + "'", str80, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(staticSourceFile85);
        org.junit.Assert.assertNull(jSTypeExpression90);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node12 = com.google.javascript.jscomp.NodeUtil.newExpr(node6);
        int int13 = node12.getType();
        boolean boolean14 = node12.isDefaultCase();
        jSDocInfo0.setAssociatedNode(node12);
        node12.setSourceEncodedPosition(54);
        boolean boolean18 = node12.isLabel();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 130 + "'", int13 == 130);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.isImplicitCast();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str7 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        java.util.RandomAccess[][] randomAccessArray10 = new java.util.RandomAccess[][] {};
        java.util.RandomAccess[][] randomAccessArray11 = strSet8.toArray(randomAccessArray10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(41, node4);
        java.lang.String str6 = com.google.javascript.jscomp.NodeUtil.getSourceName(node4);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        boolean boolean15 = node1.isNoSideEffectsCall();
        boolean boolean16 = node1.isName();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isLabel();
        boolean boolean21 = node19.isGetterDef();
        node1.putProp(54, (java.lang.Object) boolean21);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        boolean boolean8 = node7.isRegExp();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        com.google.javascript.rhino.Node node14 = node7.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node10.setJSType(jSType15);
        boolean boolean17 = node10.isGetterDef();
        boolean boolean18 = node10.isWith();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        node24.setType(2);
        boolean boolean30 = node24.isIn();
        boolean boolean31 = node24.wasEmptyNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString((-1), "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", 43, (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node10, node24, node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        boolean boolean46 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node48);
        node45.setLineno(42);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isFunction();
        boolean boolean61 = node59.isUnscopedQualifiedName();
        boolean boolean62 = node59.isEmpty();
        boolean boolean63 = node59.isEmpty();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node65.isName();
        boolean boolean67 = node65.isSwitch();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean70 = node65.hasChild(node69);
        boolean boolean71 = node65.isVar();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        java.lang.String str76 = node73.toString();
        boolean boolean77 = node73.isWith();
        com.google.javascript.rhino.Node node78 = node65.srcref(node73);
        node65.detachChildren();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind82 = new com.google.javascript.jscomp.CodingConvention.Bind(node59, node65, node81);
        boolean boolean83 = node59.isNew();
        java.lang.String str87 = node59.toString(false, true, true);
        com.google.javascript.rhino.Node node88 = node59.cloneNode();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(24, node57, node59, 46, 32);
        node45.addChildrenToBack(node91);
        boolean boolean93 = node10.isEquivalentToTyped(node45);
        boolean boolean94 = node10.isBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "NUMBER -1.0" + "'", str76, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "NUMBER -1.0" + "'", str87, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        boolean boolean8 = node1.isGetterDef();
        java.lang.String str9 = node1.getQualifiedName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node1.getJSDocInfo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSDocInfo10);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isFunction();
        node2.putIntProp((int) (byte) 100, (int) (short) 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        java.lang.String str11 = node8.toString();
        boolean boolean12 = node8.isWith();
        int int14 = node8.getIntProp((int) ' ');
        boolean boolean15 = node8.isNE();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        node21.setType(2);
        com.google.javascript.rhino.Node node27 = node21.getLastSibling();
        com.google.javascript.rhino.Node node28 = node8.srcref(node27);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        boolean boolean54 = node53.isRegExp();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean57 = node56.isName();
        boolean boolean58 = node56.isSwitch();
        java.lang.String str59 = node56.toString();
        com.google.javascript.rhino.Node node60 = node53.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean61 = node44.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node63.isName();
        boolean boolean65 = node63.isSwitch();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean68 = node63.hasChild(node67);
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, node44, node67, 10, 2);
        boolean boolean74 = node67.isFunction();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean77 = node76.isName();
        boolean boolean78 = node76.isSwitch();
        java.lang.String str79 = node76.toString();
        boolean boolean80 = node76.isWith();
        boolean boolean81 = node76.isBreak();
        com.google.javascript.jscomp.CodingConvention.Bind bind82 = new com.google.javascript.jscomp.CodingConvention.Bind(node34, node67, node76);
        com.google.javascript.rhino.Node node83 = node8.useSourceInfoFrom(node76);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node85.isName();
        boolean boolean87 = node85.isSwitch();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean90 = node85.hasChild(node89);
        boolean boolean91 = node89.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection92 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node89);
        com.google.javascript.rhino.Node node93 = com.google.javascript.jscomp.NodeUtil.newExpr(node89);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node((int) (byte) 10, node2, node83, node93, 54, (-1));
        java.lang.String str97 = node96.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER -1.0" + "'", str11, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NUMBER -1.0" + "'", str59, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER -1.0" + "'", str79, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(nodeCollection92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("EXPR_RESULT [source_file: BITXOR 0\n]\n    NUMBER -1.0 [source_file: BITXOR 0\n]\n");
        java.lang.String str2 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "EXPR_RESULT [source_file: BITXOR 0\n]\n    NUMBER -1.0 [source_file: BITXOR 0\n]\n" + "'", str2, "EXPR_RESULT [source_file: BITXOR 0\n]\n    NUMBER -1.0 [source_file: BITXOR 0\n]\n");
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        java.lang.String str6 = node3.toString();
        boolean boolean7 = node3.isVar();
        jSDocInfo0.setAssociatedNode(node3);
        boolean boolean9 = node3.isReturn();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        int int30 = strList28.size();
        boolean boolean31 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet22.spliterator();
        int int33 = strSet22.size();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        boolean boolean41 = node35.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        boolean boolean47 = node43.isWith();
        com.google.javascript.rhino.Node node48 = node35.srcref(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        node54.setType(2);
        int int60 = node48.getIndexOfChild(node54);
        boolean boolean61 = strSet22.remove((java.lang.Object) node54);
        boolean boolean62 = node3.hasChild(node54);
        boolean boolean63 = node3.isQualifiedName();
        boolean boolean64 = node3.isFunction();
        boolean boolean65 = node3.isQualifiedName();
        boolean boolean66 = node3.isCall();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER -1.0" + "'", str6, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[hi!]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        boolean boolean8 = node5.isAdd();
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        com.google.javascript.rhino.Node node10 = node5.getLastSibling();
        com.google.javascript.rhino.Node node11 = node10.cloneTree();
        com.google.javascript.rhino.Node node12 = null;
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(35, nodeArray17, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(0, nodeArray17, 4, 27);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(0, nodeArray17);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(53, nodeArray17);
        boolean boolean26 = node25.isArrayLit();
        boolean boolean27 = node25.isLabelName();
        node25.setLineno((int) (short) 0);
        com.google.javascript.rhino.Node node30 = node25.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node11.replaceChild(node12, node25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node30);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(35, nodeArray4, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(409642, nodeArray4);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray4);
        int int11 = node10.getType();
        boolean boolean12 = node10.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node13 = com.google.javascript.jscomp.NodeUtil.getFunctionParameters(node10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean15 = node14.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        java.lang.String str20 = node17.toString();
        com.google.javascript.rhino.Node node21 = node14.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isEquivalentToTyped(node17);
        com.google.javascript.rhino.InputId inputId23 = null;
        node17.setInputId(inputId23);
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        node17.setCharno((int) (byte) 100);
        int int28 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        boolean boolean34 = node30.isNumber();
        boolean boolean35 = node30.isComma();
        boolean boolean36 = node30.isDebugger();
        boolean boolean37 = node30.isWith();
        node30.setVarArgs(true);
        boolean boolean40 = node30.isBlock();
        double double41 = node30.getDouble();
        node30.detachChildren();
        com.google.javascript.rhino.Node node43 = node17.clonePropsFrom(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "NUMBER -1.0" + "'", str20, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertNotNull(node43);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        int int3 = typePosition0.getEndLine();
        int int4 = typePosition0.getPositionOnStartLine();
        int int5 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        boolean boolean14 = node12.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection15 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node12);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        int int17 = node16.getLineno();
        boolean boolean18 = node16.isScript();
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        com.google.javascript.rhino.Node node20 = node16.cloneNode();
        typePosition0.setItem(node16);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeCollection15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo45.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo45.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = jSDocInfo45.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection49 = jSDocInfo45.getTypeNodes();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo45.getParameterNames();
        boolean boolean51 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet50);
        int int52 = strSet43.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo53.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet54.stream();
        boolean boolean56 = strSet43.containsAll((java.util.Collection<java.lang.String>) strSet54);
        java.lang.Object[] objArray57 = strSet54.toArray();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node59.new FileLevelJsDocBuilder();
        java.lang.String str66 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node59);
        com.google.javascript.rhino.Node node67 = node59.removeChildren();
        boolean boolean68 = node59.isVar();
        boolean boolean69 = node59.isScript();
        boolean boolean70 = node59.isSyntheticBlock();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo71.getExtendedInterfaces();
        java.lang.String str73 = jSDocInfo71.getReturnDescription();
        java.lang.String str74 = jSDocInfo71.getVersion();
        boolean boolean75 = jSDocInfo71.isNoAlias();
        boolean boolean76 = jSDocInfo71.hasTypedefType();
        node59.setJSDocInfo(jSDocInfo71);
        boolean boolean78 = strSet54.equals((java.lang.Object) jSDocInfo71);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = strSet54.add("InputId: NUMBER -1.0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(nodeCollection49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node1.setJSType(jSType6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        int int16 = node9.getLength();
        boolean boolean17 = node9.isNew();
        boolean boolean18 = node9.isString();
        boolean boolean19 = node9.isSwitch();
        java.lang.String str20 = node9.getSourceFileName();
        com.google.javascript.rhino.Node node21 = node1.useSourceInfoFrom(node9);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node21);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getEndLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getEndLine();
        java.lang.String str4 = stringPosition0.getItem();
        int int5 = stringPosition0.getEndLine();
        int int6 = stringPosition0.getEndLine();
        int int7 = stringPosition0.getEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("NUMBER -1.0");
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        int int20 = strList18.size();
        boolean boolean21 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node23.isName();
        boolean boolean25 = node23.isSwitch();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node23.hasChild(node27);
        com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        int int30 = node23.getLength();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet34.isEmpty();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        int int48 = node41.getLength();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet52);
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        int int59 = strList57.size();
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        int int64 = strList62.size();
        boolean boolean65 = strList57.removeAll((java.util.Collection<java.lang.String>) strList62);
        boolean boolean66 = strSet52.retainAll((java.util.Collection<java.lang.String>) strList62);
        strSet52.clear();
        java.util.Spliterator<java.lang.String> strSpliterator68 = strSet52.spliterator();
        boolean boolean69 = strSet34.removeAll((java.util.Collection<java.lang.String>) strSet52);
        boolean boolean70 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream71 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream72 = strSet34.stream();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[hi!]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strStream72);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.hasThisType();
        java.lang.String str7 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.toString();
        int int5 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.InputId inputId12 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship13 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node8);
        boolean boolean14 = node8.isQualifiedName();
        boolean boolean15 = node8.isDec();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", 48, (int) (short) -1);
        boolean boolean20 = node19.isThis();
        com.google.javascript.rhino.Node node21 = node8.useSourceInfoFromForTree(node19);
        boolean boolean22 = node19.isContinue();
        int int23 = node19.getSourcePosition();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative28 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec29 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative28);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        boolean boolean45 = node44.isRegExp();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        java.lang.String str50 = node47.toString();
        com.google.javascript.rhino.Node node51 = node44.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean52 = node35.isEquivalentToTyped(node47);
        com.google.javascript.rhino.Node node53 = assertionFunctionSpec29.getAssertedParam(node35);
        boolean boolean54 = node53.isGetterDef();
        java.util.Set<java.lang.String> strSet55 = node53.getDirectives();
        com.google.javascript.rhino.Node node56 = node26.srcref(node53);
        java.lang.String str57 = node56.getSourceFileName();
        java.util.Set<java.lang.String> strSet58 = node56.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node56.getJsDocBuilderForNode();
        fileLevelJsDocBuilder59.append("NUMBER -1.0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER -1.0" + "'", str50, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(4095);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet19.spliterator();
        boolean boolean23 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet5.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.Node node32 = com.google.javascript.jscomp.NodeUtil.newExpr(node26);
        int int33 = node26.getLength();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet37);
        boolean boolean40 = strSet37.isEmpty();
        boolean boolean41 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo42.getParameterNames();
        boolean boolean44 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet43.spliterator();
        boolean boolean46 = strSet43.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo47.getExtendedInterfaces();
        java.lang.String str49 = jSDocInfo47.getVersion();
        boolean boolean50 = jSDocInfo47.isInterface();
        boolean boolean51 = jSDocInfo47.isJavaDispatch();
        java.lang.String str52 = jSDocInfo47.getSourceName();
        java.lang.String str53 = jSDocInfo47.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo47.getThisType();
        boolean boolean55 = jSDocInfo47.hasModifies();
        boolean boolean56 = jSDocInfo47.containsDeclaration();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo47.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = strSet43.removeAll((java.util.Collection<java.lang.String>) strSet57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[hi!]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo6.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo6.getReturnDescription();
        boolean boolean9 = jSDocInfo6.hasFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo6.getModifies();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        node16.addSuppression("");
        int int22 = node16.getLineno();
        boolean boolean23 = node16.isOr();
        boolean boolean24 = node16.isReturn();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node33 = com.google.javascript.jscomp.NodeUtil.newExpr(node27);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node41 = com.google.javascript.jscomp.NodeUtil.newExpr(node35);
        node35.setOptionalArg(true);
        node35.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean53 = node48.hasChild(node52);
        com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newExpr(node48);
        boolean boolean55 = node54.isRegExp();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        java.lang.String str60 = node57.toString();
        com.google.javascript.rhino.Node node61 = node54.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node62 = node35.useSourceInfoFromForTree(node54);
        boolean boolean63 = node33.hasChild(node35);
        node33.setIsSyntheticBlock(true);
        boolean boolean66 = node33.isVar();
        node16.putProp((int) (byte) 1, (java.lang.Object) node33);
        boolean boolean68 = strSet10.contains((java.lang.Object) (byte) 1);
        java.util.stream.Stream<java.lang.String> strStream69 = strSet10.parallelStream();
        boolean boolean70 = strSet5.contains((java.lang.Object) strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER -1.0" + "'", str60, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasModifies();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100\n");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo10.getExtendedInterfaces();
        java.lang.String str12 = jSDocInfo10.getVersion();
        boolean boolean13 = jSDocInfo10.isInterface();
        boolean boolean14 = jSDocInfo10.isJavaDispatch();
        java.lang.String str15 = jSDocInfo10.getSourceName();
        java.lang.String str16 = jSDocInfo10.getFileOverview();
        boolean boolean17 = jSDocInfo10.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = jSDocInfo10.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int20 = stringPosition19.getEndLine();
        int int21 = stringPosition19.getStartLine();
        int int22 = stringPosition19.getEndLine();
        int int23 = stringPosition19.getEndLine();
        boolean boolean24 = strList18.equals((java.lang.Object) int23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo25.getExtendedInterfaces();
        java.lang.String str27 = jSDocInfo25.getReturnDescription();
        java.lang.String str28 = jSDocInfo25.getLendsName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = jSDocInfo25.getVisibility();
        java.lang.String str31 = jSDocInfo25.getDescriptionForParameter("InputId: Unknown class name");
        boolean boolean32 = strList18.equals((java.lang.Object) jSDocInfo25);
        boolean boolean33 = strSet9.containsAll((java.util.Collection<java.lang.String>) strList18);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(visibility29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node6.setJSType(jSType8);
        node6.addSuppression("");
        boolean boolean12 = node6.isScript();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(31, node6);
        node6.setIsSyntheticBlock(false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable16 = node6.children();
        boolean boolean17 = node6.isLabel();
        boolean boolean18 = node6.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        boolean boolean51 = node50.isRegExp();
        node42.addChildToBack(node50);
        boolean boolean53 = node42.isNE();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 100, node56, node58, node61);
        boolean boolean65 = node58.isBreak();
        com.google.javascript.rhino.Node node66 = node58.removeChildren();
        boolean boolean67 = node58.wasEmptyNode();
        boolean boolean68 = node58.isFor();
        boolean boolean69 = node42.isEquivalentTo(node58);
        boolean boolean70 = node42.isLocalResultCall();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo72.getExtendedInterfaces();
        java.lang.String str74 = jSDocInfo72.getVersion();
        boolean boolean75 = jSDocInfo72.isInterface();
        boolean boolean76 = jSDocInfo72.isJavaDispatch();
        java.lang.String str77 = jSDocInfo72.getSourceName();
        java.lang.String str78 = jSDocInfo72.toString();
        boolean boolean79 = jSDocInfo72.hasFileOverview();
        java.util.Set<java.lang.String> strSet80 = jSDocInfo72.getParameterNames();
        java.lang.Object[] objArray81 = strSet80.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo82.getParameterNames();
        boolean boolean85 = jSDocInfo82.hasParameter("hi!");
        boolean boolean86 = jSDocInfo82.hasThisType();
        java.util.Set<java.lang.String> strSet87 = jSDocInfo82.getModifies();
        java.util.Iterator<java.lang.String> strItor88 = strSet87.iterator();
        strSet87.clear();
        boolean boolean90 = strSet80.containsAll((java.util.Collection<java.lang.String>) strSet87);
        node42.putProp((int) '4', (java.lang.Object) boolean90);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "JSDocInfo" + "'", str78, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(35, nodeArray4, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(0, nodeArray4, 4, 27);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(48, nodeArray4, 46, 38);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(104, nodeArray4);
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        jSDocInfo0.addSuppression("Not declared as a constructor");
        java.util.Set<java.lang.String> strSet21 = jSDocInfo0.getParameterNames();
        boolean boolean22 = jSDocInfo0.isInterface();
        boolean boolean23 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        node10.setCharno((int) '#');
        boolean boolean63 = node10.isNumber();
        com.google.javascript.rhino.Node node64 = node10.getLastSibling();
        boolean boolean65 = node10.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isIf();
        com.google.javascript.rhino.Node node20 = node1.removeChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        boolean boolean32 = node31.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node38 = node31.useSourceInfoIfMissingFromForTree(node34);
        java.lang.String str39 = node22.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        boolean boolean48 = node46.isGetElem();
        node22.putProp((int) (short) 100, (java.lang.Object) boolean48);
        boolean boolean50 = node22.isCatch();
        boolean boolean51 = node22.isRegExp();
        java.lang.String str52 = node1.checkTreeEquals(node22);
        boolean boolean53 = node22.isVar();
        java.lang.String str54 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node22);
        boolean boolean55 = node22.isAdd();
        boolean boolean56 = node22.hasOneChild();
        boolean boolean57 = node22.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER -1.0" + "'", str37, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str39, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags1.setAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        int int9 = node2.getLength();
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean17 = node2.getBooleanProp(41);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node2.setJSType(jSType18);
        boolean boolean20 = node2.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        com.google.javascript.rhino.Node node25 = node2.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        boolean boolean28 = node27.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        com.google.javascript.rhino.Node node36 = com.google.javascript.jscomp.NodeUtil.newExpr(node30);
        int int37 = node30.getLength();
        boolean boolean38 = node30.isNew();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node40.hasChild(node44);
        com.google.javascript.rhino.Node node46 = com.google.javascript.jscomp.NodeUtil.newExpr(node40);
        int int47 = node40.getLength();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet51);
        boolean boolean55 = node40.getBooleanProp(41);
        com.google.javascript.rhino.Node node56 = node30.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        boolean boolean61 = node56.hasChild(node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((-1.0d), 43, 35);
        int int66 = node65.getSourceOffset();
        boolean boolean67 = node65.isScript();
        boolean boolean68 = node58.isEquivalentToTyped(node65);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(143457, node2, node27, node65, (int) '#', 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        node8.setSourceEncodedPosition(53);
        boolean boolean29 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node8);
        boolean boolean30 = node8.hasMoreThanOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node8.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator32 = nodeIterable31.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(nodeSpliterator32);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(204831, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        boolean boolean11 = node5.isVar();
        boolean boolean12 = node5.isGetterDef();
        boolean boolean13 = node5.isAnd();
        node5.addSuppression("Node tree inequality:\nTree1:\nSHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n\n\nTree2:\nNUMBER -1.0\n\n\nSubtree1: SHEQ 10\n    NUMBER -1.0\n    NUMBER -1.0\n\n\nSubtree2: NUMBER -1.0\n");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node17.setWasEmptyNode(true);
        boolean boolean20 = node17.isOr();
        boolean boolean21 = node17.isNumber();
        node17.putIntProp((int) (short) 0, 51);
        boolean boolean25 = node17.isOr();
        node17.putIntProp(52, 16773220);
        boolean boolean29 = node17.isLabelName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(143457, node3, node5, node17, 53, 32);
        node3.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean9 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean10 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node1.getAncestors();
        boolean boolean10 = node1.isGetElem();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        boolean boolean19 = node13.isVar();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        java.lang.String str24 = node21.toString();
        boolean boolean25 = node21.isWith();
        com.google.javascript.rhino.Node node26 = node13.srcref(node21);
        int int27 = node13.getChildCount();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(4, node13);
        java.lang.Object obj30 = node13.getProp(13);
        com.google.javascript.rhino.Node node31 = node1.copyInformationFrom(node13);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        boolean boolean3 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.setDeprecated(false);
        boolean boolean7 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        java.lang.String str7 = com.google.javascript.jscomp.NodeUtil.getSourceName(node1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        com.google.javascript.rhino.Node node9 = node1.removeChildren();
        com.google.javascript.rhino.InputId inputId10 = node1.getInputId();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(inputId10);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        jSDocInfo0.setAssociatedNode(node16);
        boolean boolean20 = jSDocInfo0.hasParameter("Not declared as a type name");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo0.getReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo24.getExtendedInterfaces();
        java.lang.String str26 = jSDocInfo24.getReturnDescription();
        boolean boolean27 = jSDocInfo24.hasFileOverview();
        boolean boolean28 = jSDocInfo24.isNoAlias();
        jSDocInfo24.setDeprecated(true);
        jSDocInfo24.setLicense("java.io.IOException: java.io.IOException");
        java.util.Set<java.lang.String> strSet33 = jSDocInfo24.getSuppressions();
        java.util.Iterator<java.lang.String> strItor34 = strSet33.iterator();
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        int int39 = strList37.size();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        boolean boolean41 = strList37.remove((java.lang.Object) visibility40);
        boolean boolean43 = strList37.add("hi!");
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo44.getParameterNames();
        boolean boolean47 = jSDocInfo44.hasParameter("hi!");
        boolean boolean48 = jSDocInfo44.hasThisType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo44.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo50.getParameterNames();
        boolean boolean52 = strSet49.addAll((java.util.Collection<java.lang.String>) strSet51);
        strSet49.clear();
        boolean boolean54 = strList37.addAll((java.util.Collection<java.lang.String>) strSet49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo55.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection57 = jSDocInfo55.getReferences();
        boolean boolean58 = jSDocInfo55.isJavaDispatch();
        java.lang.String str59 = jSDocInfo55.toString();
        boolean boolean60 = jSDocInfo55.isImplicitCast();
        int int61 = jSDocInfo55.getImplementedInterfaceCount();
        java.lang.String str62 = jSDocInfo55.getReturnDescription();
        boolean boolean63 = strList37.contains((java.lang.Object) str62);
        java.lang.Object[] objArray64 = strList37.toArray();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node66.hasChild(node70);
        com.google.javascript.rhino.Node node72 = com.google.javascript.jscomp.NodeUtil.newExpr(node66);
        int int73 = node66.getLength();
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet81 = jSDocInfo80.getParameterNames();
        boolean boolean83 = jSDocInfo80.hasParameter("hi!");
        boolean boolean84 = jSDocInfo80.hasThisType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo80.getModifies();
        java.util.Iterator<java.lang.String> strItor86 = strSet85.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator87 = strSet85.spliterator();
        boolean boolean88 = strSet77.addAll((java.util.Collection<java.lang.String>) strSet85);
        java.lang.Object[] objArray89 = strSet85.toArray();
        boolean boolean90 = strList37.addAll((java.util.Collection<java.lang.String>) strSet85);
        boolean boolean91 = strSet33.containsAll((java.util.Collection<java.lang.String>) strSet85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = strList23.retainAll((java.util.Collection<java.lang.String>) strSet33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNull(strCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "JSDocInfo" + "'", str59, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[hi!, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[hi!, hi!]");
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strItor86);
        org.junit.Assert.assertNotNull(strSpliterator87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("Not declared as a type name");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        boolean boolean11 = jSDocInfo0.hasParameter("InputId: java.io.IOException");
        boolean boolean12 = jSDocInfo0.isConstructor();
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strCollection13);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isHidden();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        boolean boolean27 = node25.isGetElem();
        node1.putProp((int) (short) 100, (java.lang.Object) boolean27);
        boolean boolean29 = node1.isCatch();
        boolean boolean30 = node1.isSwitch();
        boolean boolean31 = node1.isThrow();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable32 = node1.getAncestors();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node1.getJsDocBuilderForNode();
        boolean boolean34 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(ancestorIterable32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        boolean boolean3 = typePosition1.hasBrackets();
        boolean boolean4 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", 4, 4095);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(46);
        node9.addChildrenToFront(node11);
        typePosition1.setItem(node9);
        com.google.javascript.rhino.Node node14 = typePosition1.getItem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        boolean boolean23 = node17.isVar();
        com.google.javascript.rhino.InputId inputId24 = null;
        node17.setInputId(inputId24);
        java.lang.Object obj27 = node17.getProp(52);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node29.setWasEmptyNode(true);
        boolean boolean32 = node29.isOr();
        boolean boolean33 = node29.isInstanceOf();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(4095, node17, node29, 130, 10);
        int int37 = node29.getLength();
        boolean boolean38 = node29.isNumber();
        boolean boolean39 = node29.isNew();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node29.setJSType(jSType40);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node14, node29);
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isName();
        boolean boolean7 = node5.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node5.hasChild(node9);
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.InputId inputId13 = com.google.javascript.jscomp.NodeUtil.getInputId(node9);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship14 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node3, node9);
        boolean boolean15 = node9.isQualifiedName();
        boolean boolean16 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isFunction();
        boolean boolean20 = node18.isNot();
        java.lang.String str21 = node18.getSourceFileName();
        com.google.javascript.rhino.Node node22 = node9.srcrefTree(node18);
        boolean boolean23 = node9.isStringKey();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(51, node9, (int) '4', 1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 10, (int) (byte) 0, 41);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(51, node32, (int) '#', (int) 'a');
        java.lang.String str36 = node35.getQualifiedName();
        int int38 = node35.getIntProp(4095);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((-1), node35, 0, 0);
        boolean boolean42 = node9.hasChild(node41);
        org.junit.Assert.assertTrue("'" + subclassType1 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType1.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 0);
        boolean boolean2 = node1.isLabelName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node5.isFunction();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node8 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean9 = node8.isQuotedString();
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node8);
        boolean boolean13 = staticSourceFile12.isExtern();
        int int15 = staticSourceFile12.getColumnOfOffset(39);
        int int17 = staticSourceFile12.getLineOfOffset(53);
        int int19 = staticSourceFile12.getLineOffset(31);
        int int21 = staticSourceFile12.getLineOfOffset((-1));
        java.lang.String str22 = staticSourceFile12.getName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-2147483648) + "'", int19 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str22, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.InputId inputId9 = com.google.javascript.jscomp.NodeUtil.getInputId(node5);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        int int18 = node11.getLength();
        boolean boolean19 = node11.isNew();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        int int28 = node21.getLength();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean36 = node21.getBooleanProp(41);
        com.google.javascript.rhino.Node node37 = node11.useSourceInfoFromForTree(node21);
        boolean boolean38 = node21.isGetElem();
        com.google.javascript.rhino.Node node39 = node5.useSourceInfoFrom(node21);
        boolean boolean40 = node39.isSyntheticBlock();
        node39.setWasEmptyNode(true);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative44 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec45 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException: BITXOR 0\n", jSTypeNative44);
        java.lang.String str46 = assertionFunctionSpec45.getFunctionName();
        com.google.javascript.rhino.InputId inputId48 = new com.google.javascript.rhino.InputId("");
        java.lang.String str49 = inputId48.getIdName();
        java.lang.String str50 = inputId48.getIdName();
        java.lang.String str51 = inputId48.toString();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        java.lang.String str59 = com.google.javascript.jscomp.NodeUtil.getSourceName(node53);
        node53.setSourceFileForTesting("hi!");
        boolean boolean62 = inputId48.equals((java.lang.Object) node53);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int67 = node66.getChildCount();
        boolean boolean68 = node66.isLocalResultCall();
        com.google.javascript.rhino.Node node69 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = node69.getJSDocInfo();
        com.google.javascript.rhino.Node node71 = assertionFunctionSpec45.getAssertedParam(node69);
        node39.addChildToFront(node71);
        boolean boolean73 = node39.isContinue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.io.IOException: BITXOR 0\n" + "'", str46, "java.io.IOException: BITXOR 0\n");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "InputId: " + "'", str51, "InputId: ");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(jSDocInfo70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node13 = null;
        node5.addChildrenAfter(node12, node13);
        boolean boolean15 = node12.isLabel();
        boolean boolean16 = node12.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("java.io.IOException: Unknown class name");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int7 = node6.getChildCount();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        boolean boolean15 = node9.isVar();
        com.google.javascript.rhino.Node node16 = node9.getParent();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        boolean boolean24 = node18.isVar();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        boolean boolean30 = node26.isWith();
        com.google.javascript.rhino.Node node31 = node18.srcref(node26);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(130, node6, node9, node26, node35, 0, 15);
        com.google.javascript.rhino.Node node39 = node38.getFirstChild();
        com.google.javascript.rhino.Node node40 = node1.useSourceInfoIfMissingFromForTree(node38);
        node1.putIntProp((int) (byte) 100, (int) (short) -1);
        boolean boolean44 = node1.isOnlyModifiesThisCall();
        boolean boolean45 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100, (int) (byte) 100, 10);
        boolean boolean4 = node3.isFor();
        java.lang.String str5 = node3.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 100.0 100" + "'", str5, "NUMBER 100.0 100");
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        boolean boolean9 = node5.isOptionalArg();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable10 = node5.getAncestors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getVersion();
        boolean boolean14 = jSDocInfo11.isInterface();
        boolean boolean15 = jSDocInfo11.isJavaDispatch();
        java.lang.String str16 = jSDocInfo11.getSourceName();
        boolean boolean18 = jSDocInfo11.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean19 = jSDocInfo11.hasBaseType();
        boolean boolean20 = jSDocInfo11.isExterns();
        node5.setJSDocInfo(jSDocInfo11);
        boolean boolean22 = node5.isInstanceOf();
        node5.setVarArgs(true);
        node5.setVarArgs(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isFunction();
        boolean boolean34 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFrom(node32);
        boolean boolean36 = node35.isQuotedString();
        node35.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node35);
        node5.setStaticSourceFile(staticSourceFile39);
        int int42 = staticSourceFile39.getColumnOfOffset(52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ancestorIterable10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        boolean boolean9 = node8.isInstanceOf();
        com.google.javascript.rhino.InputId inputId10 = com.google.javascript.jscomp.NodeUtil.getInputId(node8);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(10, node8);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node11);
        boolean boolean13 = node11.isFromExterns();
        com.google.javascript.rhino.Node node14 = node11.getLastChild();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isFunction();
        com.google.javascript.rhino.Node node18 = node16.cloneTree();
        int int19 = node16.getCharno();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        boolean boolean29 = node28.isRegExp();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        java.lang.String str34 = node31.toString();
        com.google.javascript.rhino.Node node35 = node28.useSourceInfoIfMissingFromForTree(node31);
        int int36 = node28.getSideEffectFlags();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node28.children();
        boolean boolean38 = node28.isInstanceOf();
        boolean boolean39 = node28.isLabelName();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node28.getAncestors();
        com.google.javascript.rhino.Node node41 = node20.srcrefTree(node28);
        com.google.javascript.rhino.Node node42 = node41.getLastChild();
        com.google.javascript.rhino.Node[] nodeArray48 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(35, nodeArray48, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(0, nodeArray48, 4, 27);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(10, nodeArray48);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(45, nodeArray48, (int) '#', 4);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) ' ', nodeArray48);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node62.hasChild(node66);
        com.google.javascript.rhino.Node node68 = com.google.javascript.jscomp.NodeUtil.newExpr(node62);
        boolean boolean69 = node68.isRegExp();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean72 = node71.isName();
        boolean boolean73 = node71.isSwitch();
        java.lang.String str74 = node71.toString();
        com.google.javascript.rhino.Node node75 = node68.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(50, node75);
        com.google.javascript.rhino.Node node77 = node59.clonePropsFrom(node76);
        com.google.javascript.rhino.Node node78 = node42.useSourceInfoFrom(node77);
        boolean boolean79 = node42.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(inputId10);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER -1.0" + "'", str34, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeArray48);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "NUMBER -1.0" + "'", str74, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isWith();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int11 = node10.getChildCount();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        boolean boolean19 = node13.isVar();
        com.google.javascript.rhino.Node node20 = node13.getParent();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        boolean boolean28 = node22.isVar();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        java.lang.String str33 = node30.toString();
        boolean boolean34 = node30.isWith();
        com.google.javascript.rhino.Node node35 = node22.srcref(node30);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(130, node10, node13, node30, node39, 0, 15);
        com.google.javascript.rhino.Node node43 = node42.getFirstChild();
        com.google.javascript.rhino.Node node44 = node1.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node45 = node42.cloneTree();
        java.lang.String str46 = node45.getQualifiedName();
        boolean boolean47 = node45.isNE();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node57.isName();
        boolean boolean59 = node57.isSwitch();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node57.hasChild(node61);
        com.google.javascript.rhino.Node node63 = com.google.javascript.jscomp.NodeUtil.newExpr(node57);
        boolean boolean64 = node63.isRegExp();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean67 = node66.isName();
        boolean boolean68 = node66.isSwitch();
        java.lang.String str69 = node66.toString();
        com.google.javascript.rhino.Node node70 = node63.useSourceInfoIfMissingFromForTree(node66);
        boolean boolean71 = node54.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean74 = node73.isName();
        boolean boolean75 = node73.isSwitch();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean78 = node73.hasChild(node77);
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node77.setJSType(jSType79);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(45, node54, node77, 10, 2);
        boolean boolean84 = node77.isQuotedString();
        com.google.javascript.rhino.Node node85 = node45.srcref(node77);
        int int86 = node85.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "NUMBER -1.0" + "'", str33, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER -1.0" + "'", str69, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 100);
        boolean boolean2 = node1.isOptionalArg();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        boolean boolean10 = node4.isVar();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        java.lang.String str15 = node12.toString();
        boolean boolean16 = node12.isWith();
        com.google.javascript.rhino.Node node17 = node4.srcref(node12);
        boolean boolean18 = node17.isWith();
        node17.putBooleanProp(12, true);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(0, "Node tree inequality:\nTree1:\nEXPR_RESULT\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: EXPR_RESULT\n\n\nSubtree2: NUMBER 100.0 100\n", 36, 0);
        com.google.javascript.rhino.Node node27 = node17.srcrefTree(node26);
        boolean boolean28 = node17.isIn();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        java.lang.String str36 = node30.getSourceFileName();
        boolean boolean37 = node30.isIn();
        com.google.javascript.rhino.InputId inputId38 = com.google.javascript.jscomp.NodeUtil.getInputId(node30);
        boolean boolean39 = node30.isVoid();
        boolean boolean40 = node30.isLocalResultCall();
        boolean boolean41 = node30.isInstanceOf();
        node17.addChildrenToFront(node30);
        java.lang.Object obj44 = node30.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        node46.setWasEmptyNode(true);
        boolean boolean49 = node46.isOr();
        boolean boolean50 = node46.isNumber();
        node46.putIntProp((int) (short) 0, 51);
        boolean boolean54 = node46.isOr();
        node46.setWasEmptyNode(false);
        boolean boolean57 = node46.isGetProp();
        boolean boolean58 = node46.isGetProp();
        com.google.javascript.jscomp.CodingConvention.Bind bind59 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node30, node46);
        node30.setOptionalArg(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER -1.0" + "'", str15, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(inputId38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.toString();
        int int5 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        boolean boolean24 = node23.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        java.lang.String str29 = node26.toString();
        com.google.javascript.rhino.Node node30 = node23.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 0, node10, node26, node36, (int) (byte) 0, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean45 = node44.isName();
        boolean boolean46 = node44.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node44.hasChild(node48);
        com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newExpr(node44);
        int int51 = node44.getLength();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object[] objArray58 = strSet55.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        int int63 = strList61.size();
        boolean boolean64 = strSet55.containsAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo65.getParameterNames();
        boolean boolean68 = jSDocInfo65.hasParameter("hi!");
        boolean boolean69 = jSDocInfo65.hasThisType();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo65.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo71.getParameterNames();
        boolean boolean73 = strSet70.addAll((java.util.Collection<java.lang.String>) strSet72);
        strSet70.clear();
        boolean boolean75 = strList61.addAll((java.util.Collection<java.lang.String>) strSet70);
        node26.setDirectives(strSet70);
        boolean boolean77 = node26.isNot();
        boolean boolean78 = node26.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "NUMBER -1.0" + "'", str29, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[hi!]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 44, 44, 42);
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isWith();
        boolean boolean12 = node7.hasOneChild();
        boolean boolean13 = node7.isDebugger();
        com.google.javascript.rhino.Node node14 = node7.cloneNode();
        boolean boolean15 = node7.isSyntheticBlock();
        boolean boolean16 = node7.isTypeOf();
        boolean boolean17 = node7.isGetProp();
        com.google.javascript.rhino.Node node18 = node3.copyInformationFrom(node7);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: ", 10, 38);
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        boolean boolean6 = node3.getBooleanProp(4);
        boolean boolean7 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n", (int) (short) 100, 42);
        node3.setOptionalArg(true);
        boolean boolean6 = node3.isAssign();
        java.lang.Object obj8 = node3.getProp((int) ' ');
        boolean boolean9 = node3.isBreak();
        boolean boolean10 = node3.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        node1.addSuppression("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        java.lang.String str11 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node1);
        boolean boolean12 = node1.isWhile();
        com.google.javascript.rhino.Node node13 = node1.getLastChild();
        boolean boolean14 = node1.isGetProp();
        node1.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean17 = node1.isEmpty();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node1.children();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "Node tree inequality:\nTree1:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nTree2:\nBITNOT\n\n\nSubtree1: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree2: BITNOT\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.setType(2);
        boolean boolean11 = node5.isTry();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException(throwable3);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException(throwable5);
        iOException4.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException4);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("java.io.IOException: hi!");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        iOException9.addSuppressed((java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException("Node tree inequality:\nTree1:\nEXPR_RESULT 42\n    NUMBER -1.0\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree1: EXPR_RESULT 42\n    NUMBER -1.0\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n", (java.lang.Throwable) iOException12);
        java.io.IOException iOException16 = new java.io.IOException("InputId: Unknown class name", (java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException19 = new java.io.IOException("GT");
        iOException17.addSuppressed((java.lang.Throwable) iOException19);
        java.lang.String str21 = iOException17.toString();
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "java.io.IOException: java.io.IOException: Node tree inequality:\nTree1:\nEXPR_RESULT 42\n    NUMBER -1.0\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree1: EXPR_RESULT 42\n    NUMBER -1.0\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n" + "'", str21, "java.io.IOException: java.io.IOException: Node tree inequality:\nTree1:\nEXPR_RESULT 42\n    NUMBER -1.0\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n\n\nSubtree1: EXPR_RESULT 42\n    NUMBER -1.0\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n\n");
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN;
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        java.lang.String str5 = node2.toString();
        boolean boolean6 = node2.isWith();
        int int8 = node2.getIntProp((int) ' ');
        boolean boolean9 = node2.isNE();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        node15.setType(2);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        com.google.javascript.rhino.Node node22 = node2.srcref(node21);
        node2.setOptionalArg(true);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node34.isName();
        boolean boolean36 = node34.isSwitch();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node34.hasChild(node38);
        com.google.javascript.rhino.Node node40 = com.google.javascript.jscomp.NodeUtil.newExpr(node34);
        boolean boolean41 = node40.isRegExp();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        java.lang.String str46 = node43.toString();
        com.google.javascript.rhino.Node node47 = node40.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean48 = node31.isEquivalentToTyped(node43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node50.hasChild(node54);
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(45, node31, node54, 10, 2);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        boolean boolean65 = node62.isVarArgs();
        boolean boolean66 = node31.hasChild(node62);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node68.isName();
        boolean boolean70 = node68.isSwitch();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean73 = node68.hasChild(node72);
        boolean boolean74 = node68.isVar();
        node68.setWasEmptyNode(false);
        boolean boolean77 = node62.hasChild(node68);
        boolean boolean78 = node62.isInstanceOf();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship79 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node2, node62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo80.getExtendedInterfaces();
        java.lang.String str82 = jSDocInfo80.getVersion();
        boolean boolean83 = jSDocInfo80.isInterface();
        boolean boolean84 = jSDocInfo80.isJavaDispatch();
        java.lang.String str85 = jSDocInfo80.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList86 = jSDocInfo80.getImplementedInterfaces();
        java.lang.String str87 = jSDocInfo80.getFileOverview();
        int int88 = jSDocInfo80.getExtendedInterfacesCount();
        boolean boolean89 = jSDocInfo80.isHidden();
        node2.setJSDocInfo(jSDocInfo80);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean93 = node92.isFunction();
        com.google.javascript.rhino.Node node94 = node92.cloneTree();
        node2.addChildToBack(node94);
        com.google.javascript.rhino.JSDocInfo jSDocInfo96 = node94.getJSDocInfo();
        com.google.javascript.rhino.Node node97 = node94.getNext();
        org.junit.Assert.assertTrue("'" + subclassType0 + "' != '" + com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN + "'", subclassType0.equals(com.google.javascript.jscomp.CodingConvention.SubclassType.MIXIN));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0" + "'", str5, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NUMBER -1.0" + "'", str46, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(jSTypeExpressionList86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNull(jSDocInfo96);
        org.junit.Assert.assertNull(node97);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        java.lang.String str3 = jSDocInfo0.getVersion();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.isInterface();
        boolean boolean7 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("INSTANCEOF 0");
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        int int10 = node9.getLineno();
        boolean boolean11 = node9.isScript();
        boolean boolean12 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node9);
        com.google.javascript.rhino.Node node13 = node9.cloneNode();
        node13.setVarArgs(false);
        boolean boolean16 = node13.isInc();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.String str22 = node5.checkTreeEquals(node8);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        java.lang.String str25 = node24.getSourceFileName();
        node24.setIsSyntheticBlock(true);
        boolean boolean28 = node24.isTry();
        node24.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node31 = node8.useSourceInfoIfMissingFrom(node24);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(0, "NUMBER -1.0", (int) '#', 44);
        boolean boolean6 = node5.isUnscopedQualifiedName();
        int int7 = node5.getSourceOffset();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node23 = node22.removeChildren();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(27, node5, node23, (-1), 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        node28.setOptionalArg(true);
        node28.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node55 = node28.useSourceInfoFromForTree(node47);
        boolean boolean56 = node47.isFor();
        boolean boolean57 = node47.isFor();
        com.google.javascript.rhino.Node node58 = node5.useSourceInfoFrom(node47);
        node47.setLineno(46);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType63 = node62.getJSType();
        boolean boolean64 = node62.isScript();
        boolean boolean65 = node62.isTry();
        node47.addChildrenToFront(node62);
        boolean boolean67 = node62.isNoSideEffectsCall();
        boolean boolean68 = node62.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        int int7 = node5.getLineno();
        java.util.Set<java.lang.String> strSet8 = node5.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node5.siblings();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0);
        java.lang.String str13 = node12.getSourceFileName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) 'a', node12, (int) '4', (int) (short) 100);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node18.hasChild(node22);
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.InputId inputId26 = com.google.javascript.jscomp.NodeUtil.getInputId(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newExpr(node28);
        int int35 = node28.getLength();
        boolean boolean36 = node28.isNew();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node38.hasChild(node42);
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        int int45 = node38.getLength();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet49);
        boolean boolean53 = node38.getBooleanProp(41);
        com.google.javascript.rhino.Node node54 = node28.useSourceInfoFromForTree(node38);
        boolean boolean55 = node38.isGetElem();
        com.google.javascript.rhino.Node node56 = node22.useSourceInfoFrom(node38);
        com.google.javascript.rhino.jstype.JSType jSType57 = node38.getJSType();
        boolean boolean58 = node38.isParamList();
        node38.removeProp((int) ' ');
        com.google.javascript.rhino.Node node61 = node12.clonePropsFrom(node38);
        boolean boolean62 = node38.isOptionalArg();
        node38.setSourceEncodedPositionForTree(38);
        com.google.javascript.rhino.Node node65 = node5.useSourceInfoIfMissingFromForTree(node38);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node8.isName();
        boolean boolean10 = node8.isSwitch();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node8.hasChild(node12);
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        int int15 = node8.getLength();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.Node node31 = com.google.javascript.jscomp.NodeUtil.newExpr(node25);
        int int32 = node25.getLength();
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object[] objArray39 = strSet36.toArray();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        int int44 = strList42.size();
        boolean boolean45 = strSet36.containsAll((java.util.Collection<java.lang.String>) strList42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean48 = node47.isName();
        boolean boolean49 = node47.isSwitch();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node47.hasChild(node51);
        com.google.javascript.rhino.Node node53 = com.google.javascript.jscomp.NodeUtil.newExpr(node47);
        int int54 = node47.getLength();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.lang.Object[] objArray61 = strSet58.toArray();
        boolean boolean62 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet58);
        boolean boolean63 = strSet58.isEmpty();
        java.util.Iterator<java.lang.String> strItor64 = strSet58.iterator();
        java.lang.Object[] objArray65 = strSet58.toArray();
        java.util.stream.Stream<java.lang.String> strStream66 = strSet58.stream();
        boolean boolean67 = strSet58.isEmpty();
        boolean boolean68 = strSet19.removeAll((java.util.Collection<java.lang.String>) strSet58);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean75 = node70.hasChild(node74);
        com.google.javascript.rhino.Node node76 = com.google.javascript.jscomp.NodeUtil.newExpr(node70);
        int int77 = node70.getLength();
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet81);
        boolean boolean85 = strSet81.add("");
        java.lang.Object[] objArray86 = strSet81.toArray();
        java.util.Iterator<java.lang.String> strItor87 = strSet81.iterator();
        int int88 = strSet81.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo89.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection91 = jSDocInfo89.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = jSDocInfo89.getTemplateTypeNames();
        boolean boolean93 = strSet81.addAll((java.util.Collection<java.lang.String>) strList92);
        boolean boolean94 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet81);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[hi!]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[hi!]");
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[hi!, ]");
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertNull(strCollection91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor6 = strSet5.iterator();
        strSet5.clear();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags9 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '#');
        sideEffectFlags9.setMutatesArguments();
        sideEffectFlags9.setThrows();
        sideEffectFlags9.setAllFlags();
        int int13 = sideEffectFlags9.valueOf();
        sideEffectFlags9.setMutatesGlobalState();
        boolean boolean15 = sideEffectFlags9.areAllFlagsSet();
        boolean boolean16 = strSet5.remove((java.lang.Object) sideEffectFlags9);
        java.util.stream.Stream<java.lang.String> strStream17 = strSet5.stream();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet5.parallelStream();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(strStream18);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean8 = jSDocInfo0.hasBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.jstype.JSType jSType18 = null;
        node16.setJSType(jSType18);
        com.google.javascript.rhino.InputId inputId20 = com.google.javascript.jscomp.NodeUtil.getInputId(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node22.hasChild(node26);
        com.google.javascript.rhino.Node node28 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        int int29 = node28.getType();
        com.google.javascript.rhino.Node node30 = node16.copyInformationFromForTree(node28);
        boolean boolean31 = node30.isRegExp();
        jSDocInfo0.setAssociatedNode(node30);
        java.lang.String str33 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node30);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node30.getJsDocBuilderForNode();
        int int35 = node30.getLength();
        com.google.javascript.rhino.InputId inputId36 = com.google.javascript.jscomp.NodeUtil.getInputId(node30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(inputId20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 130 + "'", int29 == 130);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(inputId36);
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isExpose();
        java.lang.String str9 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo10.getParameterNames();
        boolean boolean13 = jSDocInfo10.hasParameter("hi!");
        boolean boolean14 = jSDocInfo10.hasThisType();
        boolean boolean15 = jSDocInfo10.isIdGenerator();
        jSDocInfo10.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        boolean boolean18 = jSDocInfo10.isOverride();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean27 = node26.isRegExp();
        jSDocInfo10.setAssociatedNode(node26);
        boolean boolean29 = node26.isCatch();
        boolean boolean30 = node26.hasChildren();
        boolean boolean31 = node26.isFromExterns();
        jSDocInfo0.setAssociatedNode(node26);
        boolean boolean33 = node26.wasEmptyNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node26.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        java.lang.String str12 = node9.toString();
        boolean boolean13 = node9.isWith();
        com.google.javascript.rhino.Node node14 = node1.srcref(node9);
        int int15 = node1.getChildCount();
        boolean boolean16 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        boolean boolean17 = node1.isOr();
        boolean boolean18 = node1.isFor();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node20.hasChild(node24);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean28 = node27.isName();
        boolean boolean29 = node27.isSwitch();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node27.hasChild(node31);
        com.google.javascript.rhino.Node node33 = com.google.javascript.jscomp.NodeUtil.newExpr(node27);
        boolean boolean34 = node33.isRegExp();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        java.lang.String str39 = node36.toString();
        com.google.javascript.rhino.Node node40 = node33.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean41 = node24.isEquivalentToTyped(node36);
        int int42 = node1.getIndexOfChild(node24);
        java.lang.String str43 = node24.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER -1.0" + "'", str12, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER -1.0" + "'", str39, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 44.0 52\n", 37, (int) 'a');
        boolean boolean4 = node3.isFalse();
        boolean boolean5 = node3.isEmpty();
        boolean boolean6 = node3.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node1.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet12.spliterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node17.isName();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node17.hasChild(node21);
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node17);
        int int24 = node17.getLength();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet28);
        boolean boolean32 = strSet28.add("");
        java.lang.Object[] objArray33 = strSet28.toArray();
        boolean boolean34 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet28);
        boolean boolean35 = strSet12.isEmpty();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node43.isName();
        boolean boolean45 = node43.isSwitch();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 100, node38, node40, node43);
        boolean boolean47 = node40.isLabelName();
        boolean boolean48 = strSet12.remove((java.lang.Object) node40);
        java.util.Spliterator<java.lang.String> strSpliterator49 = strSet12.spliterator();
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node58.isName();
        boolean boolean60 = node58.isSwitch();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node64 = com.google.javascript.jscomp.NodeUtil.newExpr(node58);
        int int65 = node58.getLength();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet69);
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet69.spliterator();
        boolean boolean73 = strSet55.retainAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean74 = strSet55.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator75 = strSet55.spliterator();
        boolean boolean76 = strSet12.addAll((java.util.Collection<java.lang.String>) strSet55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo77.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection79 = jSDocInfo77.getReferences();
        boolean boolean80 = jSDocInfo77.isJavaDispatch();
        java.lang.String str81 = jSDocInfo77.toString();
        boolean boolean82 = jSDocInfo77.isImplicitCast();
        int int83 = jSDocInfo77.getImplementedInterfaceCount();
        java.lang.String str84 = jSDocInfo77.getReturnDescription();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo77.getModifies();
        strSet85.clear();
        boolean boolean87 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSpliterator49);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNull(strCollection79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "JSDocInfo" + "'", str81, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        boolean boolean12 = jSDocInfo0.isNoShadow();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean10 = node9.isName();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node9.hasChild(node13);
        com.google.javascript.rhino.Node node15 = com.google.javascript.jscomp.NodeUtil.newExpr(node9);
        boolean boolean16 = node15.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        java.lang.String str21 = node18.toString();
        com.google.javascript.rhino.Node node22 = node15.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean23 = node6.isEquivalentToTyped(node18);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node25.isName();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node25.hasChild(node29);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(45, node6, node29, 10, 2);
        java.util.Set<java.lang.String> strSet36 = null;
        node6.setDirectives(strSet36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        java.lang.String str56 = node39.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node59.isName();
        boolean boolean61 = node59.isSwitch();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean64 = node59.hasChild(node63);
        boolean boolean65 = node63.isGetElem();
        node39.putProp((int) (short) 100, (java.lang.Object) boolean65);
        boolean boolean67 = node39.isGetProp();
        int int69 = node39.getIntProp((int) (byte) -1);
        node39.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node72 = node6.useSourceInfoFrom(node39);
        com.google.javascript.rhino.Node node73 = node6.getLastSibling();
        com.google.javascript.rhino.Node node74 = node73.getNext();
        int int76 = node73.getIntProp(49);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "NUMBER -1.0" + "'", str21, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("", jSTypeNative1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node11.hasChild(node15);
        com.google.javascript.rhino.Node node17 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node20.isName();
        boolean boolean22 = node20.isSwitch();
        java.lang.String str23 = node20.toString();
        com.google.javascript.rhino.Node node24 = node17.useSourceInfoIfMissingFromForTree(node20);
        boolean boolean25 = node8.isEquivalentToTyped(node20);
        com.google.javascript.rhino.Node node26 = assertionFunctionSpec2.getAssertedParam(node8);
        boolean boolean27 = node26.isGetterDef();
        boolean boolean28 = node26.isComma();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node35.isName();
        boolean boolean37 = node35.isSwitch();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node35.hasChild(node39);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean43 = node42.isName();
        boolean boolean44 = node42.isSwitch();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node42.hasChild(node46);
        com.google.javascript.rhino.Node node48 = com.google.javascript.jscomp.NodeUtil.newExpr(node42);
        boolean boolean49 = node48.isRegExp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean52 = node51.isName();
        boolean boolean53 = node51.isSwitch();
        java.lang.String str54 = node51.toString();
        com.google.javascript.rhino.Node node55 = node48.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean56 = node39.isEquivalentToTyped(node51);
        boolean boolean57 = node51.isReturn();
        com.google.javascript.jscomp.CodingConvention.Bind bind58 = new com.google.javascript.jscomp.CodingConvention.Bind(node26, node30, node51);
        boolean boolean59 = node51.isNot();
        boolean boolean60 = node51.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NUMBER -1.0" + "'", str23, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "NUMBER -1.0" + "'", str54, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        node1.detachChildren();
        boolean boolean5 = node1.isDebugger();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node11.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node11);
        node11.setWasEmptyNode(false);
        boolean boolean17 = node1.isEquivalentTo(node11);
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo18.getExtendedInterfaces();
        boolean boolean21 = jSDocInfo18.hasParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isFunction();
        boolean boolean26 = node24.isUnscopedQualifiedName();
        boolean boolean27 = node24.isEmpty();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node30.isName();
        boolean boolean32 = node30.isSwitch();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean35 = node30.hasChild(node34);
        boolean boolean36 = node30.isVar();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean39 = node38.isName();
        boolean boolean40 = node38.isSwitch();
        java.lang.String str41 = node38.toString();
        boolean boolean42 = node38.isWith();
        com.google.javascript.rhino.Node node43 = node30.srcref(node38);
        node30.detachChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind47 = new com.google.javascript.jscomp.CodingConvention.Bind(node24, node30, node46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, 100, 12);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean54 = node53.isName();
        boolean boolean55 = node53.isSwitch();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean58 = node53.hasChild(node57);
        boolean boolean59 = node53.isComma();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean62 = node61.isName();
        boolean boolean63 = node61.isSwitch();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean66 = node61.hasChild(node65);
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node61);
        boolean boolean68 = node67.isRegExp();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean71 = node70.isName();
        boolean boolean72 = node70.isSwitch();
        java.lang.String str73 = node70.toString();
        com.google.javascript.rhino.Node node74 = node67.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node70.setJSType(jSType75);
        boolean boolean77 = node70.isBlock();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, node51, node53, node70, 10, (int) (short) 10);
        boolean boolean81 = node24.hasChildren();
        jSDocInfo18.setAssociatedNode(node24);
        com.google.javascript.rhino.Node node83 = node1.useSourceInfoFrom(node24);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean86 = node85.isName();
        boolean boolean87 = node85.isSwitch();
        java.lang.String str88 = node85.toString();
        boolean boolean89 = node85.isNumber();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection90 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node85);
        boolean boolean91 = node85.isArrayLit();
        boolean boolean92 = node83.isEquivalentTo(node85);
        boolean boolean93 = node85.isAssign();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER -1.0" + "'", str41, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "NUMBER -1.0" + "'", str73, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "NUMBER -1.0" + "'", str88, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(nodeCollection90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        java.io.IOException iOException2 = new java.io.IOException("java.io.IOException: hi!");
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException("STRING Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n 100 [opt_arg: 1] [input_id: NUMBER -1.0]", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) 10);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 15 + "'", int7 == 15);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        boolean boolean8 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        boolean boolean11 = jSDocInfo0.hasType();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str12 = jSDocInfo0.getLicense();
        boolean boolean13 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isScript();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node1);
        boolean boolean21 = node1.isTrue();
        com.google.javascript.rhino.Node node22 = node1.cloneTree();
        int int24 = node22.getIntProp(15);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.InputId inputId34 = com.google.javascript.jscomp.NodeUtil.getInputId(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node36.hasChild(node40);
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        int int43 = node36.getLength();
        boolean boolean44 = node36.isNew();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node46.hasChild(node50);
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node46);
        int int53 = node46.getLength();
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet57);
        boolean boolean61 = node46.getBooleanProp(41);
        com.google.javascript.rhino.Node node62 = node36.useSourceInfoFromForTree(node46);
        boolean boolean63 = node46.isGetElem();
        com.google.javascript.rhino.Node node64 = node30.useSourceInfoFrom(node46);
        boolean boolean65 = node30.isGetterDef();
        int int66 = node30.getSideEffectFlags();
        boolean boolean67 = node30.isFunction();
        boolean boolean68 = node30.hasMoreThanOneChild();
        node30.setVarArgs(true);
        node30.setLineno((int) (byte) 100);
        com.google.javascript.rhino.InputId inputId73 = node30.getInputId();
        boolean boolean74 = node30.isComma();
        com.google.javascript.rhino.Node node75 = node22.useSourceInfoIfMissingFrom(node30);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeCollection20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(inputId34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(35, nodeArray7, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(0, nodeArray7, 4, 27);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(10, nodeArray7);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(45, nodeArray7, (int) '#', 4);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(37, nodeArray7, 29, (int) '#');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(46, nodeArray7);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray7, 44, (int) (byte) 10);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.isConstructor();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        int int11 = jSDocInfo0.getParameterCount();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(strCollection12);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean6 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        java.lang.String str11 = jSDocInfo0.getMeaning();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(markerCollection12);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(8);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        node5.addSuppression("");
        int int11 = node5.getLineno();
        boolean boolean12 = node5.isOr();
        boolean boolean13 = node5.isReturn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.Node node22 = com.google.javascript.jscomp.NodeUtil.newExpr(node16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        com.google.javascript.rhino.Node node30 = com.google.javascript.jscomp.NodeUtil.newExpr(node24);
        node24.setOptionalArg(true);
        node24.putBooleanProp((int) (short) -1, true);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean38 = node37.isName();
        boolean boolean39 = node37.isSwitch();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node37.hasChild(node41);
        com.google.javascript.rhino.Node node43 = com.google.javascript.jscomp.NodeUtil.newExpr(node37);
        boolean boolean44 = node43.isRegExp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean47 = node46.isName();
        boolean boolean48 = node46.isSwitch();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node50 = node43.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node51 = node24.useSourceInfoFromForTree(node43);
        boolean boolean52 = node22.hasChild(node24);
        node22.setIsSyntheticBlock(true);
        boolean boolean55 = node22.isVar();
        node5.putProp((int) (byte) 1, (java.lang.Object) node22);
        node5.putIntProp(0, (-2147483648));
        boolean boolean60 = node5.isAssignAdd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "NUMBER -1.0" + "'", str49, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        java.lang.Object[] objArray8 = strSet7.toArray();
        strSet7.clear();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnStartLine();
        int int2 = namePosition0.getPositionOnStartLine();
        int int3 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node6.isName();
        boolean boolean8 = node6.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node6.hasChild(node10);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean18 = node13.hasChild(node17);
        com.google.javascript.rhino.Node node19 = com.google.javascript.jscomp.NodeUtil.newExpr(node13);
        boolean boolean20 = node19.isRegExp();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean23 = node22.isName();
        boolean boolean24 = node22.isSwitch();
        java.lang.String str25 = node22.toString();
        com.google.javascript.rhino.Node node26 = node19.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean27 = node10.isEquivalentToTyped(node22);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean30 = node29.isName();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean34 = node29.hasChild(node33);
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(45, node10, node33, 10, 2);
        java.lang.Object obj41 = node33.getProp(49);
        namePosition0.setItem(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean50 = node45.hasChild(node49);
        com.google.javascript.rhino.Node node51 = com.google.javascript.jscomp.NodeUtil.newExpr(node45);
        boolean boolean52 = node51.isInstanceOf();
        com.google.javascript.rhino.InputId inputId53 = com.google.javascript.jscomp.NodeUtil.getInputId(node51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(10, node51);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node54);
        boolean boolean56 = node54.isFromExterns();
        boolean boolean57 = node54.isOr();
        namePosition0.setItem(node54);
        int int59 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node60 = namePosition0.getItem();
        com.google.javascript.rhino.Node node61 = node60.removeFirstChild();
        boolean boolean62 = node60.isNull();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean65 = node64.isName();
        boolean boolean66 = node64.isSwitch();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean69 = node64.hasChild(node68);
        java.lang.String str70 = node64.getSourceFileName();
        boolean boolean71 = node64.isVar();
        boolean boolean72 = node64.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            node60.removeChild(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER -1.0" + "'", str25, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(inputId53);
        org.junit.Assert.assertNull(staticSourceFile55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        java.lang.String str4 = node1.toString();
        boolean boolean5 = node1.isVar();
        java.lang.String str6 = node1.getQualifiedName();
        com.google.javascript.rhino.InputId inputId7 = com.google.javascript.jscomp.NodeUtil.getInputId(node1);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo9.getExtendedInterfaces();
        java.lang.String str11 = jSDocInfo9.getVersion();
        boolean boolean12 = jSDocInfo9.isInterface();
        boolean boolean13 = jSDocInfo9.isJavaDispatch();
        java.lang.String str14 = jSDocInfo9.getSourceName();
        java.lang.String str15 = jSDocInfo9.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo9.getThisType();
        boolean boolean17 = jSDocInfo9.hasModifies();
        java.lang.String str18 = jSDocInfo9.getLendsName();
        boolean boolean19 = jSDocInfo9.shouldPreserveTry();
        boolean boolean20 = jSDocInfo9.isNoCompile();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo9.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getReturnType();
        node1.putProp(54, (java.lang.Object) jSDocInfo9);
        boolean boolean24 = jSDocInfo9.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo9.getThrownTypes();
        boolean boolean26 = jSDocInfo9.hasBaseType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "NUMBER -1.0" + "'", str4, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(inputId7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        boolean boolean3 = jSDocInfo0.isJavaDispatch();
        boolean boolean4 = jSDocInfo0.hasTypedefType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(nodeCollection8);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Set<java.lang.String> strSet1 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.hasParameter("hi!");
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Not declared as a type name");
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.lang.String str10 = jSDocInfo0.getOriginalCommentString();
        boolean boolean11 = jSDocInfo0.hasThisType();
        boolean boolean12 = jSDocInfo0.isExpose();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strSet7.spliterator();
        java.util.Iterator<java.lang.String> strItor9 = strSet7.iterator();
        strSet7.clear();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean3 = node2.isName();
        boolean boolean4 = node2.isSwitch();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean7 = node2.hasChild(node6);
        boolean boolean8 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        java.lang.String str13 = node10.toString();
        boolean boolean14 = node10.isWith();
        com.google.javascript.rhino.Node node15 = node2.srcref(node10);
        boolean boolean16 = node10.isFor();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean19 = node18.isName();
        boolean boolean20 = node18.isSwitch();
        boolean boolean21 = node18.isNull();
        boolean boolean22 = node18.isFunction();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean25 = node24.isName();
        boolean boolean26 = node24.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node24.hasChild(node28);
        boolean boolean30 = node24.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        java.lang.String str35 = node32.toString();
        boolean boolean36 = node32.isWith();
        com.google.javascript.rhino.Node node37 = node24.srcref(node32);
        java.lang.String str38 = node37.toString();
        boolean boolean39 = node37.isDec();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean42 = node41.isName();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean46 = node41.hasChild(node45);
        com.google.javascript.rhino.Node node47 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean48 = node47.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean51 = node50.isName();
        boolean boolean52 = node50.isSwitch();
        java.lang.String str53 = node50.toString();
        com.google.javascript.rhino.Node node54 = node47.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node50.setJSType(jSType55);
        boolean boolean57 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, node18, node37, node50, (int) (short) -1, 0);
        boolean boolean61 = node60.isLocalResultCall();
        boolean boolean62 = node60.isFalse();
        boolean boolean63 = node60.isTrue();
        com.google.javascript.rhino.Node node65 = node60.getAncestor((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            node60.setSideEffectFlags((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER -1.0" + "'", str13, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER -1.0" + "'", str35, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER -1.0" + "'", str38, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "NUMBER -1.0" + "'", str53, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node65);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        java.lang.String str6 = node3.toString();
        boolean boolean7 = node3.isVar();
        jSDocInfo0.setAssociatedNode(node3);
        boolean boolean9 = node3.isContinue();
        node3.detachChildren();
        boolean boolean11 = node3.isRegExp();
        com.google.javascript.rhino.Node[] nodeArray17 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(35, nodeArray17, 54, (int) (byte) 100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(0, nodeArray17, 4, 27);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(10, nodeArray17);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(45, nodeArray17, (int) '#', 4);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) ' ', nodeArray17);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        boolean boolean38 = node37.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(50, node44);
        com.google.javascript.rhino.Node node46 = node28.clonePropsFrom(node45);
        node3.addChildrenToFront(node28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER -1.0" + "'", str6, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeArray17);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER -1.0" + "'", str43, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isFunction();
        boolean boolean3 = node1.isUnscopedQualifiedName();
        boolean boolean4 = node1.isEmpty();
        boolean boolean5 = node1.isEmpty();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node7.hasChild(node11);
        boolean boolean13 = node7.isVar();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isName();
        boolean boolean17 = node15.isSwitch();
        java.lang.String str18 = node15.toString();
        boolean boolean19 = node15.isWith();
        com.google.javascript.rhino.Node node20 = node7.srcref(node15);
        node7.detachChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        com.google.javascript.jscomp.CodingConvention.Bind bind24 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node7, node23);
        int int26 = node23.getIntProp(0);
        boolean boolean27 = node23.isDo();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER -1.0" + "'", str18, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node7.getType();
        com.google.javascript.rhino.Node node9 = node7.getFirstChild();
        boolean boolean10 = node9.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo11.getExtendedInterfaces();
        java.lang.String str13 = jSDocInfo11.getReturnDescription();
        boolean boolean14 = jSDocInfo11.hasFileOverview();
        node9.setJSDocInfo(jSDocInfo11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node9);
        int int17 = node9.getType();
        boolean boolean18 = node9.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 130 + "'", int8 == 130);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 39 + "'", int17 == 39);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<java.lang.String> strCollection2 = jSDocInfo0.getReferences();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        boolean boolean7 = jSDocInfo0.isNoCompile();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("NUMBER -1.0 [is_var_args_param: 100]");
        boolean boolean11 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(strCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        java.lang.String str3 = jSDocInfo0.getVersion();
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        java.lang.String str6 = node3.toString();
        boolean boolean7 = node3.isVar();
        jSDocInfo0.setAssociatedNode(node3);
        boolean boolean9 = node3.isReturn();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean12 = node11.isName();
        boolean boolean13 = node11.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean16 = node15.isFunction();
        boolean boolean17 = node15.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = node11.useSourceInfoIfMissingFrom(node15);
        boolean boolean19 = node18.isQuotedString();
        node18.setSourceFileForTesting("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node18);
        java.lang.String str23 = staticSourceFile22.getName();
        int int25 = staticSourceFile22.getLineOffset(130);
        node3.setStaticSourceFile(staticSourceFile22);
        int int28 = staticSourceFile22.getLineOfOffset(41);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "NUMBER -1.0" + "'", str6, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(staticSourceFile22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n" + "'", str23, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNUMBER 100.0 100\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NUMBER 100.0 100\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2147483648) + "'", int25 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean4 = node3.isName();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean11 = node10.isName();
        boolean boolean12 = node10.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean15 = node10.hasChild(node14);
        com.google.javascript.rhino.Node node16 = com.google.javascript.jscomp.NodeUtil.newExpr(node10);
        boolean boolean17 = node16.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        java.lang.String str22 = node19.toString();
        com.google.javascript.rhino.Node node23 = node16.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean24 = node7.isEquivalentToTyped(node19);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean27 = node26.isName();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean31 = node26.hasChild(node30);
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(45, node7, node30, 10, 2);
        java.util.Set<java.lang.String> strSet37 = null;
        node7.setDirectives(strSet37);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(27);
        boolean boolean42 = node41.isFromExterns();
        boolean boolean43 = node41.isGetElem();
        node7.putProp(46, (java.lang.Object) node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node41.getJSDocInfo();
        node41.setCharno((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(130, node41);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "NUMBER -1.0" + "'", str22, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        com.google.javascript.rhino.Node node7 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        int int8 = node1.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node1.new FileLevelJsDocBuilder();
        boolean boolean10 = node1.isAssignAdd();
        boolean boolean11 = node1.isBreak();
        node1.setSourceEncodedPositionForTree(42);
        boolean boolean14 = node1.isGetterDef();
        com.google.javascript.rhino.Node node15 = node1.getLastSibling();
        boolean boolean16 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean9 = node4.hasChild(node8);
        com.google.javascript.rhino.Node node10 = com.google.javascript.jscomp.NodeUtil.newExpr(node4);
        boolean boolean11 = node10.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean14 = node13.isName();
        boolean boolean15 = node13.isSwitch();
        java.lang.String str16 = node13.toString();
        com.google.javascript.rhino.Node node17 = node10.useSourceInfoIfMissingFromForTree(node13);
        java.lang.String str18 = node1.checkTreeEquals(node17);
        boolean boolean19 = node1.isIf();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean26 = node21.hasChild(node25);
        com.google.javascript.rhino.Node node27 = com.google.javascript.jscomp.NodeUtil.newExpr(node21);
        node21.setOptionalArg(true);
        node21.putBooleanProp((int) (short) -1, true);
        int int33 = node21.getLineno();
        boolean boolean34 = node21.isDebugger();
        boolean boolean35 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node21);
        int int36 = node21.getChildCount();
        boolean boolean37 = node21.isCase();
        com.google.javascript.rhino.Node node38 = node1.useSourceInfoFrom(node21);
        // The following exception was thrown during execution in test generation
        try {
            node38.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER -1.0" + "'", str16, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n" + "'", str18, "Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nEXPR_RESULT\n    NUMBER -1.0\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: EXPR_RESULT\n    NUMBER -1.0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean2 = node1.isName();
        boolean boolean3 = node1.isSwitch();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean6 = node1.hasChild(node5);
        boolean boolean7 = node5.isGetElem();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node5);
        com.google.javascript.rhino.Node node9 = com.google.javascript.jscomp.NodeUtil.newExpr(node5);
        int int10 = node9.getLineno();
        boolean boolean11 = node9.isNumber();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        int int17 = node16.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean20 = node19.isName();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean24 = node19.hasChild(node23);
        boolean boolean25 = node19.isVar();
        com.google.javascript.rhino.Node node26 = node19.getParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean29 = node28.isName();
        boolean boolean30 = node28.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node28.hasChild(node32);
        boolean boolean34 = node28.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node36.isName();
        boolean boolean38 = node36.isSwitch();
        java.lang.String str39 = node36.toString();
        boolean boolean40 = node36.isWith();
        com.google.javascript.rhino.Node node41 = node28.srcref(node36);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 100, (int) 'a');
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(130, node16, node19, node36, node45, 0, 15);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node16.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node50 = node9.srcref(node16);
        com.google.javascript.rhino.Node node51 = node16.getLastSibling();
        java.util.Set<java.lang.String> strSet52 = node51.getDirectives();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER -1.0" + "'", str39, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(strSet52);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList1 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str2 = jSDocInfo0.getVersion();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean8 = node7.isName();
        boolean boolean9 = node7.isSwitch();
        java.lang.String str10 = node7.toString();
        boolean boolean11 = node7.isWith();
        int int13 = node7.getIntProp((int) ' ');
        boolean boolean14 = node7.isNE();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node16.isName();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean21 = node16.hasChild(node20);
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        node20.setType(2);
        com.google.javascript.rhino.Node node26 = node20.getLastSibling();
        com.google.javascript.rhino.Node node27 = node7.srcref(node26);
        node7.setOptionalArg(true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean33 = node32.isName();
        boolean boolean34 = node32.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean37 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean40 = node39.isName();
        boolean boolean41 = node39.isSwitch();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean44 = node39.hasChild(node43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.jscomp.NodeUtil.newExpr(node39);
        boolean boolean46 = node45.isRegExp();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean49 = node48.isName();
        boolean boolean50 = node48.isSwitch();
        java.lang.String str51 = node48.toString();
        com.google.javascript.rhino.Node node52 = node45.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean53 = node36.isEquivalentToTyped(node48);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean56 = node55.isName();
        boolean boolean57 = node55.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean60 = node55.hasChild(node59);
        com.google.javascript.rhino.jstype.JSType jSType61 = null;
        node59.setJSType(jSType61);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(45, node36, node59, 10, 2);
        java.lang.Object obj67 = node59.getProp(49);
        node59.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node70 = node7.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean71 = strSet5.remove((java.lang.Object) node59);
        boolean boolean72 = node59.isLocalResultCall();
        int int74 = node59.getIntProp(44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER -1.0" + "'", str10, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER -1.0" + "'", str51, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo1.getExtendedInterfaces();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean5 = node4.isName();
        boolean boolean6 = node4.isSwitch();
        java.lang.String str7 = node4.toString();
        boolean boolean8 = node4.isVar();
        jSDocInfo1.setAssociatedNode(node4);
        boolean boolean10 = node4.isReturn();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean13 = node12.isName();
        boolean boolean14 = node12.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean17 = node12.hasChild(node16);
        com.google.javascript.rhino.Node node18 = com.google.javascript.jscomp.NodeUtil.newExpr(node12);
        boolean boolean19 = node18.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean22 = node21.isName();
        boolean boolean23 = node21.isSwitch();
        java.lang.String str24 = node21.toString();
        com.google.javascript.rhino.Node node25 = node18.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node21.setJSType(jSType26);
        boolean boolean28 = node21.isGetterDef();
        boolean boolean29 = node21.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean32 = node31.isName();
        boolean boolean33 = node31.isSwitch();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean36 = node31.hasChild(node35);
        com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.NodeUtil.newExpr(node31);
        boolean boolean38 = node37.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean41 = node40.isName();
        boolean boolean42 = node40.isSwitch();
        java.lang.String str43 = node40.toString();
        com.google.javascript.rhino.Node node44 = node37.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean45 = node37.isDo();
        boolean boolean46 = node37.isWhile();
        com.google.javascript.rhino.Node node47 = node21.srcref(node37);
        com.google.javascript.rhino.Node node48 = node4.useSourceInfoIfMissingFromForTree(node37);
        node4.removeProp(4);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(2, node4);
        com.google.javascript.rhino.Node node52 = node4.getNext();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean55 = node54.isName();
        boolean boolean56 = node54.isSwitch();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean59 = node54.hasChild(node58);
        boolean boolean60 = node54.isVar();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) (-1));
        boolean boolean63 = node62.isName();
        boolean boolean64 = node62.isSwitch();
        java.lang.String str65 = node62.toString();
        boolean boolean66 = node62.isWith();
        com.google.javascript.rhino.Node node67 = node54.srcref(node62);
        boolean boolean68 = node62.isFor();
        boolean boolean69 = node62.isGetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node62);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node52.useSourceInfoIfMissingFromForTree(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER -1.0" + "'", str7, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER -1.0" + "'", str24, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NUMBER -1.0" + "'", str43, "NUMBER -1.0");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "NUMBER -1.0" + "'", str65, "NUMBER -1.0");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(staticSourceFile70);
    }
}

